(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{1376:function(s,a,e){s.exports=e.p+"assets/img/2020-11-0511.11.44.0f48ef62.png"},1377:function(s,a,e){s.exports=e.p+"assets/img/2020-11-053.55.16.f295f2f9.png"},2451:function(s,a,e){"use strict";e.r(a);var n=e(9),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"一-介绍-https-www-jianshu-com-p-65903a69d61d"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-介绍-https-www-jianshu-com-p-65903a69d61d"}},[s._v("#")]),s._v(" 一：介绍: https://www.jianshu.com/p/65903a69d61d")]),s._v(" "),n("h3",{attrs:{id:"一-sqlalchemy"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-sqlalchemy"}},[s._v("#")]),s._v(" （一）SQLAlchemy")]),s._v(" "),n("ul",[n("li",[s._v("概念")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("SQLAlchemy对象关系映射器提供了一种方法，用于将用户定义的Python类与数据库表相关联，并将这些类（对象）的实例与其对应表中的行相关联。它包括一个透明地同步对象及其相关行之间状态的所有变化的系统，称为工作单元，以及根据用户定义的类及其定义的彼此之间的关系表达数据库查询的系统。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("SQLAlchemy的基本框架")])]),s._v(" "),n("p",[n("img",{attrs:{src:e(1376),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("框架基本原理")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：Schema / Types 定义了类到表之间的映射框架(规则)\n2：SQL Expression Language 封装好的 SQL 语句\n3：Engine 操作者\n4：Connection Pooling 连接池\n5：Dialect 根据用户的配置，调用不同的数据库 API(Oracle, postgresql, Mysql) 并执行对应的 SQL语句\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"二-安装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-安装"}},[s._v("#")]),s._v(" （二）安装")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pip3 install sqlalchemy\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("SQLAlchemy本身无法操作数据库，其必须使用 pymsql 等第三方插件，从而实现对数据库的操作，如：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("mysql+pymysql://<username>:<password>@<host>/<dbname>[?<options>]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("SQLAlchemy的SQL执行流程")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Engine (SQLAlchemy 引擎) 使用 ConnectionPooling 连接数据库，之后再通过 Dialect 执行 SQL 语句\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"三-连接数据库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-连接数据库"}},[s._v("#")]),s._v(" （三）连接数据库")]),s._v(" "),n("ul",[n("li",[s._v("下面一连接 Mysql 为例来演示连接语法的具体实现")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from sqlalchemy import create_engine\n \nengine = create_engine(\n  "mysql+pymysql://root:123@172.16.153.160:3306/dbname?charset=utf8mb4", \n  echo=True, \n  max_overflow=3000)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("对上面代码进行解释")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：echo 标志是设置SQLAlchemy日志记录的快捷方式，启用它后，我们将看到所有生成的SQL。\n\n2：Max_overflow 指定了连接池的最大连接数。\n\n3：create_engine() 的返回值是一个实例引擎, 它代表了一个数据库的核心接口。\n\n4：此时的连接是惰性的，当create_engine()第一次返回的引擎，其实并没有试图连接到数据库之中; 只有在第一次要求它对数据库执行任务时才会发生这种情况，比如使用了 engine.execute() 才会连接数据库\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("SQLAlchemy可以执行原生SQL")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('ret = engine.execute("select * from t1;")\n# print(dir(engine))\n# print(ret.fetchone())\nprint(ret.fetchall())\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"四-mysql约束和索引"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-mysql约束和索引"}},[s._v("#")]),s._v(" （四）MySQL约束和索引")]),s._v(" "),n("ul",[n("li",[s._v("区别")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1: 概念上不同: 约束是为了保证数据的完整性，索引是为了提高查询速度\n2: 主键约束：创建主键约束时，mysql默认会自动创建一个索引, 若要实现主键的值不重复，在每次插入新记录时都需要检索数据，所以为了提高检索速度，同时对主键创建索引。\n3：唯一约束：创建唯一约束时，mysql 默认会自动创建一个唯一索引\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("约束")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1: 主键约束（primary key）\nprimary key，用于定义表的主键，是唯一确定表中每一条记录的标识符\n主键不能为空，也不能重复\n一张表中只能有一个主键\n\n2: 唯一性约束（unique）\nunique，设置某列数据不能重复，但可以有空值\n一张表中可以对多个列设置 unique 约束，也可以把多个字段定义成一个 unique 约束\n主键所在的列，不能使用唯一约束\n\n3: 默认值约束（default）\n在插入操作时，当某一列没有值时系统就自动把之前设置的默认值赋值过去。\n\n4: 外键约束（foreign key）\n如果在一张表中有一个非主键的字段，指向了另一张表中的主键。每张表中可以有多个外键\n通常将外键所在的表称为子表或被约束表，指向的另一个表称为父表或约束表或外表. 子表中外键字段的取值范围由父表决定\n子表在进行写操作的时候，如果外键字段在父表中找不到对应的匹配，操作就会失败\n对父表的主键字段进行删和改时，如果对应的主键在子表中被引用，操作就会失败\ndistrict： 严格模式， 父表不能删除或更新一个被子表引用的记录。\ncascade： 级联模式，父表操作后，子表关联的数据也跟着一起操作。\nset null： 置空模式，父表操作后，子表对应的字段被置空（前提是外键字段允许为NULL）。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("ul",[n("li",[s._v("索引")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("索引：是一种高效获取数据的数据结构，可以快速提高查询速度。在 innoDB 引擎中使用的是 B-Tree 索引算法。当查询海量数据时，索引的效果尤其明显。索引是定义在列上的，有单列索引、组合索引。\n\n索引类型\n普通索引：create index 索引名字 on 表名(列名)\n唯一索引：create unique index 索引名 on 表(列名)\n复合索引：create index myIndex on teacher2(sname, sex)\n删除索引：drop index 表.索引名字\n主键索引：很多时候也把 PRIMARY KEY 称为主键索引，但是主键和索引还是两个不同的概念。可以理解为，创建主键的同时，mysql 会自动对它创建索引。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"二-orm的基本操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-orm的基本操作"}},[s._v("#")]),s._v(" 二：ORM的基本操作")]),s._v(" "),n("ul",[n("li",[s._v("ORM流程")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ORM 操作的流程是，一个 Engine 使用 Schema Type 创建一个特定的结构对象，之后通过 SQL Expression Language 将该对象转换成 SQL 语句， 接着使用 ConnectionPling 连接数据库，最后通过 Dialect 执行 SQL 语句，并获取结果。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"一-声明一个映射类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-声明一个映射类"}},[s._v("#")]),s._v(" （一）声明一个映射类")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("使用Declarative系统映射的类是根据基类定义的，换句话说每个映射类需要继承这个基类。我们使用declarative_base() 函数可以创建这个基类，如下所示：\n\nfrom sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"二-创建一张表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-创建一张表"}},[s._v("#")]),s._v(" （二）创建一张表")]),s._v(" "),n("ul",[n("li",[s._v("teacher 表")])]),s._v(" "),n("p",[n("img",{attrs:{src:e(1377),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("在代码中定义表")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy import Column, Integer, String\n\nBase = declarative_base()\n\nclass Teacher(Base):\n    __tablename__ = 'teacher'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(12))\n    age = Column(String(2))\n    city = Column(String(16))\n    \n    def __repr__(self):\n        tpl = \"Teacher(id={}, name={}, age={}, city={})\"\n        return tpl.format(self.id, self.name, self.age, self.city)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("ul",[n("li",[s._v("注意")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("__repr__ 方法定义了一个对象的比较易读的显式方式\n使用 Declarative 的类至少需要一个__tablename__属性，并且至少有一个 Column属于主键\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"三-创建表到数据库中"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-创建表到数据库中"}},[s._v("#")]),s._v(" （三）创建表到数据库中")]),s._v(" "),n("ul",[n("li",[s._v("我们可以使用MetaData 为所有数据库中尚不存在的表向数据库发出CREATE TABLE语句，下面，我们调用该MetaData.create_all()方法，将我们Engine 作为数据库连接源传递。我们将看到首先发出特殊命令以检查teacher表的存在，然后是实际的语句：CREATE TABLE, 执行成功后可以检查是否创建成功")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Base.metadata.create_all(engine)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"四-创建映射类的实例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-创建映射类的实例"}},[s._v("#")]),s._v(" （四）创建映射类的实例")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("yg_teacher = Teacher(name='yangge', age='18', city='BeiJing')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("此时，实例对象只是在此刻环境的内存中有效，并没有在表中真正生成数据。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("要想生成数据到表中，需要创建一个和数据库沟通的会话对象，利用这个会话对象对数据库中的表进行操作（增加、更新，删除、查询）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"五-创建会话"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-创建会话"}},[s._v("#")]),s._v(" （五）创建会话")]),s._v(" "),n("ul",[n("li",[s._v("现在准备开始与数据库交谈，需要使用一个引擎的实例来创建一个 Session类的实例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from sqlalchemy.orm import sessionmaker\n\n# 把当前的引擎绑定给这个会话\nSession = sessionmaker(bind=engine) \n\n# 实例化\nsession = Session()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"六-通过-session-实例的方法进行操作表中的数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-通过-session-实例的方法进行操作表中的数据"}},[s._v("#")]),s._v(" （六）通过 Session 实例的方法进行操作表中的数据")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("刚才我们已经创建了一条数据的实例了，要想把这条数据实例真正的增加到数据库中的teacher 表中，需要先把这条数据对象添加到会话实例中，再通过会话实例的 commit() 方法提交事务到数据库，此时，数据库的 teacher 表中才会有这条数据。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("添加单条数据到 session 中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("session.add(yg_teacher)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("此时这个数据并没有被同步的数据库中，而是处于等待的状态，执行了 commit() 方法后，才会真正在数据表中创建数据。如果我们查询数据库，则首先刷新所有待处理信息，然后立即发出查询，但是这里依然没有查询数据库，而是查询的类对象。(此时得到的结果是并不是 数据库表中的最终数据，而是映射类的一个对象)")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("our_teacher = session.query(Teacher).filter_by(name='yangge').first()\nprint(our_teacher)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"七-提交数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-提交数据"}},[s._v("#")]),s._v(" （七）提交数据")]),s._v(" "),n("ul",[n("li",[s._v("交接session会话到数据库引擎, 此时，数据真正的被写入到数据库中了")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("session.commit()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("增加多条数据，一起提交")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("session.add_all([\n    Teacher(name='qiangge', age='19',city='北京'),\n    Teacher(name='shark', age='19',city='北京'),\n])\nsession.commit()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"八-在-commit-之前进行回滚"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八-在-commit-之前进行回滚"}},[s._v("#")]),s._v(" （八）在 commit() 之前进行回滚")]),s._v(" "),n("ul",[n("li",[s._v("在 commit( ) 之前，对实例对象的属性所做的更改，可以进行回滚。回到更改之前。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("session.rollback()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("示例: 假如目前向表中添加一条新的数据，同时查询出一条已有的数据，并且把已有的数据某个字段的值进行更改。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 新增数据\nsession.add(Teacher(name='shark2', age='18', city='ZhengZhou'))\n\n# 修改已有数据的字段值\nshark=session.query(Teacher).filter_by(name='shark').first()\nprint(shark.age)\nshark.age = '28'\nshark.name = 'shark3'\n\n# 查询操作结果\ntwo_user = session.query(Teacher).filter(Teacher.name.in_(['shark2','shark3'])).all()\nprint(two_user)\n\n#输出的结果\n[Teacher(id=4, name=shark, age=38, city='北京'),\n Teacher(id=23, name=shark2, age=18, city=ZhengZhou)]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("ul",[n("li",[s._v("此时数据的更改只是发生于会话对象的事务中，并没有发生在数据库中。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("session.rollback()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("之后再次进行查询操作会发现已恢复到修改之前，可以看出这里提到的回滚，本质上只是把某一条数据（也就是映射类的实例）从内存中删除而已。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[Teacher(id=4, name=shark, age=23, city='北京')]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);