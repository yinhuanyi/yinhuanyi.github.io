(window.webpackJsonp=window.webpackJsonp||[]).push([[385],{2255:function(s,a,e){"use strict";e.r(a);var t=e(9),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"_1-抽象类概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-抽象类概念"}},[s._v("#")]),s._v(" 1：抽象类概念")]),s._v(" "),e("ul",[e("li",[s._v("表现形式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public abstract class Animal {\n\t\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("抽象类概念")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("抽象类无法被实例化，只能够被继承，但是可以通过多态将父类的引用指向之类的实例\nAnimal cat_nimal = new Cat();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("应用场景")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t某个父类只是知道子类应该包含怎么样的方法，但无法准确的知道这些子类如何实现这些方法，因此也就引申出来抽象方法，既然抽象类的作用是让子类继承，且按照抽象类定义的方法，在子类中做具体实现，因此抽象类中的方法就没有具体意义，因此抽象类中的方法一般都是抽象方法，让继承的子类重写抽象类中的抽象方法，实现具体逻辑。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"_2-抽象方法概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-抽象方法概念"}},[s._v("#")]),s._v(" 2：抽象方法概念")]),s._v(" "),e("ul",[e("li",[s._v("表现形式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 抽象方法必须写在抽象类中，且不能够实现\npublic abstract void talk();\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("继承抽象类的子类所需要具备的要素")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1：抽象方法不允许包含方法体，子类必须重写父类的抽象方法\n\n2：如果没有重写父类的方法，子类必须也是抽象类，说明子类将父类的抽象方法延续下去\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("应用场景")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("子类必须实现父类的抽象方法，如果不实现，那么子类必须也是抽象类\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[s._v("static、final、private 不能修饰abstract抽象方法")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("只能使用public修饰abstract抽象方法\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);