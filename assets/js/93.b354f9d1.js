(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{1815:function(s,a,e){s.exports=e.p+"assets/img/2020-03-319.58.52.6553661d.png"},1816:function(s,a,e){s.exports=e.p+"assets/img/2020-03-3110.03.04.a349b719.png"},1817:function(s,a,e){s.exports=e.p+"assets/img/2020-03-3110.04.05.fc240e8f.png"},1818:function(s,a,e){s.exports=e.p+"assets/img/2020-03-3110.06.55.d909ebcf.png"},1819:function(s,a,e){s.exports=e.p+"assets/img/2020-03-3110.11.03.97765528.png"},1820:function(s,a,e){s.exports=e.p+"assets/img/2020-03-3110.14.56.95eb2667.png"},2711:function(s,a,e){"use strict";e.r(a);var t=e(9),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"一-dockerfile的语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-dockerfile的语法"}},[s._v("#")]),s._v(" 一：Dockerfile的语法")]),s._v(" "),t("h3",{attrs:{id:"一-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-from"}},[s._v("#")]),s._v(" (一)：FROM")]),s._v(" "),t("ul",[t("li",[s._v("指定基础镜像")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("From centos\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:e(1815),alt:"Alt text"}})]),s._v(" "),t("h3",{attrs:{id:"二-run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-run"}},[s._v("#")]),s._v(" (二)：RUN")]),s._v(" "),t("ul",[t("li",[s._v("在镜像构建的时候，运行的命令")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("RUN  yum update && yum install -y vim \\\n\t net-tools\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"三-run"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-run"}},[s._v("#")]),s._v(" (三)：RUN")]),s._v(" "),t("ul",[t("li",[s._v("在镜像构建的时候，运行的命令(注意：每运行一次RUN命令，联合文件系统都会新追加一层)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("RUN  yum update && yum install -y vim \\\n\t net-tools\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("img",{attrs:{src:e(1816),alt:"Alt text"}})]),s._v(" "),t("h3",{attrs:{id:"四-workdir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-workdir"}},[s._v("#")]),s._v(" (四)：WORKDIR")]),s._v(" "),t("ul",[t("li",[s._v("指定工作目录，如果不存在会创建")])]),s._v(" "),t("p",[t("img",{attrs:{src:e(1817),alt:"Alt text"}})]),s._v(" "),t("h3",{attrs:{id:"五-add-和-copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-add-和-copy"}},[s._v("#")]),s._v(" (五)：ADD 和 COPY")]),s._v(" "),t("ul",[t("li",[s._v("ADD和COPY的区别是：ADD拷贝宿主机文件到镜像中，文件如果是压缩文件，会进行解压，一般情况下使用COPY")])]),s._v(" "),t("p",[t("img",{attrs:{src:e(1818),alt:"Alt text"}})]),s._v(" "),t("h3",{attrs:{id:"六-env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-env"}},[s._v("#")]),s._v(" (六)：ENV")]),s._v(" "),t("ul",[t("li",[s._v("ENV是指定docker 镜像构建或运行时候的环境变量")])]),s._v(" "),t("p",[t("img",{attrs:{src:e(1819),alt:"Alt text"}})]),s._v(" "),t("h3",{attrs:{id:"二-run、cmd、entrypoint三者之间的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-run、cmd、entrypoint三者之间的区别"}},[s._v("#")]),s._v(" 二：RUN、CMD、ENTRYPOINT三者之间的区别")]),s._v(" "),t("h3",{attrs:{id:"一-shell和exec格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-shell和exec格式"}},[s._v("#")]),s._v(" (一)：Shell和Exec格式")]),s._v(" "),t("p",[t("img",{attrs:{src:e(1820),alt:"Alt text"}})]),s._v(" "),t("ul",[t("li",[s._v("shell方式的ENTRYPOINT")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('FROM centos\nENV name Docker\nENTRYPOINT echo "hello $name"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("exec方式的ENTRYPOINT")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('FROM centos\nENV name Docker\nENTRYPOINT ["/bin/bash", "-c", "echo hello $name"]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"二-cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-cmd"}},[s._v("#")]),s._v(" (二)：CMD")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1：容器启动时，默认执行的命令\n2：如果docker run指定了其他命令，CMD命令被忽略\n3：如果定义了多个CMD，只有最后一个会执行\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"三-entrypoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-entrypoint"}},[s._v("#")]),s._v(" (三)：ENTRYPOINT")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1：让容器以应用程序或者服务的形式运行\n2：不会被忽略，一定会执行\n3：一般是写一个shell脚本作为entrypoint\n4: 当 docker run 指定了命令，指定的命令不会执行\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("例如")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('...\n\nCOPY entrypoint.sh /usr/local/bin\nENTRYPOINT ["entrypoint.sh"]\nEXPOSE 3306\nCMD ["mysqld"]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("h3",{attrs:{id:"四-cmd作为entrypoint的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-cmd作为entrypoint的参数"}},[s._v("#")]),s._v(" (四)：CMD作为ENTRYPOINT的参数")]),s._v(" "),t("ul",[t("li",[s._v("dockerfile示例")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('FROM ubuntu\nRUN apt-get update && apt-get install -y stress\n# 运行容器的时候，ENTRYPOINT肯定会运行的，但是可能stress会需要指定一些参数，那么此时就需要CMD的帮忙\nENTRYPOINT ["/usr/bin/stress"]\n# 给CMD留空的目的是当只需docker run 指定其他命令的时候，覆盖CMD的命令，给ENTRYPOINT命令传递参数\nCMD []\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[s._v("构建镜像")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker build -t ubuntu:`date +%s` -f ubuntu.dockerfile .\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("运行容器")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 注意：这里的 --vm 1会覆盖CMD的命令，那么容器运行的命令变为：/usr/bin/stress --vm 1\ndocker run -it ubuntu:15453748 --vm 1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h3",{attrs:{id:"三-基于python脚本程序写一个dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-基于python脚本程序写一个dockerfile"}},[s._v("#")]),s._v(" 三：基于Python脚本程序写一个dockerfile")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('FROM python:2.7\nLABEL auth="Robby"\nRUN pip install flask\n# 注意这里/app/不要写成/app, 如果是/app，那么就变成将web.py拷贝到镜像且改名为/app文件\nCOPY web.py /app/\n# 这里相当于cd /app目录\nWORKDIR /app\nEXPOSE 5000\nCMD ["python", "web.py"]\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("web.py(flask默认端口是5000)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("from flask import Flask\napp = Flask(__name__)\n\ndef hello():\n\treturn \"hello world\"\n\nif __name__ == '__main__':\n\tapp.run()\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("构建镜像")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker build -t flask:`date +%s` -f flask.dockerfile .\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("如果在build镜像的时候有问题，那么需要进入到中间层镜像，看看是什么问题")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 6fb09b7c1d48就是中间层镜像\ndocker run -it 6fb09b7c1d48 /bin/bash\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("给镜像打tag")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker tag \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("运行容器（但是这里在/root/app目录下修改了后台代码，依然需要重启容器才能生效，前端的HTML页面代码可以立即生效）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker run -d --rm --name=flask -v /root/app:/app -p 5000:5000  flask:1586533496\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("删除所有的后台未运行的容器")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("docker rm $(docker ps -aq)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);