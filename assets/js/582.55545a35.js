(window.webpackJsonp=window.webpackJsonp||[]).push([[582],{2634:function(s,a,t){"use strict";t.r(a);var n=t(9),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"一-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-概念"}},[s._v("#")]),s._v(" 一：概念")]),s._v(" "),t("h3",{attrs:{id:"一-什么是mvcc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是mvcc"}},[s._v("#")]),s._v(" (一)：什么是MVCC")]),s._v(" "),t("ul",[t("li",[s._v("MVCC，全称Multi-Version Concurrency Control，即"),t("strong",[s._v("多版本并发控制")]),s._v("，用于实现对MySQL数据库的并发访问。MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，"),t("code",[s._v("做到即使有读写冲突时，也能做到不加锁，能够非阻塞并发读")])])]),s._v(" "),t("h3",{attrs:{id:"二-什么是当前读和快照读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-什么是当前读和快照读"}},[s._v("#")]),s._v(" (二)：什么是当前读和快照读")]),s._v(" "),t("ul",[t("li",[s._v("当前读")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("select lock "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" share "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("mode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("共享锁"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，select "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" update，update，insert，"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("delete")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("排他锁"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 属于当前读，读取的记录是最新版本，会对读取的记录进行加锁，保证没有其他事务修改当前记录\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("快照读")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("不加锁的select操作就是快照读，即不加锁的非阻塞读\n快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。之所以会出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v("实现的，可以认为"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v("是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销。既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本\n\n因此"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v("是为了实现快照读的一种机制，通过非加锁的方式实现。当前读实际上是一种加锁的操作，是悲观锁的实现\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"三-mysql的四种隔离级别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-mysql的四种隔离级别"}},[s._v("#")]),s._v(" (三)：MySQL的四种隔离级别")]),s._v(" "),t("ul",[t("li",[s._v("Read Uncommitted（读取未提交内容）")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("在该隔离级别，所有事务都可以看到其他未提交事务的执行结果，本隔离级别很少用于实际应用，读取未提交的数据会出现【脏读】的情况：一个事务读取了另外一个事务未提交的数据，但是另外一个事务回滚了，因此造成了脏读\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("Read Committed（读取已提交内容）")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。读已提交隔离级别会出现【不可重复读】的情况：一个事务多次读取同一个数据，在这个事务还没有结束时，另外二个事务也访问了该同一数据，并且对数据进行了修改，那么第一个事务两次读到的的数据可能是不一样的，称为是不可重复读\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("Repeatable Read（可重读）")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。可重读隔离级别会出现【幻读】的情况：当某一事务取某个范围的数据时，另一个事务又在该范围内插入了新行，当第一个事务再次读取该范围的数据行时，会发现有新的数据行。")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v("解决了这个问题"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("Serializable（可串行化）")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁，可能导致大量的超时现象和锁竞争\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"四-mvcc能够解决什么问题-好处是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-mvcc能够解决什么问题-好处是什么"}},[s._v("#")]),s._v(" (四)：MVCC能够解决什么问题，好处是什么")]),s._v(" "),t("ul",[t("li",[s._v("MVCC最大的优势："),t("strong",[s._v("读不加锁，读写不冲突")]),s._v("。读写不冲突是非常重要的，极大的增加了系统的并发性能，"),t("strong",[s._v("MVCC机制也是乐观锁的一种体现")]),s._v("。MVCC多版本控制实现思想如下")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("InnoDB的"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v("是通过在每行记录后面保存两个隐藏的列来实现的，分别保存这条记录的创建时间和行的删除时间。这里的时间并不是实际的时间值，而是系统版本号（事务的"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ID")]),s._v("）。每开始一个新的事务系统版本号都会自动递增，事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v(" 只能在Read committed和Repeatable Read两个隔离级别下工作，因为Read uncommitted总是读取最新的数据行，而不是符合当前事务版本的数据行，而serializable则会对所有读取的行都加锁\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("MVCC解决的问题如下")])]),s._v(" "),t("div",{staticClass:"language-javascript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[s._v("多事务的并发进行一般会造成以下几个问题"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("：脏读："),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("事务读取到了"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("事务未提交的内容"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("而"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("事务后面进行了回滚\n\n\t"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("：不可重复读"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 当设置"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("事务只能读取"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("事务已经提交的部分"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("会造成在"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("事务内的两次查询"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("结果竟然不一样"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("因为在此期间"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("事务进行了提交操作\n\n\t"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("：幻读"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("事务读取了一个范围的内容"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("而同时"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("事务在此期间插入了一条数据，造成"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"幻觉"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v("在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理读"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("写冲突，做到即使有读写冲突时，也能做到不加锁的实现非阻塞并发读。在并发读写数据库时，可以做到在读操作时不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能\n\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MVCC")]),s._v("可以解决脏读，幻读，不可重复读等事务隔离问题，但不能解决更新丢失问题\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);