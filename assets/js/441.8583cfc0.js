(window.webpackJsonp=window.webpackJsonp||[]).push([[441],{2359:function(s,n,a){"use strict";a.r(n);var e=a(9),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[s._v("#")]),s._v(" 正则表达式")]),s._v(" "),a("h3",{attrs:{id:"一-什么是正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是正则表达式"}},[s._v("#")]),s._v(" (一) 什么是正则表达式")]),s._v(" "),a("ul",[a("li",[s._v("定义")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("正则表达式：Regular Expression, 简写为regex\n\n在Linux操作系统上，正则表达式可以应用的命令有：grep sed awk\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"二-正则表达式元字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-正则表达式元字符"}},[s._v("#")]),s._v(" (二) 正则表达式元字符")]),s._v(" "),a("ul",[a("li",[s._v("最常用的元字符")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 最常用的元字符\n# 正则表达式的元字符指的是：在正则表达式中有特殊意义的字符\n\n. : 匹配任意一个字符，除了换行符号\n[abcde]: 匹配在abcde中的任意一个字符\n[^abcde]: 匹配除了abcde字符以外的任意字符\n[a-z]: 匹配a到z的任意一个字符\n[^a-z]: 匹配除了a到z的任意一个字符\n\\b: 匹配单词的边界, \\bfoo， 匹配foo，不会匹配fooab\n\\B: 不匹配单词的边界\n\\d: 匹配一位数字，[0-9]\n\\D: 匹配一位非数字, [^0-9]\n\\s: 匹配一位空白字符\n\\S: 匹配一位非空白字符\n\\w: 匹配一个单词\n\\W: 匹配单词之外的字符\n^: 以...开头\n$: 以...结尾\n\n\n# 正则表达式的次数匹配\n*: 匹配0个或多个\n+: 匹配1个或多个\n?：匹配0个或1个\n{n}: 匹配n个\n{n,}: 匹配至少n个\n{m,n}: 匹配m到n个\n\n# 非贪婪匹配,默认是贪婪匹配模式，如果要使用非贪婪模式，在重复次数的符号后面加上?\n*？: 尽可能少匹配，可能匹配0次\n+？： 尽可能少匹配，最少匹配1次\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h3",{attrs:{id:"三-单次匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-单次匹配"}},[s._v("#")]),s._v(" (三) 单次匹配")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import re\n\n# match， search， fullmatch是从头开始匹配，match 与 search最大的区别在于：match必须是从开头开始匹配，search可以是从任意位置开始匹配\n# 可以先编译，在匹配\n# re.compile(pattern, flag)：输入一个正则表达式，返回一个编译的对象, 编译后的正则对象比临时编译的匹配速度快\n# regex_obj.match(string, flags):已经编译的正则对象的match方法，返回一个匹配的match对象\nobj = re.compile('^\\w+')\nresult1 = obj.match('hello  hello')\nprint(result1)\n\n# 也可以编译和匹配同时进行\nresult2 = re.match('.*', 'hello')\n\n\n\n# re.search( )：搜索匹配一次，返回一个match对象，可以不是从头开始匹配\nobj = re.compile('^h?')\nresult3 = obj.search('hhhhllo hello')\nprint(result3)\n\n# re.fullmatch( )：匹配整个的字符串或文本，但是同样是从头开始匹配, 必须要完全匹配\nobj = re.compile('.*')\nresult3 = obj.fullmatch('hhhhllo hello')\nprint(result3)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h3",{attrs:{id:"四-全部匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-全部匹配"}},[s._v("#")]),s._v(" (四) 全部匹配")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import re\n# re.findall(patter, string, flag)：匹配多次，返回一个列表，不是从开头查找\nobj = re.compile('h\\w+o')\nresult1 = obj.findall('123 你好 hello hello hello')\nprint(result1)  # 返回列表\n\nobj = re.compile('\\w+')\nresult2 = obj.finditer('hello hello hello')\nprint(result2) # 返回迭代器\n\n# sub方法是全文替换\nimport re\ns = '''python|hello|xkd|valor|opt|python|python'''\nobj = re.compile(\"p\\w+n\")\nret = obj.sub(\"robby\",s)\nprint(ret)\n\nimport re\ns = '''python|hello|xkd|valor|opt|python|python'''\nobj = re.compile(\"p\\w+n\")\n# sub方法是全文替换\nresult1 = obj.sub(\"robby\",s)\nprint(result1)\n# 表示只替换一次\nresult2 = obj.sub(\"robby\",s,1)\nprint(result2)\n\n# regex.split(s)：表示使用regex分割字符串s，返回一个列表\nimport re\ns = '''python|hello|xkd|valor|opt|python|python'''\nobj = re.compile(\"x\\w+d\")\nresult3 = obj.split(s)\nprint(result3)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("h3",{attrs:{id:"五-分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-分组"}},[s._v("#")]),s._v(" (五) 分组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 1： 普通分组\nimport re\ns = """xkd|oc|c++|python|linux|java|swift|ruby"""\n\nobj = re.compile(\'(x\\w+d).*(p\\w+n)\')\nresult = obj.search(s)\nprint(result)\nprint(result.groups())  # 返回元组\nprint(result.group(1))  # 返回第一个分组匹配到内容\nprint(result.group(2))  # 返回第二个分组匹配到内容\nprint(result.group(0))  # 返回正则表达式匹配到的所有的内容\n\n# 2：命名分组\nimport re\ns = """xkd|oc|c++|python|linux|java|swift|ruby"""\n\nobj = re.compile(\'(?P<org>x\\w+d).*(?P<course>p\\w+n)\')\nresult = obj.search(s)\nprint(result)\nprint(result.groups())# 返回元组\nprint(result.groupdict())   # 返回字典\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);