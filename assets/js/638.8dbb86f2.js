(window.webpackJsonp=window.webpackJsonp||[]).push([[638],{2731:function(s,a,n){"use strict";n.r(a);var e=n(9),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"}),n("ul",[n("li",[n("p",[s._v("涵盖知识点：")]),s._v(" "),n("ul",[n("li",[s._v("1：线性数据结构：动态数组、栈、队列、循环队列、链表")]),s._v(" "),n("li",[s._v("2：树结构：二叉堆、二分搜索树、AVL树、2-3树、红黑树、线段树、(SQRT分解)")]),s._v(" "),n("li",[s._v("3：比较排序算法：冒泡排序、插入排序、选择排序、归并排序、快速排序、希尔排序")]),s._v(" "),n("li",[s._v("4：非比较排序算法：计数排序")]),s._v(" "),n("li",[s._v("4：搜索算法：二分搜索算法")]),s._v(" "),n("li",[s._v("5：哈希表：Set、Map实现")]),s._v(" "),n("li",[s._v("6：字符串问题：暴力枚举使用哈希优化、哈希表使用滚动哈希优化")]),s._v(" "),n("li",[s._v("7：B-Tree和B+Tree, 索引的检索过程")])])]),s._v(" "),n("li",[n("p",[s._v("未涉及知识点：")]),s._v(" "),n("ul",[n("li",[s._v("1：非比较排序：桶排序、基排序")]),s._v(" "),n("li",[s._v("2：并查集")])])])])]),n("h2",{attrs:{id:"一-算法与数据结构基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-算法与数据结构基础"}},[s._v("#")]),s._v(" 一：算法与数据结构基础")]),s._v(" "),n("h3",{attrs:{id:"一-线性查找算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-线性查找算法"}},[s._v("#")]),s._v(" (一)：线性查找算法")]),s._v(" "),n("ul",[n("li",[s._v("1：简要介绍了什么是算法、算法的时间复杂度")])]),s._v(" "),n("h3",{attrs:{id:"二-排序基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-排序基础"}},[s._v("#")]),s._v(" (二)：排序基础")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1：选择排序思想："),n("code",[s._v("外层循环只管向后遍历，内层循环向后遍历的过程中，找到最小元素的索引，然后将最小元素与外层循环所指向的索引交换位置")])])]),s._v(" "),n("li",[n("p",[s._v("2：插入排序思想： "),n("code",[s._v("外层循环只管往后遍历，内层循环向前遍历的时候，只要比前面的数小就往前插")])])])]),s._v(" "),n("h3",{attrs:{id:"三-动态数组、栈、队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-动态数组、栈、队列"}},[s._v("#")]),s._v(" (三)：动态数组、栈、队列")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1：动态数组本质上是一种静态的线性结构，底层是数组。向动态数组添加元素的时候，需要判断是否需要扩容，如果需要扩容会重新创建一个底层数组，将之前数组元素拷贝到新数组中。动态数组删除元素的时候，需要考虑缩容。数组删除中间元素会使得后面的元素都向前移动")])]),s._v(" "),n("li",[n("p",[s._v("2：动态数组可以作为"),n("code",[s._v("栈的底层数据结构")])])]),s._v(" "),n("li",[n("p",[s._v("3：动态数组可以作为"),n("code",[s._v("队列的底层数据结构")])])]),s._v(" "),n("li",[n("p",[s._v("4：之所以需要循环队列，是因为队列的底层是动态数组，删除头部元素是O(n)的时间复杂度，因为在动态数组头部删除一个元素，那么其他元素都将会向前移动，因此时间复杂度是O(n)，那么循环队列正好解决了这个问题。在循环队列中，删除头部元素，只需要front指针向后移动即可，时间复杂度为O(1)")])]),s._v(" "),n("li",[n("p",[s._v("5："),n("code",[s._v("基于数组实现的数据结构的优势在于能够快速检索，因为底层是一块连续的内存空间，但是如果大量插入或者删除元素，会使得数组元素频繁的被移动，降低性能")])])])]),s._v(" "),n("h3",{attrs:{id:"四-链表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-链表"}},[s._v("#")]),s._v(" (四)：链表")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1：链表是一种动态的线性数据结构，有三种类型的实现：单向链表、双向链表、循环链表。")])]),s._v(" "),n("li",[n("p",[s._v("2：单向链表对头部元素的CRUD操作，时间复杂度为O(1)，因此特别适合作为栈的底层数据结构。可以实现带索引的单向链表，也可以实现不带索引的单向链表")])]),s._v(" "),n("li",[n("p",[s._v("3：单向链表实现队列的时候，设置可以头尾指针，让头部元素和尾部元素的CRUD操作时间复杂度为O(1)")])])]),s._v(" "),n("h2",{attrs:{id:"二-高级排序算法-和-二分搜索树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-高级排序算法-和-二分搜索树"}},[s._v("#")]),s._v(" 二：高级排序算法 和 二分搜索树")]),s._v(" "),n("h3",{attrs:{id:"一-归并排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-归并排序算法"}},[s._v("#")]),s._v(" (一)：归并排序算法")]),s._v(" "),n("ul",[n("li",[s._v("1：归并排序算法思想")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("基于递归的思想，将一个数组从中间分为两份，不断递归，直到子数组中只有一个元素或者没有元素的时候，停止迭代。然后将两边的数组进行合并，合并的时候会用到临时拷贝的数组\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("2：归并排序的核心是"),n("code",[s._v("Merge操作，合并子数组")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：如果左边子数组第一个元素比mid大，说明左边子数组为空，那么右边子数组的第一个元素就是最小元素(将最小元素覆盖原数组对应的元素即可)\n\n2：如果右边子数组第一个元素大于r，说明右边子数组为空，那么左边子数组的第一个元素就是最小元素\n\n3：如果左边子数组的第一个元素小于右边第一个元素，那么左边子数组的第一个元素就是最小元素\n\n4：如果右边子数组的第一个元素小于左边第一个元素，那么右边子数组的第一个元素就是最小元素\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"二-快速排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-快速排序算法"}},[s._v("#")]),s._v(" (二)：快速排序算法")]),s._v(" "),n("ul",[n("li",[s._v("1：快速排序算法思想")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("快速排序主要是先对原始数组进行partition操作，找到一个合适的索引V，让索引左边的元素小于V，索引右边的元素大于V，然后迭代再对左边的元素和右边的元素进行partition操作，直到左边或右边元素为1个或者为空，停止迭代。这样原始数组就排好序了\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("2：快速排序算法的核心是"),n("code",[s._v("partition操作")]),s._v("，找到合适的索引V")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("假设数组的第一个元素为V，l是数组第一个元素，r是数组最后一个元素，j为【V】左边的最后一个元素，i为【V】右边的第一个元素。此时arr[l+1…j] 是空数组，arr[j+1…i-1]也是空数组，i遍历数组的时候，如果后面一个元素比V大，那么直接i++。如果后面一个元素比V小，那么让j+1, 然后将i指向的元素与j+1指向的元素交换位置，再i++，直到i>r，停止遍历\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"三-二分查找算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-二分查找算法"}},[s._v("#")]),s._v(" (三)：二分查找算法")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1：使用二分查找算法的前提是"),n("code",[s._v("数组元素必须有序")]),s._v("，二分查找算法的时间复杂度是O(logn)，因为CRUD操作都是递归进行的，"),n("code",[s._v("递归的时间复杂度取决于树的深度")])])]),s._v(" "),n("li",[n("p",[s._v("2：二分查找算法思想：在有序数组中，找到中间的元素，判断【中间元素】与需要查找的元素的大小，如果【中间元素】> 【需要查找的元素】，就在左边的数组区间查找。如果【中间元素】< 【需要查找的元素】，就在右边的数组区间查找")])]),s._v(" "),n("li",[n("p",[s._v("3："),n("code",[s._v("使用二分查找算法，在一个有序数组中，找到大于某个元素的最小值")]),s._v("：这个问题使用二分查找算法，不断的从数组中获取【中间元素】，让【中间元素】与target比较，每次循环都改变数组的区间，直到数组的左边界对于右边界停止循环，此时如果还是没有找到对应的target，就将左边界的索引返回，"),n("code",[s._v("因为左边界对应的值就是大于target的最小值")])])]),s._v(" "),n("li",[n("p",[s._v("4：在golang中，sort.Search函数就是一个二分查找算法，需要传递一个闭包函数。二分搜索算法可以应用在"),n("code",[s._v("一致性hash算法中，寻找hash切片中，大于等于target的最小hash值，然后基于hash值从hash环上(map结构)获取对应点value值，也就是服务器的IP值，从而实现hash一致性算法")])])])]),s._v(" "),n("h3",{attrs:{id:"四-二分搜索树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-二分搜索树"}},[s._v("#")]),s._v(" (四)：二分搜索树")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1：二分搜索树的性质："),n("code",[s._v("二分搜索树每个节点的值，大于其左子树所有节点的值，小于其右子树所有节点的值")])])]),s._v(" "),n("li",[n("p",[s._v("2："),n("code",[s._v("前序遍历")]),s._v("：根节点 -> 左节点 -> 右节点；"),n("code",[s._v("中序遍历")]),s._v("：左节点 -> 根节点 -> 右节点；"),n("code",[s._v("后序遍历")]),s._v("：左节点 -> 右节点 -> 根节点")])]),s._v(" "),n("li",[n("p",[s._v("3：二分搜索树的最小值：一直走到最左边走不动了就是最小值；二分搜索树的最小值：一直走到最右边走不动了就是最大值")])]),s._v(" "),n("li",[n("p",[s._v("4：二分搜索树中删除节点分为三种情况")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：删除最小值节点：一直向左走，当左节点为nil的时候，当前节点就是最小值节点，那么需要保存右边节点，让右边节点返回，覆盖当前的根节点即可\n\n2：删除最大值节点：一直向右走，当右节点为nil的时候，当前节点就是最大值节点，那么需要保存左边节点，让左边节点返回，覆盖当前的根节点即可\n\n3：待删除的节点既有左节点，又有右节点：使用Hibbard Deletion方法删除，首先找到以当前节点为根节点的后继节点(右子树的最小值)，然后删除这个后继节点，并且将这个后继返回，覆盖当前的根节点即可\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"五-二分搜索树实现set和map和二分搜索树时间复杂度"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-二分搜索树实现set和map和二分搜索树时间复杂度"}},[s._v("#")]),s._v(" (五)：二分搜索树实现Set和Map和二分搜索树时间复杂度")]),s._v(" "),n("ul",[n("li",[s._v("链表实现的Set和二分搜索树实现的Set时间复杂度对比")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：链表实现的Set时间复杂度为：O(n)\n\n2：二分搜索树实现的Set时间复杂度为：O(logn)\n\n3：如果二分搜索树退化为链表，那么时间复杂度为：O(n)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("链表实现的Map和二分搜索树实现的Map时间复杂度对比")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：链表实现的Map时间复杂度为：O(n)\n\n2：二分搜索树实现的Map时间复杂度为：O(logn)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("Java中的TreeMap底层数据结构是"),n("code",[s._v("红黑树")]),s._v("，CRUD的时间复杂度是"),n("code",[s._v("O(logn)")])])]),s._v(" "),n("h2",{attrs:{id:"三-更多的树型结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-更多的树型结构"}},[s._v("#")]),s._v(" 三：更多的树型结构")]),s._v(" "),n("h3",{attrs:{id:"一-堆-treap-树堆-和优先队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-堆-treap-树堆-和优先队列"}},[s._v("#")]),s._v(" (一)：堆(Treap 树堆)和优先队列")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1："),n("code",[s._v("满二叉树的性质")]),s._v("：除了叶子节点，其他所有的节点都具有左右两个子节点。")])]),s._v(" "),n("li",[n("p",[s._v("2："),n("code",[s._v("完全二叉树的性质")]),s._v("：当把元素按照一层一层顺序排列成树型结构，这样的二叉树就是完全二叉树。完全二叉树的最后一层叶子节点可能不会满，但是都会集中在最左边，倒数第二层可能会有叶子节点，但是都会集中在最右边。"),n("code",[s._v("完全二叉树具有平衡性，但是不一定是平衡二叉树，因为平衡二叉树强调的是有序")])])]),s._v(" "),n("li",[n("p",[s._v("3："),n("code",[s._v("平衡二叉树的性质")]),s._v("：树的左右子树的高度差不超过1的数，空树也是平衡二叉树的一种，"),n("code",[s._v("平衡二叉树不一定是完全二叉树，因为有可能右子树深度比左子树深度多1")])])]),s._v(" "),n("li",[n("p",[s._v("4："),n("code",[s._v("二叉堆的性质")]),s._v("：二叉堆的元素存储在动态数组中，只是添加元素的时候，不是按照动态数组的方式添加元素了，而是按照二叉堆的性质添加元素，也就是说，动态数组添加元素后按照二叉堆的性质重新排列。也就是说添加元素不再添加到动态数组的尾部，而是添加到一个指定的位置，这个指定的位置由最大二叉堆的性质决定。二叉堆删除元素只能删除堆顶元素，与添加元素同理，删除堆顶元素后也需要维护二叉堆的性质")])]),s._v(" "),n("li",[n("p",[s._v("5："),n("code",[s._v("最大二叉堆的性质")]),s._v("：二叉堆是一颗完全二叉树，也是平衡二叉树，堆中某个节点的值一定大于等于其子节点的值")])]),s._v(" "),n("li",[n("p",[s._v("6："),n("code",[s._v("最小二叉堆的特征")]),s._v("：二叉堆是一颗完全二叉树，堆中某个节点的值一定小于等于其子节点的值")])]),s._v(" "),n("li",[n("p",[s._v("7："),n("code",[s._v("优先队列")]),s._v("：优先队列的底层是基于二叉堆实现的，例如入队是调用二叉堆的Add方法，出队是调用二叉堆的ExtractMax方法，获取队首元素是调用二叉堆的FindMax方法")])]),s._v(" "),n("li",[n("p",[s._v("8："),n("code",[s._v("优先队列可以方便的解决Top K问题")]),s._v("：例如给定已知数组：{4, 5, 1, 6, 2, 7, 3, 8}，找出其中最小的4个数")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("解题思路：\n    先从数组中选择前4个元素，添加到优先队列中，然后其他的元素与优先队列中队首元素(最大元素)进行比较，如果比队首元素小，那么调用优先队列的出队方法，在将新的元素添加到优先队列。最后将优先队列元素输出到数组中返回\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("9：Golang的"),n("code",[s._v("container/heap包")]),s._v("实现了二叉堆")])]),s._v(" "),n("li",[n("p",[s._v("10："),n("code",[s._v("快速排序和优先队列 在处理Top K问题或Select K问题的比较")]),s._v("："),n("code",[s._v("如果是已知全量数据的情况下，快排比优先队列更具有优势，但是如果是流式数据排序，那么使用优先队列会更好一些")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("从算法时间复杂度对比\n\n\t快排：时间复杂度 O(nlogn)，空间复杂度 O(1)\n\t优先队列：将数组形成二叉堆时间复杂度 O(n), 空间复杂度为O(n)，替换二叉堆的堆顶元素时间复杂度是O(logn)，因此在解决Top K问题上，优先队列的时间复杂度为O(nlogn)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"二-冒泡排序、希尔排序、排序算法总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-冒泡排序、希尔排序、排序算法总结"}},[s._v("#")]),s._v(" (二)：冒泡排序、希尔排序、排序算法总结")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1："),n("code",[s._v("冒泡排序算法思想")]),s._v("：外层循环只管向后遍历，内层循环向后遍历过程中，如果当前元素比后一个元素大，那么交换位置，且内层循环每次遍历都减少一个元素")])]),s._v(" "),n("li",[n("p",[s._v("2："),n("code",[s._v("希尔排序算法思想")]),s._v("：希尔排序是插入排序的改进，建立在插入排序的基础上实现的，希尔排序采用的分割策略，将原有数组分割多个小组，对不同的小组再进行插入排序")])]),s._v(" "),n("li",[n("p",[s._v("3：希尔排序的核心是分组思想：对每次分组进行插入排序")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：对元素间隔为n/2的所有子数组进行插入排序\n\n2：对元素间隔为n/4的所有子数组进行插入排序\n\n3：对元素间隔为n/8的所有子数组进行插入排序\n\n3：对元素间隔为n/16的所有子数组进行插入排序\n\n......\n\nn：对元素间隔为1的所有子数组进行插入排序，最终让数组全部有序\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("4："),n("code",[s._v("希尔排序的时间复杂度")]),s._v("：O(nlogn) ~ O(n²)，最好的情况是O(nlogn)，最差的情况是O(n²)")])]),s._v(" "),n("li",[n("p",[s._v("5：各比较排序算法的时间复杂度")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：冒泡排序： O(n²)\n\n2：选择排序： O(n²)\n\n3：插入排序： O(n²)\n\n4：希尔排序：不同的步长超参数 O(nlogn) ~ O(n²)，最好的情况是O(nlogn)，最差的情况是O(n²)\n\n5：归并排序：自顶向下、自底向上 O(nlogn)\n\n6：快速排序：单路、双路、三路  O(nlogn)\n\n7：堆排序：  O(nlogn)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("ul",[n("li",[s._v("6：各比较排序算法的稳定性")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：冒泡排序：稳定\n\n2：选择排序：不稳定\n\n3：插入排序：稳定\n\n4：希尔排序：不稳定\n\n5：归并排序：稳定 (一般语言的标准库中，使用归并排序算法思路)\n\n6：快速排序：不稳定\n\n7：堆排序：不稳定\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("h3",{attrs:{id:"三-线段树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-线段树"}},[s._v("#")]),s._v(" (三)：线段树")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1："),n("code",[s._v("什么是线段树")]),s._v("：线段树就是一段区间，对于给定的一段区间，更新区间的一个或多个元素，或者查询一个区间中，最大值，最小值，计算区间数字和")])]),s._v(" "),n("li",[n("p",[s._v("2：线段树不是完全二叉树，线段树是平衡二叉树")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("以求和业务为例")]),s._v("，根节点是子节点的和，那么根节点的值有两个子节点组成，那么这是一个递归的结构，想要获取到根节点的值就需要获取到子节点的值")])]),s._v(" "),n("li",[n("p",[s._v("3："),n("code",[s._v("在线段树实现中，声明了线段树的merge属性是一个函数类型")]),s._v("，目的是让用户决定传递什么样的逻辑函数，从而实现什么样的业务逻辑，示例中是求和业务逻辑")])]),s._v(" "),n("li",[n("p",[s._v("4："),n("code",[s._v("线段树的更新和查询操作的时间复杂度")]),s._v("：O(logn)")])])]),s._v(" "),n("h3",{attrs:{id:"四-trie字典树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-trie字典树"}},[s._v("#")]),s._v(" (四)：Trie字典树")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1：Trie树是一个前缀树，可以实现快速插入和查询")])]),s._v(" "),n("li",[n("p",[s._v("2：Trie树最大的缺点是占用空间大，因此很多项目中使用Compressed Trie进行了优化")])])]),s._v(" "),n("h3",{attrs:{id:"五-avl树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-avl树"}},[s._v("#")]),s._v(" (五)：AVL树")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1："),n("code",[s._v("节点高度计算")]),s._v("：叶子节点的高度是1，非叶子节点的高度是左右节点高度的最大值再加1")])]),s._v(" "),n("li",[n("p",[s._v("2："),n("code",[s._v("节点平衡因子计算")]),s._v("："),n("code",[s._v("左节点高度-右节点高度的绝对值")]),s._v("，那么有平衡二叉树的定义，判断一颗树是否是平衡二叉树，主要判断各个左子树和右子树的高度差不能超过1，也就是各个节点的平衡因子最大是1")])]),s._v(" "),n("li",[n("p",[s._v("3："),n("code",[s._v("二分搜索树")]),s._v("不一定是平衡二叉树，"),n("code",[s._v("AVL树")]),s._v("一定是平衡二叉树，也是二分搜索树")])]),s._v(" "),n("li",[n("p",[s._v("4："),n("code",[s._v("AVL树是在二分搜索树的基础上，维护了树的平衡性")]),s._v("(添加节点或者删除节点，始终让各个节点的平衡因子最大是1)。维护树的平衡性核心在于"),n("code",[s._v("使用LL、RR、LR、RL四种旋转方式对树的结构进行调整")])])]),s._v(" "),n("li",[n("p",[s._v("5：AVL树的CRUD操作时间"),n("code",[s._v("复杂度为log(n)")])])])]),s._v(" "),n("h3",{attrs:{id:"六-基于2-3树的红黑树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-基于2-3树的红黑树"}},[s._v("#")]),s._v(" (六)：基于2-3树的红黑树")]),s._v(" "),n("ul",[n("li",[s._v("1：2-3树的性质：2-3树是一颗绝对平衡树(类似满二叉树)，"),n("code",[s._v("任意节点到达叶子节点的深度相等")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：满足二分搜索树的基本性质\n\n2：节点可以存放一个元素或者两个元素\n\n3：每个节点或者有2个孩子，或者有3个孩子\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("2："),n("code",[s._v("一颗2-3树可以转变为红黑树")]),s._v("："),n("code",[s._v("只需要将融合节点设置为红色")]),s._v("，那么就是一颗红黑树。因为2-3树是绝对平衡树，使得在红黑树中"),n("code",[s._v("从任意一个节点到叶子节点，经过的黑色节点是一样的")]),s._v("，红黑树是保持“黑平衡”的二叉树，因此n个节点的红黑树最大深度是2logn，因为在2-3树的基础上，多了红色节点。红黑树的CRUD操作时间"),n("code",[s._v("复杂度为log(n)")])])]),s._v(" "),n("li",[n("p",[s._v("3："),n("code",[s._v("红黑树添加元素和删除元素的时候，维护黑节点平衡的核心是")]),s._v("：使用【左旋转】、【右旋转】、【颜色翻转】三种情况的组合")])]),s._v(" "),n("li",[n("p",[s._v("4：对比二分搜索树、AVL树、红黑树的性能和使用场景")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("二分搜索树\n\t优点：对于完全随机的数据，普通的二分搜索树很好用\n\t缺点：极端情况下，二分搜索树会退化成为链表\n\nAVL树\n\t优点：对于查询较多的情况下，AVL树性能较高\n\t缺点：AVL是绝对平衡树，添加和删除元素比红黑树多\n\n红黑树\n\t优点：红黑树仅仅是黑平衡树，因此插入和删除节点，修复平衡能力比AVL树强\n\t缺点：红黑树牺牲了二叉树的平衡性(树的深度是2logn)，不满足平衡二叉树的性质\n\n综合分析：\n\t红黑树的查询性能略微逊色于AVL树，因为其比AVL树会稍微不平衡最多多一层，也就是说红黑树的查询性能只比相同内容的AVL树最多多一次比较，但是，红黑树在插入和删除上优于AVL树，AVL树每次插入删除会进行大量的平衡度计算，而红黑树为了维持红黑性质所做的红黑变换和旋转的开销，相较于AVL树为了维持平衡的开销要小得多\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"七-哈希表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-哈希表"}},[s._v("#")]),s._v(" (七)：哈希表")]),s._v(" "),n("ul",[n("li",[s._v("1："),n("code",[s._v("引出哈希表")]),s._v("：给定一个字符串，找到第一个不重复的字符，并且返回它的索引，如果不存在，返回-1")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("这里的字符与数组索引的一一映射就是一个哈希表\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("2："),n("code",[s._v("哈希表需要解决两个问题")]),s._v("：哈希函数 和 哈希冲突")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：需要找到一个函数，将“键”转换为“索引”，这个找到的函数就是哈希函数\n\n2：在哈希函数对“键”进行转换的过程中，可能不同的“键”会转换为同一个“索引”，这种情况叫哈希冲突，需要避免哈希函数的哈希冲突\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("3：哈希函数设计原则")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：一致性：如果a==b, 那么 hash(a)==hash(b)\n\n2：高效性：计算高效简便\n\n3：均匀性：哈希值均匀分布\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("4：链地址法：解决哈希冲突")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t当两个不同的元素，基于哈希函数计算后，得到的值相等，这种情况称之为：哈希冲突。哈希冲突是一个概率性事件，可以使用链地址法解决哈希冲突，也就是使用链表或者红黑树解决哈希冲突。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("5：对比Java和Golang中Map类型的实现对比")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：在Java中，HashMap类型底层是【数组+红黑树】，基于红黑树解决冲突问题\n\n2：在Golang中，Map类型是一个链表数组，因此Golang中Map类型是【数组+链表】，基于链表解决冲突问题\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("6："),n("code",[s._v("静态哈希表的时间复杂度为O(N/M)，其中N是元素个数，M是数组空间")]),s._v("。当M的值趋近于N，那么时间复杂度为O(1)。在静态哈希表的基础上，实现数组扩容，类似于动态数组，可以实现动态哈希表，动态哈希表的时间复杂度为O(1)")])]),s._v(" "),n("li",[n("p",[s._v("7："),n("code",[s._v("Set和Map可以使用二分搜索树(红黑树)实现，也可以使用哈希表实现")]),s._v("：使用二分搜索树实现的Set和Map时间复杂度为O(logn)，使用哈希表实现的Set和Map时间复杂度为O(1)。时间复杂度的差异本质在于哈希表是无序的，二分搜索树是有序的")])])]),s._v(" "),n("h3",{attrs:{id:"七-sqrt分解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-sqrt分解"}},[s._v("#")]),s._v(" (七)：SQRT分解")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1："),n("code",[s._v("SQRT分解思想的核心")]),s._v("： SQRT分解使用分块、分组思想解决区间问题。与优先对队列一样，适合处理动态数据，算法时间复杂度为O(sqrt(n))")])]),s._v(" "),n("li",[n("p",[s._v("2："),n("code",[s._v("SQRT分解的核心是分组")]),s._v("：把一个含有N个元素的数组分成n½份，例如18个元素会被分为5份。修改数据的时间复杂度是O(1)，因为只需要修改区间段数据和，查询效率依然为O(sqrt(n))")])])]),s._v(" "),n("h2",{attrs:{id:"四-非比较排序与模式匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-非比较排序与模式匹配"}},[s._v("#")]),s._v(" 四：非比较排序与模式匹配")]),s._v(" "),n("h3",{attrs:{id:"一-计数排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-计数排序"}},[s._v("#")]),s._v(" (一)：计数排序")]),s._v(" "),n("ul",[n("li",[s._v("1："),n("code",[s._v("计数排序的思想")]),s._v("：通过统计相同元素的个数，确定不同类型的元素边界，使得相同元素在一起，从而实现排序。类似问题有："),n("code",[s._v("给定一个包含红色、白色、蓝色，一共n个元素的数组，对这个数组进行排序，我们使用0、1、2分别表示红色、白色、蓝色。计数排序使用了计数统计的方法对元素进行规整，最终让数组有序")])])]),s._v(" "),n("h3",{attrs:{id:"二-模式匹配算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-模式匹配算法"}},[s._v("#")]),s._v(" (二)：模式匹配算法")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("1："),n("code",[s._v("暴力搜索解决字符串匹配问题")]),s._v("：("),n("code",[s._v("【问题】：给定一个数组和一个目标子串，从数组中找出第一个与目标子串匹配的子串，并且返回其索引")]),s._v(")字符串一个一个进行匹配，是一种暴力模式匹配算法。暴力搜索最坏的情况下，时间复杂度是O(mn)，最好的情况下时间复杂度是O(n)。因此暴力搜索的方式解决字符串匹配可能会出现算法性能退化")])]),s._v(" "),n("li",[n("p",[s._v("2："),n("code",[s._v("解决字符串匹配的问题")]),s._v("：哈希解决字符串匹配问题，主要是提升算法的性能，将字符串的逐一比对，转换为哈希比对")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("【段式回文问题】：例如 “volvo”可以分为”vo”，”l”， “vo”，无论是正着读还是反着读，都是一样，volvo可以分为3段。那么给定的字符串，返回其最大的段\n\n1：暴力枚举思想：设置i和j，从数组的左边界和右边界出发，不断对数组从两端向中间迭代，任何一段相等都说明有2段回文，判断相等的条件为：s[left:i+1] == s[j:right+1]\n\n\n2：哈希思想：哈希思想与暴力枚举思想类似，主要是在比较字符串是否相等使用了哈希比较，那么就需要计算哈希值，如果哈希相等在比较字符串是否相等\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("3："),n("code",[s._v("解决最长快乐前缀问题")]),s._v("：只要是使用暴力枚举解决的问题，都可以尝试使用哈希比较")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("【问题】：给定一个字符串，找出其中的子串，即是前缀，也是后缀。例如”level”，l即是前缀也是后缀。\n\n1：暴力枚举思想：从左右最长的子串开始遍历，最长子串的长度为字符串长度减一，然后让左右子串不断缩小，直到相等，那么此时找到的子串就是快乐前缀\n\n2：哈希思想：不断在左右子串缩小过程中，计算哈希子串的哈希，先比较哈希，再判断字符串相等\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("4："),n("code",[s._v("解决重复DNA序列问题")]),s._v("：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("【问题】：给定一个字符串，找出子串中长度为10，且重复次数大于1次的子串。例如：在字符串”AAAAACCCCCAAAAACCCCCAAAAAGGGGGTTTTT”中，子串”AAAAACCCCC”，”CCCCCAAAAA”长度为10，且重复次数超过1次\n\n1：暴力枚举思想：这个问题使用哈希表解决最方便，直接遍历字符串，10个字符为一个子串添加到哈希表中，只要哈希表的value>2的子串就满足条件\n\n2：滚动哈希思想：子串滚动的时候，先加上最后一个字符的哈希值，将子串添加到map中，再减去第一个字符的哈希值，保证每次循环子串的哈希都是9个字符的hash值。这里由于使用的是10进制数表示hash值，且只有4个不同字符的子串，计算子串哈希的过程中，不需要对素数取模，那么就不存在hash冲突问题\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);