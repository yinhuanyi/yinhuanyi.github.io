(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{2264:function(s,a,n){"use strict";n.r(a);var e=n(9),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"_1-继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-继承"}},[s._v("#")]),s._v(" 1：继承")]),s._v(" "),e("ul",[e("li",[s._v("概念")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("子类继承于父类，将拥有父类的非private属性和非privave方法\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("子类继承于父类示例")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class Cat extends Animal{\n    private double weight;\n\n    public Cat(){\n        Cat.hear = "woshi";\n    }\n\n    public double getWeight() {\n        return weight;\n    }\n\n    public void setWeight(double weight) {\n        this.weight = weight;\n    }\n\n    public void run(){\n        System.out.println(this.getName() + "跑了");\n    }\n\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("h3",{attrs:{id:"_2-方法重写和方法重载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法重写和方法重载"}},[s._v("#")]),s._v(" 2：方法重写和方法重载")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('1: 方法重载（一个同一个类中或继承中多个同名的方法，但是参数不同，就是重载）\n\t①：在一个类中, 或继承中\n\t②：重载的方法名称必须于源方法相同，参数列表一定不能相同(不相同体现在参数顺序，个数，类型)\n\t③：对重载的方法返回值、修饰符没有要求\n\n代码举例：\npublic void run(){\n    System.out.println(this.getName() + "跑了");\n}\n\nprivate String run(String name){\n    System.out.println(name);\n    return name;\n}\n\n\n2: 方法重写(在继承的过程中，子类重写父类的方法)\n\t①：有继承关系的子类中\n\t②：方法名相同，参数列表相同(包括参数个数，类型，顺序)，方法返回值相同\n\t③：修饰符可以不相同，但是访问修饰符必须大于父类的访问修饰符\n\t④：方法的参数名称可以不同\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h3",{attrs:{id:"_3-super关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-super关键字"}},[s._v("#")]),s._v(" 3：super关键字")]),s._v(" "),e("ul",[e("li",[s._v("super关键字的意义")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("super可以作为父类的构造器，super()类似于调用父类的构造器，super一般写在子类的构造器中\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public Cat(String name, int age){\n\t\t// 调用父类的构造器\n        super(name, age);\n    }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("注意点")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("父类的构造方法不能够被继承，也不能被重写\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("子类调用父类构造器中super的作用")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1：当子类调用父类的构造器的时候，super可以指定调用父类的哪个构造器，如何不指定，默认是调用父类的无参构造器\n\n2：且必须写在子类构造器的第一行\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"_4-类的加载顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-类的加载顺序"}},[s._v("#")]),s._v(" 4：类的加载顺序")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1: 首先加载父类的静态信息，包括静态代码块，在加载子类的静态信息\n\n2: 再加载父类的成员信息，父类的代码块，父类的构造方法， 再加载子类的成员信息，子类的代码块，子类的构造方法\n\n3：加载子类构造方法时候，默认会调用父类的无参构造，如果父类的无参构造被注释，代码会报错\n\n4：但是如果在子类的构造方法中，显示调用了super，那么根据关键字的意义，会根据super参数指定有选择性的调用父类的无参构造或带参构造。而且super必须写在子类构造方法的第一行，目的是有选择性的调用父类的哪个构造方法。也就是说super关键字可以指定调用父类的哪一个构造器\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("img",{attrs:{src:n(789),alt:"Alt text"}})]),s._v(" "),e("h3",{attrs:{id:"_5-super与this的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-super与this的区别"}},[s._v("#")]),s._v(" 5：super与this的区别")]),s._v(" "),e("ul",[e("li",[s._v("this")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1：this作为本类实例对象时，可以调用本类的静态成员和非静态成员\n2：类只能调用静态成员\n3: 在子类的构造方法中，this();表示默认调用本类中无参的构造方法，也可以调用有参数的构造方法\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("super")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1: super作为父类实例对象时，可以调用父类的静态成员和非静态成员\n2: 在子类的构造方法中，super();表示默认调用本类中无参的构造方法， 也可以调用有参数的构造方法\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("共同点")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("this 和 super 都不能够在静态的方法中被调用\nthis 和 super 不能够在同一个构造方法中出现\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])])}),[],!1,null,null,null);a.default=t.exports},789:function(s,a,n){s.exports=n.p+"assets/img/2019-01-056.18.56.44aa1d31.png"}}]);