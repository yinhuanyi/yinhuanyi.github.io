(window.webpackJsonp=window.webpackJsonp||[]).push([[431],{2345:function(s,a,n){"use strict";n.r(a);var t=n(9),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"一-mock介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-mock介绍"}},[s._v("#")]),s._v(" 一：mock介绍")]),s._v(" "),n("h3",{attrs:{id:"一-mock-入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-mock-入门"}},[s._v("#")]),s._v(" （一）：mock 入门")]),s._v(" "),n("ul",[n("li",[s._v("概念")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\tmock又叫模拟，mock是Python中一个用于支持的测试的库，它的主要功能是使用模拟对象替代掉指定的Python对象，以达到模拟对象的行为。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("使用")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t从Python 3.3开始，mock模块已经被合并到标准库中，被命名为unittest.mock，可以直接import进来使用。Mock对象就是mock模块中的一个类的实例，这个类的实例可以用来替换其他的Python对象，来达到模拟的效果\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"二-mock-使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-mock-使用"}},[s._v("#")]),s._v(" （二）：mock 使用")]),s._v(" "),n("ul",[n("li",[n("p",[n("code",[s._v("场景")]),s._v("："),n("strong",[s._v("当开发一个项目的时候，一个同事开发了数据清洗功能，另外一个同事需要拿到清洗后的数据，完成数据展示。那么这个时候，数据清洗和数据展示这两个功能就存在依赖性，必须是数据清洗完毕之后才能进行数据展示。")])])]),s._v(" "),n("li",[n("p",[s._v("function1.py模块")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 功能没有开发完毕\ndef data_parse():\n    pass\n\n\ndef data_show():\n\t\n\t# ret为待mock的数据\n    ret = data_parse()\n\n    try:\n        if ret.get(\'result\') == "success":\n            return "data parse success"\n        elif ret.get(\'result\') == "fail":\n            print("data parse failed: {}".format(ret.get(\'reason\')))\n            return "data parse failed"\n        else:\n            return "Unknow Reason"\n    except:\n        return "Server Unknow Reason"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("ul",[n("li",[s._v("newTest.py模块")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from unittest import mock\nfrom unittest import TestCase\nimport unittest\nimport function1\n\n\n\nclass TestData(TestCase):\n\n    def test_print1(self):\n\n        function1.data_parse = mock.MagicMock(return_value={"result": "success", "reason":"null"})\n        statues = function1.data_show()\n        print(statues)\n        self.assertEqual(statues, "data parse success")\n\n    def test_print2(self):\n\n        function1.data_parse = mock.MagicMock(return_value={"result": "fail", "reason": "Data Error"})\n        statues = function1.data_show()\n        self.assertEqual(statues, "data parse failed")\n\nif __name__ == "__main__":\n    unittest.main()\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("ul",[n("li",[s._v("测试结果")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("data parse success\ndata parse failed: Data Error\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])])])}),[],!1,null,null,null);a.default=e.exports}}]);