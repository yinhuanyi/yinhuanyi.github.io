(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{2078:function(s,t,a){s.exports=a.p+"assets/img/HTTP.754f4870.png"},2079:function(s,t,a){s.exports=a.p+"assets/img/5e8b3db9e995a008cb05b26f377a4b9d.783636d6.jpg"},2080:function(s,t,a){s.exports=a.p+"assets/img/2020-11-0512.08.44.8f45fab0.png"},2081:function(s,t,a){s.exports=a.p+"assets/img/2020-11-0512.12.43.18579606.png"},2769:function(s,t,a){"use strict";a.r(t);var n=a(9),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[n("img",{attrs:{src:a(2078),alt:"Alt text"}})]),s._v(" "),n("h2",{attrs:{id:"一-http-基础知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-http-基础知识"}},[s._v("#")]),s._v(" 一：HTTP 基础知识")]),s._v(" "),n("h3",{attrs:{id:"一-什么是http"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是http"}},[s._v("#")]),s._v(" （一）什么是HTTP")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"二-http-常见的状态码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-http-常见的状态码"}},[s._v("#")]),s._v(" （二）HTTP 常见的状态码")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[s._v("类型")]),s._v(" "),n("th",{staticStyle:{"text-align":"right"}},[s._v("含义")]),s._v(" "),n("th",{staticStyle:{"text-align":"center"}},[s._v("常见状态码")])])]),s._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("1xx")]),s._v(" "),n("td",{staticStyle:{"text-align":"right"}},[s._v("提示信息，表示目前是协议处理的中间状态，需要后续操作")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}})]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("2xx")]),s._v(" "),n("td",{staticStyle:{"text-align":"right"}},[s._v("成功，报文已收到且被正确处理")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("200、204、206")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("3xx")]),s._v(" "),n("td",{staticStyle:{"text-align":"right"}},[s._v("重定向，资源位置发生变动，需要客户端重新发起请求")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("301、302、304")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("4xx")]),s._v(" "),n("td",{staticStyle:{"text-align":"right"}},[s._v("客户端错误，请求报文有误，服务器无法处理")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("400、403、404")])]),s._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[s._v("5xx")]),s._v(" "),n("td",{staticStyle:{"text-align":"right"}},[s._v("服务器错误，服务器在处理请求时内部发生了错误")]),s._v(" "),n("td",{staticStyle:{"text-align":"center"}},[s._v("500、501、502、503")])])])]),s._v(" "),n("ul",[n("li",[s._v("2xx响应码")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v("：是最常见的成功状态码，表示一切正常。如果是非 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HEAD")]),s._v(" 请求，服务器返回的响应头都会有 body 数据。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("204")]),s._v("：也是常见的成功状态码，与 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("OK")]),s._v(" 基本相同，但响应头没有 body 数据。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("206")]),s._v("：是应用于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("3xx响应码")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v("：表示永久重定向，说明请求的资源已经不存在了，需改用新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v(" 再次访问。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),s._v("：表示临时重定向，说明请求的资源还在，但暂时需要另外一个"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("来访问。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("301")]),s._v(" 和 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("302")]),s._v(" 都会在响应头里使用字段 Location，指明后续要跳转的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("，浏览器会自动重定向新的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("304")]),s._v("：不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("4xx响应码")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),s._v("：表示客户端请求的报文有错误，但只是个笼统的错误\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("403")]),s._v("：表示服务器禁止访问资源，并不是客户端的请求出错\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("404")]),s._v("：表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("5xx响应码")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("500")]),s._v("：与 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("400")]),s._v("类似，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("501")]),s._v("：表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("502")]),s._v("：通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("503")]),s._v("：表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"三-http-常见字段有哪些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-http-常见字段有哪些"}},[s._v("#")]),s._v(" （三）HTTP 常见字段有哪些")]),s._v(" "),n("ul",[n("li",[s._v("Host字段")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("Host"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" www"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("baidu"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("com 有了 Host 字段，就可以将请求发往「同一台」服务器上的不同网站。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("Content-Length字段")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Length"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n服务器在返回数据时，会有 Content"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Length 字段，表明本次回应的数据长度\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("Connection字段")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("Connection"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" keep"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("alive\nConnection 字段最常用于客户端要求服务器使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 持久连接，以便其他请求复用\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("Accept字段和Content-Type字段")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("Accept"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\nAccept字段一般用于请求头，表明可以接收的数据格式\n\nContent-Type: text/html; charset=utf-8\nContent-Type 字段用于服务器回应时，告诉客户端，本次数据是什么格式\n")])])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("Accept-Encoding字段和Content-Encoding字段")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("Accept"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Encoding"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" gzip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" deflate\nAccept"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Encoding字段一般用于请求头，表明可以客户端可以接收的压缩数据类型\n\nContent"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Encoding"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" gzip\nContent"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Encoding字段一般用于服务器响应，告诉客户端使用的压缩数据的格式\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"二-get和post"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-get和post"}},[s._v("#")]),s._v(" 二：GET和POST")]),s._v(" "),n("h3",{attrs:{id:"一-get和post的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-get和post的区别"}},[s._v("#")]),s._v(" （一）GET和POST的区别")]),s._v(" "),n("ul",[n("li",[s._v("GET")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("Get 方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("POST")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" 方法则是相反操作，它向 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URI")]),s._v(" 指定的资源提交数据，数据就放在报文的 body 里\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"二-get和post的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-get和post的区别"}},[s._v("#")]),s._v(" （二）GET和POST的区别")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("那么很明显 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GET")]),s._v(" 方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的\n\n"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POST")]),s._v(" 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"三-http的特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-http的特性"}},[s._v("#")]),s._v(" 三：HTTP的特性")]),s._v(" "),n("h3",{attrs:{id:"一-http的缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-http的缺点"}},[s._v("#")]),s._v(" （一）HTTP的缺点")]),s._v(" "),n("ul",[n("li",[s._v("无状态")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("无法记录用户的信息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("明文传输")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[s._v("任何信息可以被抓包获取\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("不安全")])]),s._v(" "),n("h3",{attrs:{id:"二-http-1-1-的性能如何"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-http-1-1-的性能如何"}},[s._v("#")]),s._v(" （二）HTTP/1.1 的性能如何")]),s._v(" "),n("ul",[n("li",[s._v("长连接")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。\n\n当一个客户端与服务器端建立"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("连接的时候，只要任意一端没有明确的提出断开连接，则会在默认的"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TIMEOUT")]),s._v("时长内保持这个"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("连接不断开\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("管道网络传输")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。即可在同一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。\n\n管道机制则是允许浏览器同时发出 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 请求和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 请求，但是服务器还是按照顺序，先回应 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 请求，完成后再回应 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 请求。要是 前面的回应特别慢，后面就会有许多请求排队等着。这称为「队头堵塞\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"四-http与https"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-http与https"}},[s._v("#")]),s._v(" 四：HTTP与HTTPS")]),s._v(" "),n("h3",{attrs:{id:"一-http-与-https-有哪些区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-http-与-https-有哪些区别"}},[s._v("#")]),s._v(" （一）HTTP 与 HTTPS 有哪些区别")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 是超文本传输协议，信息是明文传输，存在安全风险的问题。"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 则解决 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 不安全的缺陷，在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 网络层之间加入了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SSL")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),s._v(" 安全协议，使得报文能够加密传输。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 连接建立相对简单， "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 三次握手之后便可进行 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 的报文传输。而 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 三次握手之后，还需进行 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SSL")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),s._v(" 的握手过程，才可进入加密报文传输。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 的端口号是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("，"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 的端口号是 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 协议需要向 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CA")]),s._v("（证书权威机构）申请数字证书，来保证服务器的身份是可信的。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(2079),alt:"Alt text"}})]),s._v(" "),n("h2",{attrs:{id:"五-http-1-1、http-2、http-3-演变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-http-1-1、http-2、http-3-演变"}},[s._v("#")]),s._v(" 五：HTTP/1.1、HTTP/2、HTTP/3 演变")]),s._v(" "),n("h3",{attrs:{id:"一-http-1-1-相比-http-1-0-提高了什么性能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-http-1-1-相比-http-1-0-提高了什么性能"}},[s._v("#")]),s._v(" （一）HTTP/1.1 相比 HTTP/1.0 提高了什么性能")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 使用 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 长连接的方式改善了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.0")]),s._v(" 短连接造成的性能开销。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 支持 管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"二-http-1-1-的性能瓶颈"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-http-1-1-的性能瓶颈"}},[s._v("#")]),s._v(" （二）HTTP/1.1 的性能瓶颈")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 请求 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 Body 的部分；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 发送冗长的首部。每次互相发送相同的首部造成的浪费较多；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 没有请求优先级控制；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 请求只能从客户端开始，服务器只能被动响应\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"三-在http-1-1-的性能瓶颈之上-http-2-做了什么优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-在http-1-1-的性能瓶颈之上-http-2-做了什么优化"}},[s._v("#")]),s._v(" （三）在HTTP/1.1 的性能瓶颈之上，HTTP/2 做了什么优化")]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 会压缩头（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你消除重复的分。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 这就是所谓的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HPACK")]),s._v(" 算法：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 不再像 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 里的纯文本形式的报文，而是全面采用了二进制格式"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 头信息和数据体都是二进制，并且统称为帧（frame）\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。每个请求或回应的所有数据包，称为一个数据流（Stream）。每个数据流都标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数， 服务器发出的数据流编号为偶数。客户端还可以指定数据流的优先级。优先级高的请求，服务器就先响应该请求\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 是可以在一个连接中并发多个请求或回应，而不用按照顺序一一对应。举例来说，在一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接里，服务器收到了客户端 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 的两个请求，如果发现 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 处理过程非常耗时，于是就回应 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 请求已经处理好的部分，接着回应 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v(" 请求，完成后，再回应 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v(" 请求剩下的部分\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 还在一定程度上改善了传统的「请求 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 应答」工作模式，服务不再是被动地响应，也可以主动向客户端发送消息，举例来说，在浏览器刚请求 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v(" 的时候，就提前把可能会用到的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JS")]),s._v("、"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v(" 文件等静态资源主动发给客户端，减少延时的等待，也就是服务器推送（Server Push，也叫 Cache Push）。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"四-http-2-有哪些缺陷-http-3-做了哪些优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-http-2-有哪些缺陷-http-3-做了哪些优化"}},[s._v("#")]),s._v(" （四）HTTP/2 有哪些缺陷？HTTP/3 做了哪些优化")]),s._v(" "),n("ul",[n("li",[s._v("缺陷")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 主要的问题在于：多个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求在复用一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接，下层的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 协议是不知道有多少个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求的。所以一旦发生了丢包现象，就会触发 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的重传机制，这样在一个 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 连接中的所有的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求都必须等待这个丢了的包被重传回来。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 中的管道（ pipeline）传输中如果有一个请求阻塞了，那么队列后请求也统统被阻塞住了\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("："),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 多请求复用一个"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("连接，一旦发生丢包，就会阻塞住所有的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 请求。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("HTTP/3的优势")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(2080),alt:"Alt text"}})]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 这都是基于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 传输层的问题，所以 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 把 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v(" 下层的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 协议改成了 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 发生是不管顺序，也不管丢包的，所以不会出现 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.1")]),s._v(" 的队头阻塞 和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 的一个丢包全部重传问题。大家都知道 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 是不可靠传输的，但基于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUIC")]),s._v(" 协议 可以实现类似 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的可靠性传输。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("QUIC协议")])]),s._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 大家都知道 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 是不可靠传输的，但基于 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUIC")]),s._v(" 协议 可以实现类似 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 的可靠性传输。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUIC")]),s._v(" 有自己的一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，其他流不会受到影响。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TL3")]),s._v(" 升级成了最新的 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" 版本，头部压缩算法也升级成了 QPack。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v(" 要建立一个连接，要花费 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" 次交互，先是建立三次握手，然后是 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" 的三次握手。"),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUIC")]),s._v(" 直接把以往的 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" 和 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.3")]),s._v(" 的 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" 次交互合并成了 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" 次，减少了交互次数。\n\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" 所以， "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("QUIC")]),s._v(" 是一个在 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v(" 之上的伪 "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TLS")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 的多路复用的协议。\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("img",{attrs:{src:a(2081),alt:"Alt text"}})])])}),[],!1,null,null,null);t.default=e.exports}}]);