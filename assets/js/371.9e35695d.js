(window.webpackJsonp=window.webpackJsonp||[]).push([[371],{2230:function(n,s,e){"use strict";e.r(s);var t=e(9),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"一-time包时间处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-time包时间处理"}},[n._v("#")]),n._v(" 一：time包时间处理")]),n._v(" "),e("h3",{attrs:{id:"一-时间类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-时间类型"}},[n._v("#")]),n._v(" (一)：时间类型")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("time.Time")]),n._v("类型表示时间。我们可以通过time.Now()函数获取当前的时间对象，然后获取时间对象的年月日时分秒等信息。示例代码如下：")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('now := time.Now() //获取当前时间\n// 输出：current time:2021-06-12 19:13:10.429957 +0800 CST m=+0.000124234\nfmt.Printf("current time:%v\\n", now)\n\n\nyear := now.Year()     //年\nmonth := now.Month()   //月\nday := now.Day()       //日\nhour := now.Hour()     //小时\nminute := now.Minute() //分钟\nsecond := now.Second() //秒\ntimeZone, offset := now.Zone()\n// 输出： 2021-06-12 19:13:10\nfmt.Printf("%d-%02d-%02d %02d:%02d:%02d\\n", year, month, day, hour, minute, second)\n// 输出：时区:CST - 时间偏移:28800\nfmt.Printf("时区:%s - 时间偏移:%d", timeZone, offset)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br")])]),e("h3",{attrs:{id:"二-时间戳"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-时间戳"}},[n._v("#")]),n._v(" (二)：时间戳")]),n._v(" "),e("ul",[e("li",[n._v("时间戳是自1970年1月1日（08:00:00GMT）至当前时间的总毫秒数。它也被称为Unix时间戳（UnixTimestamp）")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('now := time.Now()            //获取当前时间\ntimestamp := now.Unix()     //时间戳\ntimestampNano := now.UnixNano() //纳秒时间戳\n\n// 输出：1623496604\nfmt.Printf("current timestamp1:%v\\n", timestamp)\n// 输出：1623496604121290000\nfmt.Printf("current timestamp2:%v\\n", timestampNano)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("ul",[e("li",[n._v("将时间戳转换为time.Time格式")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 获取当前时间戳\ntimestampNow := time.Now().Unix()\nfmt.Println(timestampNow)\n\n// 获取time.Time类型的时间对象\ntimeObj := time.Unix(timestampNow, 0) //将时间戳转为时间格式\nfmt.Println(timeObj)\n\nyear := timeObj.Year()     //年\nmonth := timeObj.Month()   //月\nday := timeObj.Day()       //日\nhour := timeObj.Hour()     //小时\nminute := timeObj.Minute() //分钟\nsecond := timeObj.Second() //秒\nfmt.Printf("%d-%02d-%02d %02d:%02d:%02d\\n", year, month, day, hour, minute, second)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("h3",{attrs:{id:"三-时间间隔"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-时间间隔"}},[n._v("#")]),n._v(" (三)：时间间隔")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("time.Duration是time包定义的一个类型，它代表两个时间点之间经过的时间，以纳秒为单位。time.Duration表示一段时间间隔，可表示的最长时间段大约290年。")])]),n._v(" "),e("li",[e("p",[n._v("time包中定义的时间间隔类型的常量如下")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("const (\n    Nanosecond  Duration = 1\n    Microsecond          = 1000 * Nanosecond\n    Millisecond          = 1000 * Microsecond\n    Second               = 1000 * Millisecond\n    Minute               = 60 * Second\n    Hour                 = 60 * Minute\n)\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("h3",{attrs:{id:"四-时间操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-时间操作"}},[n._v("#")]),n._v(" (四)：时间操作")]),n._v(" "),e("ul",[e("li",[e("code",[n._v("Add")]),n._v("(加时间duration即可，如果时间duration是负数，那就是减时间)")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 加入现在是11点，加1小时，就是12点\nnow := time.Now()\nlater := now.Add(time.Hour)  // 当前时间加1小时后的时间\nfmt.Println(later)\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("Sub")]),n._v("(计算两个time.Time类型的时间对象的纳秒的duration，也就是计算时间间隔)")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('now := time.Now()\ntime.Sleep(time.Second * 3)\nlater := time.Now()\n\nduration := later.Sub(now) / 1000000000\n\n// 输出：相差3秒\nfmt.Printf("相差%d秒", duration)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("Equal")]),n._v("(判断两个时间是否相同，已考虑时区的影响)")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('now := time.Now()\ntime.Sleep(time.Second * 3)\nlater := time.Now()\n\nisEqual := later.Equal(now)\nfmt.Printf("%v", isEqual)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("Before")]),n._v("(如果t代表的时间点在u之前，返回真；否则返回假)")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('now := time.Now()\ntime.Sleep(time.Second * 3)\nlater := time.Now()\n\nisBefore := now.Before(later)\n// 返回true\nfmt.Printf("%t", isBefore)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("After")]),n._v("(如果t代表的时间点在u之后，返回真；否则返回假)")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func (t Time) After(u Time) bool\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("h3",{attrs:{id:"六-时间格式化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-时间格式化"}},[n._v("#")]),n._v(" (六)：时间格式化")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("时间类型有一个自带的方法Format进行格式化，需要注意的是Go语言中格式化时间模板不是常见的Y-m-d H:M:S而是使用Go的诞生时间2006年1月2号15点04分5秒（记忆口诀为2006 1 2 3 4 5）")])]),n._v(" "),e("li",[e("p",[e("code",[n._v("time.Time类型 -> 字符串")])])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('now := time.Now()\n// 格式化的模板为Go的出生时间2006年1月2号15点04分 Mon Jan\nfmt.Println(now.Format("2006-01-02 15:04:05"))\n// 24小时制\nfmt.Println(now.Format("2006-01-02 15:04:05.000 Mon Jan"))\n// 12小时制\nfmt.Println(now.Format("2006-01-02 03:04:05.000 PM Mon Jan"))\nfmt.Println(now.Format("2006/01/02 15:04"))\nfmt.Println(now.Format("15:04 2006/01/02"))\nfmt.Println(now.Format("2006/01/02"))\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("字符串 -> time.Time类型")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 获取上海时区\nlocation, _ := time.LoadLocation("Asia/Shanghai")\n\n// 第一个参数是模板，第二个参数是需要解析的时间字符串，第三个是时区\ntimeObj, _ := time.ParseInLocation("2006-01-02 15:04:05", "2021-03-01 14:15:20", location)\n\nfmt.Println(timeObj)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("h2",{attrs:{id:"二-time定时器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-time定时器"}},[n._v("#")]),n._v(" 二：time定时器")]),n._v(" "),e("h3",{attrs:{id:"一-golang中定时器有2中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-golang中定时器有2中"}},[n._v("#")]),n._v(" (一)：golang中定时器有2中")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("1：time.Timer类型：一次性定时器\n\n2：time.Ticker类型：周期定时器\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("h3",{attrs:{id:"二-time-timer类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-time-timer类型"}},[n._v("#")]),n._v(" (二)：time.Timer类型")]),n._v(" "),e("ul",[e("li",[n._v("1："),e("strong",[n._v("time.NewTimer")]),n._v("："),e("code",[n._v("NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C channel字段发送当时的时间, 一旦从C中获取过期时间点，定时器结束")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("timer := time.NewTimer(time.Second)\n// 此时定时器结束\nfmt.Println(<-timer.C)  # 输出：2021-08-24 10:32:35 \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("ul",[e("li",[e("strong",[n._v("timer有Reset、Stop两个方法")]),n._v("：从timer.C中获取数据，此时timer定时器结束，如果想再次从C中获取过期时间点，只能通过调用 Reset() 方法使timer 重新开始计时。Stop()方法是停止定时器，下面的例子解释了"),e("code",[n._v("定时器timer的Reset和Stop方法使用场景，在for循环中每次获取C的值，必须Reset定时器")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('timer := time.NewTimer(time.Second)\n\ncount := 0\n\ngo func() {\n\tfor {\n\t\tfmt.Println(<-timer.C)\n\t\ttimer.Reset(time.Second)  // 这里必须要重置timer，否则<-timer.C无法获取到值，就会阻塞\n\t\tcount ++\n\t\tif count > 4 {\n\t\t\ttimer.Stop()          // 停止定时器\n\t\t\tbreak\n\t\t}\n\t}\n\tfmt.Println("定时器结束，goroutine停止")\n}()\n\n\ntime.Sleep(30 * time.Second)\n\n\n\n输出结果：\n2021-08-24 11:04:29.909013 \n2021-08-24 11:04:30.9111 \n2021-08-24 11:04:31.912864 \n2021-08-24 11:04:32.918031 \n2021-08-24 11:04:33.918671 \n定时器结束，goroutine停止\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br")])]),e("ul",[e("li",[n._v("2："),e("strong",[n._v("time.After")]),n._v("："),e("code",[n._v("用于实时超时控制，直接返回一个channel对象，当调用After方法的时候，会创建一个Timer类型对象，返回timer对象的C属性")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("fmt.Println(<-time.After(time.Second)) # 输出：2021-08-24 11:13:50.219311 \n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("ul",[e("li",[e("strong",[n._v("time.After的使用场景")]),n._v("："),e("code",[n._v("一般用于for select语句中，防止协程deadlock!")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('ch := make(chan string)\n\ngo func() {\n\ttime.Sleep(time.Second * 2)\n\n\tch <- "result"\n}()\n\nfor {\n\tselect {\n\tcase res := <-ch:\n\t\tfmt.Println(res)\n\tcase <-time.After(time.Second * 1): // time.After返回的channel对象，每一秒都可以获取到过期时间点\n\t\tfmt.Println("timeout")\n\t}\n}\n\n\n输出结果：\ntimeout\nhello\ntimeout\ntimeout\ntimeout\ntimeout\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br")])]),e("ul",[e("li",[n._v("3："),e("strong",[n._v("time.AfterFunc")]),n._v("："),e("code",[n._v("等待一段时间后，在【goroutine】中调用自定义函数，与time.After的区别是一个是超时可以从channel获取时间点，一个是超时调用自定义函数")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('afterFunc := func() {\n\tfmt.Printf("当前时间：%v", time.Now())\n}\n\ntimer := time.AfterFunc(time.Second, afterFunc)\ndefer timer.Stop()\n// fmt.Println(<-timer.C)  // 如果从C取值，会报错deadlock\n\ntime.Sleep(3 * time.Second)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("h3",{attrs:{id:"三-time-tiker类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-time-tiker类型"}},[n._v("#")]),n._v(" (三)：time.Tiker类型")]),n._v(" "),e("ul",[e("li",[n._v("1："),e("strong",[n._v("time.NewTicker")]),n._v("：创建一个Ticker类型对象，每过一段时间，ticker自动向C通道写入当前时间点")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("ticker := time.NewTicker(1 * time.Second)\nfor {\n\tfmt.Println(<-ticker.C)\n}\n\n\n输出结果：\n2021-08-24 11:52:54.164844 \n2021-08-24 11:52:55.162766 \n2021-08-24 11:52:56.162813 \n2021-08-24 11:52:57.164101 \n2021-08-24 11:52:58.167891 \n2021-08-24 11:52:59.16328\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("ul",[e("li",[n._v("使用time.Tick(时间间隔)来设置定时器，定时器的本质上是一个通道（channel）")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("ticker := time.Tick(time.Second) // 这里直接返回channel通道\n\nfor i := range ticker {  // 从channel通道中遍历数据\n\tfmt.Println(i) //每秒都会执行的任务\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);