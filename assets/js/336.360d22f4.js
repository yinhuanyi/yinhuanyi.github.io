(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{2160:function(s,n,e){"use strict";e.r(n);var a=e(9),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"一-并发控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-并发控制"}},[s._v("#")]),s._v(" 一：并发控制")]),s._v(" "),e("ul",[e("li",[s._v("实现并发控制的主要手段分为"),e("code",[s._v("乐观并发控制")]),s._v("和"),e("code",[s._v("悲观并发控制")]),s._v("两种，乐观锁比较适用于"),e("code",[s._v("读多写少")]),s._v("的情况(多读场景)，悲观锁比较适用于"),e("code",[s._v("写多读少")]),s._v("的情况(多写场景)")])]),s._v(" "),e("h3",{attrs:{id:"一-悲观锁-pessimistic-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-悲观锁-pessimistic-lock"}},[s._v("#")]),s._v(" (一)：悲观锁(Pessimistic Lock)")]),s._v(" "),e("ul",[e("li",[s._v("概念")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t当要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制【Pessimistic Concurrency Control，缩写“PCC”，又名“悲观锁”】\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("只能依赖数据库层的锁机制实现")])]),s._v(" "),e("div",{staticClass:"language-text line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t悲观锁，具有强烈的独占和排他特性。它指的是对数据被外界(包括本系统当前的其他事务，以及来自外部系统的事务处理)修改持保守态度。因此，在整个数据处理过程中，将数据处于锁定状态。悲观锁的实现，往往依靠数据库提供的锁机制(也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("为什么叫悲观锁")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t之所以叫做悲观锁，是因为这是一种对数据的修改持有悲观态度的并发控制方式。总是假设最坏的情况，每次读取数据的时候都默认其他线程会更改数据，因此需要进行加锁操作，当其他线程想要访问数据时，都需要阻塞挂起。悲观锁的实现\n\t1：传统的关系型数据库使用这种锁机制，比如行锁、表锁、读锁、写锁等，都是在操作之前先上锁。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("悲观锁的分类")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t共享锁【shared locks】又称为读锁，简称 S 锁。顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。\n\n\t排他锁【exclusive locks】又称为写锁，简称 X 锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁。获取排他锁的事务可以对数据行读取和修改。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("Python中实现方式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('from datetime import datetime\nimport threading\nimport time\nfrom random import randint\n\nfrom peewee import *\nfrom inventory_srv.settings import settings\nfrom playhouse.shortcuts import ReconnectMixin\nfrom playhouse.pool import PooledMySQLDatabase\n\n# 表数据， 在inventory表中，添加了version字段\nclass BaseModel(Model):\n    add_time = DateTimeField(default=datetime.now, verbose_name="添加时间")\n    is_deleted = BooleanField(default=False, verbose_name="是否删除")\n    update_time = DateTimeField(verbose_name="更新时间", default=datetime.now)\n\n    def save(self, *args, **kwargs):\n        # 判断这是一个新添加的数据还是更新的数据\n        if self._pk is not None:\n            # 这是一个新数据\n            self.update_time = datetime.now()\n        return super().save(*args, **kwargs)\n\n    @classmethod\n    def delete(cls, permanently=False):  # permanently表示是否永久删除\n        if permanently:\n            return super().delete()\n        else:\n            return super().update(is_deleted=True)\n\n    def delete_instance(self, permanently=False, recursive=False, delete_nullable=False):\n        if permanently:\n            return self.delete(permanently).where(self._pk_expr()).execute()\n        else:\n            self.is_deleted = True\n            self.save()\n\n    @classmethod\n    def select(cls, *fields):\n        return super().select(*fields).where(cls.is_deleted == False)\n\n    class Meta:\n        database = settings.DB\nclass Inventory(BaseModel):\n    # 商品的库存表\n    # stock = PrimaryKeyField(Stock)\n    goods = IntegerField(verbose_name="商品id", unique=True)\n    stocks = IntegerField(verbose_name="库存数量", default=0)\n    version = IntegerField(verbose_name="版本号", default=0)  # 分布式锁的乐观锁\n\n\nR = threading.Lock()\n\nclass ReconnectMySQLDatabase(ReconnectMixin, PooledMySQLDatabase):\n    pass\n\n\ndb = ReconnectMySQLDatabase("inventory_srv", host="192.168.0.104", port=3306, user="root", password="root")\n\n\ndef sell():\n    # 多线程下的并发带来的数据不一致的问题\n    goods_list = [(1, 99), (2, 20), (3, 30)]\n    with db.atomic() as txn:\n        for goods_id, num in goods_list:\n            # 获取锁， 在操作数据之前加锁\n            R.acquire()\n\n            goods_inv = Inventory.get(Inventory.goods == goods_id)\n            print(f"商品{goods_id} 售出 {num}件")\n            time.sleep(randint(1, 3))\n            if goods_inv.stocks < num:\n                print(f"商品：{goods_id} 库存不足")\n                txn.rollback()\n                break\n            else:\n                query = Inventory.update(stocks=Inventory.stocks-num).where(Inventory.goods==goods_id)\n                ok = query.execute()\n                if ok:\n                    print("更新成功")\n                else:\n                    print("更新失败")\n\n            # 释放锁，操作完数据后释放锁\n            R.release()\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br")])]),e("ul",[e("li",[s._v("悲观锁面临的问题")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会。另外还会降低并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数据。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"二-乐观锁-optimistic-locking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-乐观锁-optimistic-locking"}},[s._v("#")]),s._v(" (二)：乐观锁(Optimistic Locking)")]),s._v(" "),e("ul",[e("li",[s._v("概念")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突，则返回给用户异常信息，让用户决定如何去做。乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量。\n\t\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("乐观锁不依赖数据库的锁机制")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t乐观锁采取了更加宽松的加锁机制。也是为了避免数据库幻读、业务处理时间过长等原因引起数据处理错误的一种机制，但乐观锁不会刻意使用数据库本身的锁机制，而是依据数据本身来保证数据的正确性\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("乐观锁实现方式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("基于版本号控制的方式\n\t一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。当数据被修改时，version 值会 +1。当线程 A 要更新数据时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值与当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("python 中具体实现方式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('from datetime import datetime\nimport threading\nimport time\nfrom random import randint\n\nfrom peewee import *\nfrom inventory_srv.settings import settings\nfrom playhouse.shortcuts import ReconnectMixin\nfrom playhouse.pool import PooledMySQLDatabase\n\n# 表数据， 在inventory表中，添加了version字段\nclass BaseModel(Model):\n    add_time = DateTimeField(default=datetime.now, verbose_name="添加时间")\n    is_deleted = BooleanField(default=False, verbose_name="是否删除")\n    update_time = DateTimeField(verbose_name="更新时间", default=datetime.now)\n\n    def save(self, *args, **kwargs):\n        # 判断这是一个新添加的数据还是更新的数据\n        if self._pk is not None:\n            # 这是一个新数据\n            self.update_time = datetime.now()\n        return super().save(*args, **kwargs)\n\n    @classmethod\n    def delete(cls, permanently=False):  # permanently表示是否永久删除\n        if permanently:\n            return super().delete()\n        else:\n            return super().update(is_deleted=True)\n\n    def delete_instance(self, permanently=False, recursive=False, delete_nullable=False):\n        if permanently:\n            return self.delete(permanently).where(self._pk_expr()).execute()\n        else:\n            self.is_deleted = True\n            self.save()\n\n    @classmethod\n    def select(cls, *fields):\n        return super().select(*fields).where(cls.is_deleted == False)\n\n    class Meta:\n        database = settings.DB\nclass Inventory(BaseModel):\n    # 商品的库存表\n    # stock = PrimaryKeyField(Stock)\n    goods = IntegerField(verbose_name="商品id", unique=True)\n    stocks = IntegerField(verbose_name="库存数量", default=0)\n    version = IntegerField(verbose_name="版本号", default=0)  # 分布式锁的乐观锁\n\n\nR = threading.Lock()\n\nclass ReconnectMySQLDatabase(ReconnectMixin, PooledMySQLDatabase):\n    pass\n\n\ndb = ReconnectMySQLDatabase("inventory_srv", host="192.168.0.104", port=3306, user="root", password="root")\n\n\n# 乐观锁实现, version+1机制\ndef sell():\n    goods_list = [(1, 10), (2, 20), (3, 30)]\n    with db.atomic() as txn: # 开启事务\n        for goods_id, num in goods_list:\n            while True:\n                goods_inv = Inventory.get(Inventory.goods==goods_id)\n                print(f"当前的版本号：{goods_inv.version}")\n                print(f"商品{goods_id} 售出 {num}件")\n\n                time.sleep(randint(1, 3))\n                if goods_inv.stocks < num:\n                    print(f"商品：{goods_id} 库存不足")\n                    txn.rollback() # 如果失败，回滚所有操作\n                    break\n                else:\n                    # 这里的update是原子性操作\n                    # 这里需要满足的条件是查询操作中的version和修改操作中的version值相等\n                    query = Inventory.update(stocks=Inventory.stocks-num, version=Inventory.version+1).where(Inventory.goods==goods_id, Inventory.version==goods_inv.version)\n                    ok = query.execute()\n                    if ok:\n                        print("version更新成功，退出while循环")\n                        break\n                    else:\n                        print("version更新失败，继续while循环")\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br")])]),e("ul",[e("li",[s._v("乐观锁的问题")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去判断是否可以执行，所以不会产生任何锁和死锁\n\t但是乐观锁也需要循环操作数据库，加大数据库的开销\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"三-通过-for-update-的方式进行加悲观锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-通过-for-update-的方式进行加悲观锁"}},[s._v("#")]),s._v(" (三)：通过 for update 的方式进行加悲观锁")]),s._v(" "),e("ul",[e("li",[s._v("以电商库存为例")])]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" autocommit"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 关闭 MySQL 数据库的自动提交属性")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("begin")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("select")]),s._v(" quantity "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" items "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" fro "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 查询库存信息")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("update")]),s._v(" items "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" quantity"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("where")]),s._v(" id"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 修改库存信息")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("commit")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("注意：InnoDB行级锁都是基于索引的，如果SQL无法使用到索引，则会使用表级锁")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\t使用 select…for update 锁数据，需要注意锁的级别，MySQL InnoDB 默认行级锁。行级锁都是基于索引的，如果一条 SQL 语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"二-库存服务中-解决分布式锁的问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-库存服务中-解决分布式锁的问题"}},[s._v("#")]),s._v(" 二：库存服务中，解决分布式锁的问题")]),s._v(" "),e("h3",{attrs:{id:"一-mysql的悲观锁和乐观锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-mysql的悲观锁和乐观锁"}},[s._v("#")]),s._v(" (一)：MySQL的悲观锁和乐观锁")]),s._v(" "),e("h3",{attrs:{id:"二-使用分布式锁-第三方解决方案-https-github-com-ionelmc-python-redis-lock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-使用分布式锁-第三方解决方案-https-github-com-ionelmc-python-redis-lock"}},[s._v("#")]),s._v(" (二)：使用分布式锁，第三方解决方案:https://github.com/ionelmc/python-redis-lock")]),s._v(" "),e("ul",[e("li",[s._v("分布式锁需要解决的问题")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("分布式锁需要解决的问题：\n    互斥性：任何时刻都必须有一个客户端拥有锁，不能同时多个客户端同时获取到锁 ，setnx命令 可以解决\n    安全性：锁只能被持有的用户删除，而不能被其他的用户删除\n    死锁：获取锁的客户端因为某些原因而宕机，未能够释放锁，其他客户端无法获取到此锁，需要有机制来避免该类问题的发生（可以设置过期时间 ）\n        1：代码异常 \n        2：Redis网络断开\n    容错：当部分节点宕机，客户端仍然能够释放锁，并且正常的获取锁\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[s._v("基于Redis的分布式锁")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("有点：\n\t性能高\n\t简单\n\n缺点：\n\tRedis可能会挂掉\n\tRedis cluster可能会导致Redis锁出现问题\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);