(window.webpackJsonp=window.webpackJsonp||[]).push([[151],{2393:function(n,s,e){"use strict";e.r(s);var a=e(9),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"一-生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-生成器"}},[n._v("#")]),n._v(" 一：生成器")]),n._v(" "),a("h3",{attrs:{id:"一-生成器的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-生成器的特点"}},[n._v("#")]),n._v(" (一)：生成器的特点")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1：生成器和列表非常类似，拥有一样的迭代方式\n2：内存模型上更加节约空间\n3：生成器只能遍历一次\n4：xrange(10) 遍历是一个生成器对象\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("h3",{attrs:{id:"二-yield和yield-from关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-yield和yield-from关键字"}},[n._v("#")]),n._v(" (二)：yield和yield from关键字")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1：yield 可以把函数变成一个生成器函数\n2：生成器可以使代码更加的简洁\n3：yield from允许在一个生成器里迭代另外一个生成器\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h3",{attrs:{id:"三-next函数和send函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-next函数和send函数"}},[n._v("#")]),n._v(" (三)：next函数和send函数")]),n._v(" "),a("ul",[a("li",[n._v("next方法和send方法")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1：next方法用于激活生成器\n2：send方法用于给生成器赋值\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("ul",[a("li",[n._v("示例1：生成器激活和赋值")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("def func():\n    while True:\n        num = yield\n        print('This num is = {}'.format(num))\n\ngen = func()\n# 激活生成器\nnext(gen)\n# 给生成器赋值\ngen.send(10)\ngen.send(20)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("ul",[a("li",[n._v("示例2：生成器延时计算")])]),n._v(" "),a("p",[a("img",{attrs:{src:e(966),alt:"Alt text"}})]),n._v(" "),a("ul",[a("li",[n._v("示例3：yield关键字的赋值过程")])]),n._v(" "),a("p",[a("img",{attrs:{src:e(967),alt:"Alt text"}})]),n._v(" "),a("h3",{attrs:{id:"四-使用生成器实现生产者和消费者模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-使用生成器实现生产者和消费者模型"}},[n._v("#")]),n._v(" (四)：使用生成器实现生产者和消费者模型")]),n._v(" "),a("ul",[a("li",[n._v("代码模型")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("import time\n\ndef consumer():\n    count = yield\n\n    while True:\n        if count <= 0:\n            count = yield count\n        count -= 1\n        time.sleep(1)\n        print('consumer consume 1 count. count = {}'.format(count))\n\ndef producer(count):\n    gen = consumer()\n    next(gen)\n    gen.send(count)\n\n    while True:\n        count += 5\n        print('producer produce 5 count. count = {}'.format(count))\n        # 将count赋值给yield关键字，给consumer去消费，count的返回值永远是0\n        # 因此，consumer消费了count，只要count=0，那么就会将数据yield出来给producer，producer再次给count赋值5，再将count传递到consumer的yield关键字\n        count = gen.send(count)\n\nif __name__ == '__main__':\n    producer(0)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("ul",[a("li",[n._v("核心思想")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\t在producer中，gen.send(count)会将数据传递到consumer的yield关键字，给yield关键字赋值，consumer将count值消费后，然后count=0，那么就会yield count，count=0又会返回到producer，在producer中给count的值加上5，再赋值给consumer的yield关键字。\n\t整个过程中，producer生产者是整个模型的调度器，决定了consumer的消费过程。consumer中count只要为0，那么会基于yield关键字，将count扔给producer，并且consumer此时主动让出CPU时间片\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("ul",[a("li",[n._v("协程和多线程的区别")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1：多线程是抢占式运行\n2：协程是协作式运行\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h2",{attrs:{id:"二-协程调度器-深入理解线程调度基本原理和调度方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-协程调度器-深入理解线程调度基本原理和调度方式"}},[n._v("#")]),n._v(" 二：协程调度器（"),a("code",[n._v("深入理解线程调度基本原理和调度方式")]),n._v("）")]),n._v(" "),a("h3",{attrs:{id:"一-协程调度测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-协程调度测试"}},[n._v("#")]),n._v(" (一)：协程调度测试")]),n._v(" "),a("ul",[a("li",[n._v("项目结构如下")])]),n._v(" "),a("p",[a("img",{attrs:{src:e(968),alt:"Alt text"}})]),n._v(" "),a("ul",[a("li",[a("p",[n._v("loop.py内容如下（loop.py作为协程的调度器，YieldLoop有两个类属性，current和runables，runables是一个线程队列，current是一个单例属性。instance类方法返回的是YieldLoop实例对象的单例）")]),n._v(" "),a("ul",[a("li",[n._v("**add_coroutine方法：**将协程对象添加到队列中")]),n._v(" "),a("li",[n._v("**run_until_complete方法：**不断从队列中获取协程对象，然后交由run_coroutine方法处理")]),n._v(" "),a("li",[n._v("**run_coroutine方法：**调用协程对象的send方法")])])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("from collections import deque\nfrom .wrapper import CoroutineWrapper\n\n# 生成器调度器\nclass YieldLoop:\n\n    current = None\n    runables = deque()\n\n    # 单例模式，类是一个单例(这种单例的写法需要留意一下)\n    @classmethod\n    def instance(cls):\n        if not YieldLoop.current:\n            YieldLoop.current = YieldLoop()\n        return YieldLoop.current\n\n    # 添加coroutine\n    def add_coroutine(self, coroutine):\n        assert isinstance(coroutine, CoroutineWrapper), 'coroutine is Not CoroutineWrapper instance'\n        self.runables.append(coroutine)\n\n    # 执行coroutine\n    def run_coroutine(self, coroutine):\n        try:\n            coroutine.send(coroutine.context)\n        except StopIteration as e:\n            print('coroutine {} stop'.format(coroutine))\n\n    # 从队列中取出协程，进行调度，然后执行\n    def run_until_complete(self):\n        # 这里的循环是控制协程不断调度的核心\n        while YieldLoop.runables:\n            # 从队列的左边取出任务\n            coroutine = YieldLoop.runables.popleft()\n            self.run_coroutine(coroutine)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br")])]),a("ul",[a("li",[n._v("wrapper.py模块内容如下(CoroutineWrapper类有两个功能，第一个是将生成器和协程调度器封装到一个类中，第二个是重写了生成器的send方法，)")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("class CoroutineWrapper:\n\n    def __init__(self, loop, gen):\n        self.loop = loop\n        self.gen = gen\n        self.context = None\n\n    # 重写生成器的send方法\n    def send(self, val):\n        # 调用生成器的send方法\n        val = self.gen.send(val)\n        # 将结果保存到context中\n        self.context = val\n        # 再将生成器添加到队列中\n        self.loop.add_coroutine(self)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("ul",[a("li",[n._v("decorator.py模块(主要是将生成器"),a("code",[n._v("转变")]),n._v("为协程。这个转变在于将"),a("code",[n._v("调度器")]),n._v("和"),a("code",[n._v("生成器对象捆绑到一起")]),n._v("，这样才能使得调用调度器的方法的时候，生成器能够一直运行)")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("import inspect\nfrom .wrapper import CoroutineWrapper\nfrom .loop import YieldLoop\nimport functools\n\n# 协程装饰器(将普通的generator转变为协程对象)\ndef coroutine_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        # 将生成器封装为协程适配器\n        gen = func(*args, **kwargs)\n        # 判断gen是否是生成器对象\n        if inspect.isgenerator(gen):\n            # 将生成器对象转变为协程对象\n            coroutine = CoroutineWrapper(YieldLoop.instance(), gen)\n            return coroutine\n        else:\n            raise RuntimeError('gen is not generator')\n    return wrapper\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("ul",[a("li",[a("p",[n._v("coroutine_example_01.py(主要是测试一个生成器函数，将这个生成器函数与调度器捆绑在一起，让这个生成器函数一直运行，直到结束)")])]),n._v(" "),a("li",[a("p",[n._v("这里有个注意点就是，第一次调用生成器的send方法的时候，是从loop.py模块的"),a("code",[n._v("coroutine.send(coroutine.context)")]),n._v("开始的，此时的coroutine.context为"),a("code",[n._v("None")]),n._v("，然后再调用wrapper.py模块的send方法，再调用"),a("code",[n._v("val = self.gen.send(val)")]),n._v("，此时是第一次激活生成器对象，那么会从test1( )生成器的"),a("code",[n._v("sum=0")]),n._v("这行代码开始。以后再次调用"),a("code",[n._v("val = self.gen.send(val)")]),n._v("代码将会从"),a("code",[n._v("sum += yield i")]),n._v("开始，将参数val的值赋值给yield，然后计算"),a("code",[n._v("sum += yield")]),n._v(", 再进入到"),a("code",[n._v("for i in range(1, 10001):")]),n._v("循环体部分")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("from coroutine_scheduler.decorator import coroutine_decorator\nfrom coroutine_scheduler.loop import  YieldLoop\n\ndef test1():\n    sum = 0\n    for i in range(1, 10001):\n        if i % 2 == 1:\n            sum += yield i\n    print('sum = {}'.format(sum))\n\n# 添加协程到队列\nYieldLoop.instance().add_coroutine(test1())\n# 执行协程\nYieldLoop.instance().run_until_complete()\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("ul",[a("li",[n._v("coroutine_example_02.py(主要是构建一个生产和消费模型，生产者和消费者都是一个生成器函数，先将生产者和消费者加入到队列中，然后基于loop中的"),a("code",[n._v("while")]),n._v("循环，从队列中取出生成器执行send方法，触发生成器不断运行)")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("from collections import deque\nimport random\nimport string\nimport time\nfrom coroutine_scheduler.decorator import coroutine_decorator\nfrom coroutine_scheduler.loop import YieldLoop\n\ndef producer(q: deque):\n    while True:\n        # 给good取名字\n        good = ''.join(random.sample(string.ascii_letters + string.digits, 8))\n        # 添加到队列\n        q.append(good)\n        # 计算队列的长度\n        cnt = len(q)\n        print('producer produce good. cnt = {}'.format(cnt))\n        # 如果队列中有任务，那么使用yield让出CPU，让consumer消费\n        if cnt > 0:\n            yield\n\ndef consumer(q: deque):\n    while True:\n        # 如果长度小于0那么直接让出CPU，让producer生产\n        while len(q) <= 0:\n            print('q is empty')\n            yield\n        # 从队列中取出数据消费\n        good = q.popleft()\n        print('consume good = {}, cnt = {}'.format(good, len(q)))\n        time.sleep(1)\n\n# 创建队列\nq = deque()\n\n# 添加生成器到队列\nYieldLoop.instance().add_coroutine(producer(q))\nYieldLoop.instance().add_coroutine(producer(q))\nYieldLoop.instance().add_coroutine(producer(q))\nYieldLoop.instance().add_coroutine(producer(q))\nYieldLoop.instance().add_coroutine(producer(q))\nYieldLoop.instance().add_coroutine(consumer(q))\n# 执行协程\nYieldLoop.instance().run_until_complete()\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports},966:function(n,s,e){n.exports=e.p+"assets/img/2021-02-1511.34.16.1d0eae32.png"},967:function(n,s,e){n.exports=e.p+"assets/img/2021-02-1511.44.13.b64c6a9e.png"},968:function(n,s,e){n.exports=e.p+"assets/img/2021-02-171.35.04.18b3fac4.png"}}]);