(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{1307:function(s,e,a){s.exports=a.p+"assets/img/2019-09-279.58.29.90041d2b.png"},1308:function(s,e,a){s.exports=a.p+"assets/img/2019-09-2711.12.24.45dbd590.png"},1309:function(s,e,a){s.exports=a.p+"assets/img/2019-09-2711.24.03.9d7492ed.png"},1310:function(s,e,a){s.exports=a.p+"assets/img/2019-09-283.31.34.e9c8d2a0.png"},1311:function(s,e,a){s.exports=a.p+"assets/img/2019-09-283.33.26.da8110f9.png"},1312:function(s,e,a){s.exports=a.p+"assets/img/2019-09-283.34.40.31ae344b.png"},1313:function(s,e,a){s.exports=a.p+"assets/img/2019-09-285.18.30.201e914e.png"},2442:function(s,e,a){"use strict";a.r(e);var n=a(9),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"一-app目录结构调整"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-app目录结构调整"}},[s._v("#")]),s._v(" 一：APP目录结构调整")]),s._v(" "),n("ul",[n("li",[s._v("将APP中的各个模块改为包，包下处理不同类型的APP, 以goods APP为例")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t每次开发之前最后先将目录结果调整，下面的项目结构调整思想来自于jumpserver源码，目的是在开发过程中，可以将所有的业务代码根据包分离，在开发过程中，思路清晰\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:a(1307),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("在每一个包内的"),n("code",[s._v("__init__.py")]),s._v("中将包内的其他的类导入，如果其他地方调用了包内的类，那么直接可以基于包就可以导入，不需要到模块，例如在goods这个APP的models包的"),n("code",[s._v("__init__.py")]),s._v("文件中，添加如下导入")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from .ad import *\nfrom .banner import *\nfrom .brand import *\nfrom .category import *\nfrom .good import *\nfrom .goods_image import *\nfrom .hot_word import *\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("那么下次在其他包中导入models的类，有两种方式")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("方式一：\n\tfrom ..models.good import Goods\n\n方式二：（建议使用这一种，但是必须保证不同模块下类的名称不一样）\n\tfrom ..models import Goods\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"二-类别列表api开发"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-类别列表api开发"}},[s._v("#")]),s._v(" 二：类别列表API开发")]),s._v(" "),n("ul",[n("li",[s._v("在goods APP的serializers包下面创建"),n("code",[s._v("category.py")]),s._v("模块, 对GoodsCategory这个model进行序列化，由于这个GoodsCategory Model是根据category_type这个字段来区分是哪一级的类别，在GoodsCategory这个Model中，parent_category是外键，指向了自己，但是在这个外键中设置了一个related_name=sub_cat, 因此对GoodsCategory这个Model进行序列化的时候，可以借助这个sub_cat，在一级类别中嵌套二级类别，二级类别中嵌套三级类别， 具体做法如下")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from rest_framework import serializers\nfrom ..models.category import GoodsCategory\n\nclass GoodsCategorySerializer3(serializers.ModelSerializer):\n    '''\n    商品三级类别序列化，代表：羊肉\n    '''\n\n    class Meta:\n        model = GoodsCategory\n        fields = \"__all__\"\n\n\nclass GoodsCategorySerializer2(serializers.ModelSerializer):\n    '''\n    商品二级类别序列化，代表：精品肉类\n    '''\n    sub_cat = GoodsCategorySerializer3(many=True)\n    class Meta:\n        model = GoodsCategory\n        fields = \"__all__\"\n\n\nclass GoodsCategorySerializer1(serializers.ModelSerializer):\n    '''\n    商品一级类别序列化, 代表：生鲜食品\n    '''\n    # 这里一定要注意，因为一级类别低下有多个二级类别，因此many=True必须加上\n    sub_cat = GoodsCategorySerializer2(many=True)\n    class Meta:\n        model = GoodsCategory\n        fields = \"__all__\"\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("ul",[n("li",[s._v("在goods APP的django_rest_view包下，创建"),n("code",[s._v("category.py")]),s._v("模块，基于ListModelMixin和GenericViewSet创建自定义View，queryset为一级类别，serializer_class为一级类别的GoodsCategorySerializer1类")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from rest_framework import mixins,viewsets\nfrom ..models.category import GoodsCategory\nfrom ..serializers.category import GoodsCategorySerializer1\n\n\nclass CategoryViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n    '''\n    list:\n        商品分类类别数据\n    '''\n\n    queryset = GoodsCategory.objects.filter(category_type=1)\n    serializer_class = GoodsCategorySerializer1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("ul",[n("li",[s._v("配置urls.py文件，将categorys的请求路由配置到router中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from goods.django_rest_view.category import CategoryViewSet\n\nrouter.register(r'categorys', CategoryViewSet, base_name='categorys')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("访问categorys，获取category的列表页，如下效果")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1308),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v('如果需要获取一级类别的详情，例如取"生鲜食品"这个一节类别下的所有的数据，就需要再继承一个RetrieveModelMixin')])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 添加mixins.RetrieveModelMixin，获取具体的一个实例\nclass CategoryViewSet(mixins.ListModelMixin, mixins.RetrieveModelMixin,viewsets.GenericViewSet):\n    '''\n    list:\n        商品分类类别数据\n    '''\n\n    queryset = GoodsCategory.objects.filter(category_type=1)\n    serializer_class = GoodsCategorySerializer1\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("那么获取一个一级类别的所有数据，例如id为24为酒水饮料这个一级类别，前端请求为：http://127.0.0.1:8000/categorys/24/?format=json， 后面直接加上一个数据库中的ID即可， 效果如下")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1309),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"三-解决服务器跨越的问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-解决服务器跨越的问题"}},[s._v("#")]),s._v(" 三：解决服务器跨越的问题")]),s._v(" "),n("ul",[n("li",[s._v("安装 django-cors-headers")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pip install django-cors-headers\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("在settings文件中添加")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("INSTALLED_APPS = [\n    ...\n    'corsheaders',\n    ...\n]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("在settings文件中的MIDDLEWARE添加, 放在所有MIDDLEWARE的最前面")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("在settings文件中设置运行跨域, 添加")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("CORS_ORIGIN_ALLOW_ALL = True\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("在前端项目中，src/api/api.js文件中，将host修改")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 将axios的请求路径设置为后台的Django服务器\nlet host = 'http://127.0.0.1:8000';\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("此时会发现类别数据可以显示")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1310),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("如果要将一级类别数据显示到tab栏，那么就需要在xadmin后台设置这个一级类别的is_tab属性, 添加到导航栏中")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1311),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("这样一级类别就添加到导航栏中了")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1312),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"四-点击导航栏中的类别信息-显示类别的详情页面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-点击导航栏中的类别信息-显示类别的详情页面"}},[s._v("#")]),s._v(" 四：点击导航栏中的类别信息，显示类别的详情页面")]),s._v(" "),n("ul",[n("li",[s._v("为了让前端的页面与后台的页面分页的字段一致，那么需要修改goods/django_rest_view/goods.py/StandardResultsSetPagination类，")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 设置查询参数为page\npage_query_param = 'page'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("为了点击导航栏的一级类别，显示属于一级类别下的所有商品，那么就需要重新修改goods/filters/good.py中的GoodsFilter，添加一个过滤规则")]),s._v(" "),n("li",[n("code",[s._v("from django.db.models import Q")]),s._v("目的是实现"),n("code",[s._v("或者")]),s._v("过滤关系")]),s._v(" "),n("li")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from django_filters import rest_framework as filters, NumberFilter, CharFilter\nfrom ..models.good import Goods\nfrom django.db.models import Q\n\nclass GoodsFilter(filters.FilterSet):\n    # 初始化过滤对象，对goods的价格小于等于或大于等于过滤\n    min_price = NumberFilter(field_name='shop_price', lookup_expr='gte')\n    max_price = NumberFilter(field_name='shop_price', lookup_expr='lte')\n    # SQL的搜索过滤\n    name = CharFilter(field_name='name', lookup_expr='icontains')\n\n    # 根据一级类别的id过滤出属于一级类别的所有的商品\n    # NumberFilter指定是对字段的数值进行过滤\n    top_category = NumberFilter(method='top_catetory_filter')\n\n    def top_catetory_filter(self, queryset, name, value):\n        # 这里的queryset返回的是Goods的实例列表，过滤商品类别等于value的实例或者商品类别的父类别等于value的实例或者商品类别的爷爷类别等于value的实例\n        # 这里category、parent_category都是外键，那么要获取外键的ID，直接在后面加上_id即可获取\n        # 这里主要逻辑的实现是基于Goods这个Model有一个外键category属于GoodCategory这个Model, 这样就可以使用获取一个商品后，找到其一级类别，最后根据过滤规则判断是否这个一级类别的值低于value， 如果等于，那么这个商品将会保留下来\n        queryset = queryset.filter(Q(category_id = value) | \\\n                                   Q(category__parent_category_id = value) | \\\n                                   Q(category__parent_category__parent_category_id = value))\n        return queryset\n\n\n    class Meta:\n        model = Goods\n        fields = ['min_price', 'max_price', 'name']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])]),n("ul",[n("li",[s._v("为了与前端vue的字段请求参数一致，需改GoodsFilter价格的过滤字段")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("min_price = NumberFilter(field_name='shop_price', lookup_expr='gte')\nmax_price = NumberFilter(field_name='shop_price', lookup_expr='lte')\n\nfields = ['min_price', 'max_price', 'name']\n\n\n修改为：\npricemin = NumberFilter(field_name='shop_price', lookup_expr='gte')\npricemax = NumberFilter(field_name='shop_price', lookup_expr='lte')\n\nfields = ['pricemin', 'pricemax', 'name']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("在前端vue分页的时候，由于每一行可以显示4个商品，因此在StandardResultsSetPagination类中将page_size改为12，一页显示12个商品")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("page_size = 12\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("修改GoodsListViewSet中的排序字段, 排序字段为 "),n("code",[s._v("sold_num")]),s._v("、"),n("code",[s._v("shop_price")]),s._v("两个字段, 当点击页面中的销量和价格的时候，就可以对商品进行排序")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("ordering_fields = ('sold_num','shop_price')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:a(1313),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("小结")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("首页导航栏中，点击一级类别商品，后跳转到商品列表页完成的功能有：\n\t①：显示二级和三级的类别完毕\n\t②：显示属于被点击的一级类别的商品列表和分页功能完毕\n\t③：对价格过滤、销量和价格排序完毕\n\t\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);