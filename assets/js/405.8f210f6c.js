(window.webpackJsonp=window.webpackJsonp||[]).push([[405],{2308:function(s,n,a){"use strict";a.r(n);var e=a(9),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"线程同步与并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程同步与并发"}},[s._v("#")]),s._v(" 线程同步与并发")]),s._v(" "),a("h3",{attrs:{id:"一-event事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-event事件"}},[s._v("#")]),s._v(" (一) Event事件")]),s._v(" "),a("ul",[a("li",[s._v("线程同步")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("线程之间的通信，有很多方式，包括\n    1：Event 事件\n    2：Critical Section 临界区，一般是通过加锁实现\n    3：Semaphone 信号量等\n\nEvent 事件是通过打flag标记实现线程之间的通信\n哪个线程wait，哪个线程就等待event变为True\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("Event实例对象的对象方法：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：wait(self, timeout=None)：timeout为设置等待的时长，如果超过时长，不再等待，直接向下执行，如果timeout没有指定，那么一直等待。等待时候阻塞的， 如果超时，返回值是False\n\n2：set(): 设置flag为True，那么wait等待的线程可以向下执行\n\n3：clear()：设置标记为Flase, 那么wait等待的线程再次等待\n\n4：is_set(): 判断event的flag是否为True\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("示例：1")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from threading import Thread, Event\nimport time\n\ndef teacher(event: Event):\n    print('I am teacher , waiting for your homework')\n    event.wait()\n    print(\"I am teacher, already obtaining student's homework \")\n\ndef student(event: Event):\n    finished_homework = []\n    while len(finished_homework) < 10:\n        time.sleep(1)\n        print('I am student, finished one homework')\n        finished_homework.append(1)\n    else:\n        print('student finish homework')\n        event.set()\n\nif __name__ == '__main__':\n\n    event = Event()\n    Thread(target=student, args=(event,)).start()\n    Thread(target=teacher, args=(event,)).start()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("ul",[a("li",[s._v("示例2：hello定时器实现")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from threading import Thread, Event\n\n\ndef sayHello(event: Event,  interval: int):\n    while not event.wait(timeout=interval):  # 通过返回值为False, 执行循环体\n        print('hello')\n\n\nif __name__ == '__main__':\n    Thread(target=sayHello, args=(Event(), 5)).start()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ul",[a("li",[s._v("Agent上报数据，开启多个线程，经典模型(一个线程有异常，那么让所有的线程停止)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from threading import Thread\nfrom threading import Event\nimport time\n\n\n\ndef send_heart_beat(event: Event):\n    print(event.is_set()) # False\n\n    while not event.wait(2):\n        print('hello')\n\n    print('{} 线程停止'.format(event.is_set()))\n\ndef send_heart_beat1(event: Event):\n    print(event.is_set()) # False\n\n    while not event.wait(2):\n        print('你好')\n\n    print('{} 1线程停止'.format(event.is_set()))\n\ndef send_heart_beat2(event: Event):\n    print(event.is_set()) # False\n\n    time.sleep(5)\n    try:\n        raise Exception\n    except Exception:\n        event.set()\n\n    print('{} 2触发了事件'.format(event.is_set()))\n\n\nout_event = Event()\nThread(target=send_heart_beat, args=(out_event, ), name='send_heart_beat').start()\nThread(target=send_heart_beat1, args=(out_event, ), name='send_heart_beat1').start()\nThread(target=send_heart_beat2, args=(out_event, ), name='send_heart_beat2').start()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h3",{attrs:{id:"二-线程锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-线程锁"}},[s._v("#")]),s._v(" (二) 线程锁")]),s._v(" "),a("ul",[a("li",[s._v("概念")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：锁是解决临界区资源的问题，保证每一个线程访问临界资源的时候有全部的权利\n一旦某个线程获得锁， 其它试图获取锁的线程将被阻塞\n\n2：acquire(blocking=True,timeout=-1)  加锁。默认True阻塞，阻塞可以设置超时时间。非阻塞时成功获取锁返回True，否则返回False。\n\n3：当blocking设置为False时，不阻塞，同一个锁对象，其它线程可以重用，但最后都必须释放。\n如果设置为True(默认True)，其它试图调用锁的线程将阻塞，并立即返回False。阻塞可以设置超时时间\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("示例1：学生完成作业的总数最后为1009， 出现了临界资源争抢的问题")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import time\nfrom threading import Thread\n\nhomework_list = []\n\ndef student(number):\n    while len(homework_list) < number:\n        time.sleep(0.001)\n        homework_list.append(1)\n\n    print(len(homework_list))\n\n\nif __name__ == '__main__':\n    for i in range(10):\n        Thread(target=student, args=(1000, )).start()\n\n    time.sleep(3)\n    print('完成作业的总数为： {}'.format(len(homework_list)))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("ul",[a("li",[s._v("示例2：对示例1的修正，使用锁机制")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import time\nimport threading\nfrom threading import Thread, Lock\n\nhomework_list = []\n# 全局阻塞锁\nlock = Lock()\n\ndef student(number):\n\n    while True:\n        lock.acquire()  # 一定是在获取临界资源之前加锁\n        if len(homework_list) >= number:\n            break\n        time.sleep(0.001)\n        homework_list.append(1)\n        lock.release()   # 完成任务的时候释放锁，让其他的线程获取到临界资源\n\n        print('current_thread={}, homework_list={}'.format(threading.current_thread().name, len(homework_list)))\n\n\n\nif __name__ == '__main__':\n    for i in range(10):\n        Thread(target=student, name='student {}'.format(i), args=(1000, )).start()\n\n    time.sleep(3)\n    print('完成作业的总数为： {}'.format(len(homework_list)))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("ul",[a("li",[s._v("优雅的使用锁(with 语句)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import time\nimport threading\nfrom threading import Thread, Lock\n\nhomework_list = []\n# 全局阻塞锁\nlock = Lock()\n\ndef student(number):\n\n    while True:\n        with lock:\n            if len(homework_list) >= number:\n                break\n            time.sleep(0.001)\n            homework_list.append(1)\n\n\n        print('current_thread={}, homework_list={}'.format(threading.current_thread().name, len(homework_list)))\n\n\n\nif __name__ == '__main__':\n    for i in range(10):\n        Thread(target=student, name='student {}'.format(i), args=(1000, )).start()\n\n    time.sleep(3)\n    print('完成作业的总数为： {}'.format(len(homework_list)))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h3",{attrs:{id:"三-线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-线程池"}},[s._v("#")]),s._v(" (三) 线程池")]),s._v(" "),a("ul",[a("li",[s._v("从使用经验上来看，线程池执行器和进程池执行器使用的应用场景在于能够执行完毕的任务。如果是循环任务例如心跳包的发送，最好还是使用原生的threading 或 multiprocess模块")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("pool实例对象有两个非常实用的方法\n    1：submit(self, fn, *args, **kwargs)：用于提交单个任务\n    2：map(self, fn, *iterables, timeout=None, chunksize=1)：类似高阶函数map，可以提交任务，且传递一个可迭代对象，返回任务处理迭代对象的结果\n\nfrom concurrent.futures import ThreadPoolExecutor\nimport requests\n\ndef fetch_url(url):\n    result = requests.get(url=url, )\n    return result.text\n\n# 创建10个线程队列的线程池\npool = ThreadPoolExecutor(10)\n# 获取任务返回对象\na = pool.submit(fetch_url, 'http://www.baidu.com')\nb = pool.submit(fetch_url, 'http://www.baidu.com')\n\n# 取出返回的结果\nx = a.result()\ny = b.result()\n\nprint(x)\nprint(y)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"四-全局解释器锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-全局解释器锁"}},[s._v("#")]),s._v(" (四) 全局解释器锁")]),s._v(" "),a("ul",[a("li",[s._v("概念")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1: 尽管Python完全支持多线程编程， 但是解释器的C语言实现部分在完全并行执行时并不是线程安全的。 实际上，解释器被一个全局解释器锁保护着，它确保任何时候都只有一个Python线程执行。\n\n2: GIL最大的问题就是Python的多线程程序并不能利用多核CPU的优势, 就是因为GIL的存在，使得一个进程的多个线程在执行任务的时候，一个CPU时间片内，只有一个线程能够调度到CPU上运行。\n\n3：因此CPU密集型的程序一般不会使用Python实现，可以选择Java，GO等语言\n\n4：但是对于非CPU密集型程序，例如IO密集型程序，多数时间都是对网络IO的等待，因此Python的多线程完全可以胜任\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("对于全局解释器锁的解决方案")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1: 使用multiprocessing创建进程池对象，实现多进程并发，这样就能够使用多CPU计算资源\n\n2：使用C语言扩展，将计算密集型任务转移给C语言实现去处理，在C代码实现部分可以释放GIL\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("多线程和多进程解决方案")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("如果你要同时使用多线程和多进程，最好在程序启动时，创建任何线程之前，先创建一个单例的进程池。 然后线程使用同样的进程池来进行它们的计算密集型工作，这样类似于线程调用了进程，完成了CPU密集型任务，进程也利用了多CPU的优势\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("为什么有了GIL，线程在并发执行任务的时候，访问共享数据的时候，还是需要加锁呢？")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1: GIL是全局解释器锁，GIL保证了在同一时间片下总有一个Python(CPython实现)线程在执行。所以即使是多进程，而是顺序执行的。这样多线程并发就变得没有意义\n\n2: 线程在GIL下是有执行的时间片的在时间片内线程如果没有成功对数据进行操作，那么等到下一个时间片时，数据已经被别的线程修改了，那么得到的数据就不是想要的数据了\n\n3: 线程的同步和互斥解决的是线程间数据的访问正确性问题，而GIL是实现当前Python解释器下只有一个线程在执行。两个是不同的概念\n\n4：Python的线程在GIL的控制之下，在线程之间，对整个Python解释器，对Python提供C API的访问，都是互斥的，这可以看做是Python内核级别的互斥机制。但是这种互斥是用户无法控制的，因此我们还需要一种可以控制的互斥机制--用户级互斥。内核通过GIL实现的互斥保护了内核的共享资源，同样用户级别的互斥保护了用户程序中的共享资源\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"五-threading的local类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-threading的local类"}},[s._v("#")]),s._v(" (五) threading的local类")]),s._v(" "),a("ul",[a("li",[s._v("概念")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tPython提供了 threading.local 类，将这个类实例化得到一个全局对象，但是不同的线程使用这个对象存储的数据其它线程不可见(本质上就是不同的线程使用这个对象时为其创建一个独立的字典)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import threading\nimport time\n\n\n\na = threading.local()\n\n\ndef worker():\n    a.x = 0\n    for i in range(100):\n        time.sleep(0.0001)\n        a.x += 1\n    print(threading.current_thread(), a.x)\n\n\nfor i in range(10):\n    threading.Thread(target=worker).start()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);