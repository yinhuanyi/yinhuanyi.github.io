(window.webpackJsonp=window.webpackJsonp||[]).push([[568],{2592:function(a,s,n){"use strict";n.r(s);var e=n(9),t=Object(e.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h2",{attrs:{id:"一-介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-介绍"}},[a._v("#")]),a._v(" 一：介绍")]),a._v(" "),n("h3",{attrs:{id:"一-api介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-api介绍"}},[a._v("#")]),a._v(" (一)API介绍")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("As of Spark 2.0, the RDD-based APIs in the spark.mllib package have entered maintenance mode. The primary Machine Learning API for Spark is now the DataFrame-based API in the spark.ml package.\n\nRDD-based API目前已经处于维护阶段，目前使用的是spark.ml包中的DataFrame-based API\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h2",{attrs:{id:"二-特征提取算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-特征提取算法"}},[a._v("#")]),a._v(" 二：特征提取算法")]),a._v(" "),n("h3",{attrs:{id:"一-tf-idf算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-tf-idf算法"}},[a._v("#")]),a._v(" (一)TF-IDF算法")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("TF-IDF: 词频-逆向文件频率，是一种特征向量化方法，可以将一个文档中的词语在语料库中的主要程度, 目的就是将词语进行特征化，数字化\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("ul",[n("li",[a._v("Spark代码")])]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('package com.spark.mllib\n\nimport org.apache.spark.ml.feature.{HashingTF, IDF, Tokenizer}\nimport org.apache.spark.sql.SparkSession\n\n/**\n  * Description:    \n  * Author:         Robby\n  * CreateDate:     2019-09-05 22:17\n  * Version:        1.0.0\n  */\n\n// 创建一个case class，定义属性作为特征的列名\ncase class Record(\n                     id: String,\n                     companyname: String,\n                     direction: String,\n                     productinfo: String\n                 )\n\n\nobject TFIDFTestFromFile extends App {\n    // 构建查询入口\n    val spark = SparkSession\n        .builder\n        .master("local[2]")\n        .appName("HDFSTest")\n        .getOrCreate()\n\n\t// 允许类型转换\n    import spark.implicits._\n\n    // 从文件中加载数据\n    val rddData = spark.sparkContext.textFile("file:///Users/yinhuanyi/Scala_Project/sparktest01/src/main/resources/worldcount.txt")\n\n\t// {}比()里面可以写更多的逻辑\n    val dataFrame = rddData.map { x =>\n        val data = x.split(",")\n        Record(data(0), data(1), data(2), data(3))\n    }.toDF().cache()\n    /**\n      * +------+-----------+---------+--------------------+\n      * |    id|companyname|direction|         productinfo|\n      * +------+-----------+---------+--------------------+\n      * |  java|     python|    scala|Robby male runnin...|\n      * |python|      scala|    scala|Mary femal swimmi...|\n      * |python|     python|  pythonm|Peter male readin...|\n      * |  java|     python|    scala|Niubi female walk...|\n      * |django|     django|   python|Lisa female jumpi...|\n      * +------+-----------+---------+--------------------+*/\n\n    // 将 dataFrame 的productinfo这一列转换为productwords，进行切词\n    val wordsData = new Tokenizer().setInputCol("productinfo").setOutputCol("productwords").transform(dataFrame)\n    /**\n      * +------+-----------+---------+--------------------+--------------------+\n      * |    id|companyname|direction|         productinfo|        productwords|\n      * +------+-----------+---------+--------------------+--------------------+\n      * |  java|     python|    scala|Robby male runnin...|[robby, male, run...|\n      * |python|      scala|    scala|Mary femal swimmi...|[mary, femal, swi...|\n      * |python|     python|  pythonm|Peter male readin...|[peter, male, rea...|\n      * |  java|     python|    scala|Niubi female walk...|[niubi, female, w...|\n      * |django|     django|   python|Lisa female jumpi...|[lisa, female, ju...|\n      * +------+-----------+---------+--------------------+--------------------+*/\n\n    // 再将productwords这一列转换为列表\n    val tfData = new HashingTF().setInputCol("productwords").setOutputCol("productFeatures").setNumFeatures(20).transform(wordsData)\n    /**\n      * +------+-----------+---------+--------------------+--------------------+--------------------+\n      * |    id|companyname|direction|         productinfo|        productwords|     productFeatures|\n      * +------+-----------+---------+--------------------+--------------------+--------------------+\n      * |  java|     python|    scala|Robby male runnin...|[robby, male, run...|(20,[3,5,8,13],[1...|\n      * |python|      scala|    scala|Mary femal swimmi...|[mary, femal, swi...|(20,[6,11,16,19],...|\n      * |python|     python|  pythonm|Peter male readin...|[peter, male, rea...|(20,[8,13,15,17],...|\n      * |  java|     python|    scala|Niubi female walk...|[niubi, female, w...|(20,[6,8,18],[1.0...|\n      * |django|     django|   python|Lisa female jumpi...|[lisa, female, ju...|(20,[4,6],[2.0,2.0])|\n      * +------+-----------+---------+--------------------+--------------------+--------------------+*/\n\n    // 训练模型，将模型存储到文件中，方便加载\n    val idModel = new IDF().setInputCol("productFeatures").setOutputCol("features").fit(tfData)\n    idModel.save("file:///Users/yinhuanyi/Scala_Project/sparktest01/src/main/resources/tfModel")\n    \n    // 模型数据进行转换\n    val idData = idModel.transform(tfData)\n    idData.select("id", "companyname", "direction", "features").show()\n    /**\n      * +------+-----------+---------+--------------------+\n      * |    id|companyname|direction|            features|\n      * +------+-----------+---------+--------------------+\n      * |  java|     python|    scala|(20,[3,5,8,13],[1...|\n      * |python|      scala|    scala|(20,[6,11,16,19],...|\n      * |python|     python|  pythonm|(20,[8,13,15,17],...|\n      * |  java|     python|    scala|(20,[6,8,18],[0.4...|\n      * |django|     django|   python|(20,[4,6],[2.1972...|\n      * +------+-----------+---------+--------------------+*/\n}\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br"),n("span",{staticClass:"line-number"},[a._v("46")]),n("br"),n("span",{staticClass:"line-number"},[a._v("47")]),n("br"),n("span",{staticClass:"line-number"},[a._v("48")]),n("br"),n("span",{staticClass:"line-number"},[a._v("49")]),n("br"),n("span",{staticClass:"line-number"},[a._v("50")]),n("br"),n("span",{staticClass:"line-number"},[a._v("51")]),n("br"),n("span",{staticClass:"line-number"},[a._v("52")]),n("br"),n("span",{staticClass:"line-number"},[a._v("53")]),n("br"),n("span",{staticClass:"line-number"},[a._v("54")]),n("br"),n("span",{staticClass:"line-number"},[a._v("55")]),n("br"),n("span",{staticClass:"line-number"},[a._v("56")]),n("br"),n("span",{staticClass:"line-number"},[a._v("57")]),n("br"),n("span",{staticClass:"line-number"},[a._v("58")]),n("br"),n("span",{staticClass:"line-number"},[a._v("59")]),n("br"),n("span",{staticClass:"line-number"},[a._v("60")]),n("br"),n("span",{staticClass:"line-number"},[a._v("61")]),n("br"),n("span",{staticClass:"line-number"},[a._v("62")]),n("br"),n("span",{staticClass:"line-number"},[a._v("63")]),n("br"),n("span",{staticClass:"line-number"},[a._v("64")]),n("br"),n("span",{staticClass:"line-number"},[a._v("65")]),n("br"),n("span",{staticClass:"line-number"},[a._v("66")]),n("br"),n("span",{staticClass:"line-number"},[a._v("67")]),n("br"),n("span",{staticClass:"line-number"},[a._v("68")]),n("br"),n("span",{staticClass:"line-number"},[a._v("69")]),n("br"),n("span",{staticClass:"line-number"},[a._v("70")]),n("br"),n("span",{staticClass:"line-number"},[a._v("71")]),n("br"),n("span",{staticClass:"line-number"},[a._v("72")]),n("br"),n("span",{staticClass:"line-number"},[a._v("73")]),n("br"),n("span",{staticClass:"line-number"},[a._v("74")]),n("br"),n("span",{staticClass:"line-number"},[a._v("75")]),n("br"),n("span",{staticClass:"line-number"},[a._v("76")]),n("br"),n("span",{staticClass:"line-number"},[a._v("77")]),n("br"),n("span",{staticClass:"line-number"},[a._v("78")]),n("br"),n("span",{staticClass:"line-number"},[a._v("79")]),n("br"),n("span",{staticClass:"line-number"},[a._v("80")]),n("br"),n("span",{staticClass:"line-number"},[a._v("81")]),n("br"),n("span",{staticClass:"line-number"},[a._v("82")]),n("br"),n("span",{staticClass:"line-number"},[a._v("83")]),n("br"),n("span",{staticClass:"line-number"},[a._v("84")]),n("br"),n("span",{staticClass:"line-number"},[a._v("85")]),n("br"),n("span",{staticClass:"line-number"},[a._v("86")]),n("br"),n("span",{staticClass:"line-number"},[a._v("87")]),n("br"),n("span",{staticClass:"line-number"},[a._v("88")]),n("br"),n("span",{staticClass:"line-number"},[a._v("89")]),n("br"),n("span",{staticClass:"line-number"},[a._v("90")]),n("br"),n("span",{staticClass:"line-number"},[a._v("91")]),n("br"),n("span",{staticClass:"line-number"},[a._v("92")]),n("br"),n("span",{staticClass:"line-number"},[a._v("93")]),n("br"),n("span",{staticClass:"line-number"},[a._v("94")]),n("br"),n("span",{staticClass:"line-number"},[a._v("95")]),n("br")])]),n("h2",{attrs:{id:"三-聚类算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-聚类算法"}},[a._v("#")]),a._v(" 三：聚类算法")]),a._v(" "),n("h3",{attrs:{id:"一-kmeans算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-kmeans算法"}},[a._v("#")]),a._v(" (一) kmeans算法")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v('package com.spark.mllib\n\n\nimport org.apache.spark.ml.clustering.KMeans\nimport org.apache.spark.ml.feature.{HashingTF, IDF, Tokenizer}\nimport org.apache.spark.sql.SparkSession\n\n\n/**\n  * Description:    \n  * Author:         Robby\n  * CreateDate:     2019-09-05 23:52\n  * Version:        1.0.0\n  */\n\n// 创建一个case class，定义属性作为特征的列名\ncase class Record(\n                     id: String,\n                     companyname: String,\n                     direction: String,\n                     productinfo: String\n                 )\n\nobject Kmeans  extends  App {\n\n    val spark = SparkSession\n        .builder()\n        .master("local[2]")\n        .appName("kmeans")\n        .getOrCreate()\n\n    import spark.implicits._\n\n    // 从文件中加载数据\n    val rddData = spark.sparkContext.textFile("file:///Users/yinhuanyi/Scala_Project/sparktest01/src/main/resources/worldcount.txt")\n\n    val dataFrame = rddData.map { x =>\n        val data = x.split(",")\n        Record(data(0), data(1), data(2), data(3))\n    }.toDF().cache()\n\n    // 将 dataFrame 的productinfo这一列转换为productwords，进行切词\n    val wordsData = new Tokenizer()\n        .setInputCol("productinfo")\n        .setOutputCol("productwords")\n        .transform(dataFrame)\n\n    // 再将productwords这一列转换为列表\n    val tfData = new HashingTF()\n        .setInputCol("productwords")\n        .setOutputCol("productFeatures")\n        .setNumFeatures(20)\n        .transform(wordsData)\n\n    // 训练模型，将模型存储到文件中，方便加载\n    val idModel = new IDF().setInputCol("productFeatures").setOutputCol("features").fit(tfData)\n    // 模型数据进行转换\n    val idData = idModel.transform(tfData)\n    // 输出训练数据集\n    val trainningData = idData.select("id", "companyname", "direction", "features")\n\n    // 给Kmeans算法设置参数\n    val kmeans = new KMeans()\n        //设置分类两个类别\n        .setK(2)\n        // 迭代次数为5\n        .setMaxIter(value = 5)\n        // 需要聚类的列\n        .setFeaturesCol("features")\n        // 输出结果\n        .setPredictionCol("prediction")\n\n    // 训练数据集，得到分类器\n    val kmeansModel = kmeans.fit(trainningData)\n    // 计算结果\n    val kmeanResult = kmeansModel.transform(trainningData).cache()\n\n    /**\n      * +------+-----------+---------+--------------------+----------+\n      * |    id|companyname|direction|            features|prediction|\n      * +------+-----------+---------+--------------------+----------+\n      * |  java|     python|    scala|(20,[3,5,8,13],[1...|         1|\n      * |python|      scala|    scala|(20,[6,11,16,19],...|         0|\n      * |python|     python|  pythonm|(20,[8,13,15,17],...|         0|\n      * |  java|     python|    scala|(20,[6,8,18],[0.4...|         0|\n      * |django|     django|   python|(20,[4,6],[2.1972...|         0|\n      * +------+-----------+---------+--------------------+----------+*/\n    kmeanResult.show()\n}\n\n')])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br"),n("span",{staticClass:"line-number"},[a._v("8")]),n("br"),n("span",{staticClass:"line-number"},[a._v("9")]),n("br"),n("span",{staticClass:"line-number"},[a._v("10")]),n("br"),n("span",{staticClass:"line-number"},[a._v("11")]),n("br"),n("span",{staticClass:"line-number"},[a._v("12")]),n("br"),n("span",{staticClass:"line-number"},[a._v("13")]),n("br"),n("span",{staticClass:"line-number"},[a._v("14")]),n("br"),n("span",{staticClass:"line-number"},[a._v("15")]),n("br"),n("span",{staticClass:"line-number"},[a._v("16")]),n("br"),n("span",{staticClass:"line-number"},[a._v("17")]),n("br"),n("span",{staticClass:"line-number"},[a._v("18")]),n("br"),n("span",{staticClass:"line-number"},[a._v("19")]),n("br"),n("span",{staticClass:"line-number"},[a._v("20")]),n("br"),n("span",{staticClass:"line-number"},[a._v("21")]),n("br"),n("span",{staticClass:"line-number"},[a._v("22")]),n("br"),n("span",{staticClass:"line-number"},[a._v("23")]),n("br"),n("span",{staticClass:"line-number"},[a._v("24")]),n("br"),n("span",{staticClass:"line-number"},[a._v("25")]),n("br"),n("span",{staticClass:"line-number"},[a._v("26")]),n("br"),n("span",{staticClass:"line-number"},[a._v("27")]),n("br"),n("span",{staticClass:"line-number"},[a._v("28")]),n("br"),n("span",{staticClass:"line-number"},[a._v("29")]),n("br"),n("span",{staticClass:"line-number"},[a._v("30")]),n("br"),n("span",{staticClass:"line-number"},[a._v("31")]),n("br"),n("span",{staticClass:"line-number"},[a._v("32")]),n("br"),n("span",{staticClass:"line-number"},[a._v("33")]),n("br"),n("span",{staticClass:"line-number"},[a._v("34")]),n("br"),n("span",{staticClass:"line-number"},[a._v("35")]),n("br"),n("span",{staticClass:"line-number"},[a._v("36")]),n("br"),n("span",{staticClass:"line-number"},[a._v("37")]),n("br"),n("span",{staticClass:"line-number"},[a._v("38")]),n("br"),n("span",{staticClass:"line-number"},[a._v("39")]),n("br"),n("span",{staticClass:"line-number"},[a._v("40")]),n("br"),n("span",{staticClass:"line-number"},[a._v("41")]),n("br"),n("span",{staticClass:"line-number"},[a._v("42")]),n("br"),n("span",{staticClass:"line-number"},[a._v("43")]),n("br"),n("span",{staticClass:"line-number"},[a._v("44")]),n("br"),n("span",{staticClass:"line-number"},[a._v("45")]),n("br"),n("span",{staticClass:"line-number"},[a._v("46")]),n("br"),n("span",{staticClass:"line-number"},[a._v("47")]),n("br"),n("span",{staticClass:"line-number"},[a._v("48")]),n("br"),n("span",{staticClass:"line-number"},[a._v("49")]),n("br"),n("span",{staticClass:"line-number"},[a._v("50")]),n("br"),n("span",{staticClass:"line-number"},[a._v("51")]),n("br"),n("span",{staticClass:"line-number"},[a._v("52")]),n("br"),n("span",{staticClass:"line-number"},[a._v("53")]),n("br"),n("span",{staticClass:"line-number"},[a._v("54")]),n("br"),n("span",{staticClass:"line-number"},[a._v("55")]),n("br"),n("span",{staticClass:"line-number"},[a._v("56")]),n("br"),n("span",{staticClass:"line-number"},[a._v("57")]),n("br"),n("span",{staticClass:"line-number"},[a._v("58")]),n("br"),n("span",{staticClass:"line-number"},[a._v("59")]),n("br"),n("span",{staticClass:"line-number"},[a._v("60")]),n("br"),n("span",{staticClass:"line-number"},[a._v("61")]),n("br"),n("span",{staticClass:"line-number"},[a._v("62")]),n("br"),n("span",{staticClass:"line-number"},[a._v("63")]),n("br"),n("span",{staticClass:"line-number"},[a._v("64")]),n("br"),n("span",{staticClass:"line-number"},[a._v("65")]),n("br"),n("span",{staticClass:"line-number"},[a._v("66")]),n("br"),n("span",{staticClass:"line-number"},[a._v("67")]),n("br"),n("span",{staticClass:"line-number"},[a._v("68")]),n("br"),n("span",{staticClass:"line-number"},[a._v("69")]),n("br"),n("span",{staticClass:"line-number"},[a._v("70")]),n("br"),n("span",{staticClass:"line-number"},[a._v("71")]),n("br"),n("span",{staticClass:"line-number"},[a._v("72")]),n("br"),n("span",{staticClass:"line-number"},[a._v("73")]),n("br"),n("span",{staticClass:"line-number"},[a._v("74")]),n("br"),n("span",{staticClass:"line-number"},[a._v("75")]),n("br"),n("span",{staticClass:"line-number"},[a._v("76")]),n("br"),n("span",{staticClass:"line-number"},[a._v("77")]),n("br"),n("span",{staticClass:"line-number"},[a._v("78")]),n("br"),n("span",{staticClass:"line-number"},[a._v("79")]),n("br"),n("span",{staticClass:"line-number"},[a._v("80")]),n("br"),n("span",{staticClass:"line-number"},[a._v("81")]),n("br"),n("span",{staticClass:"line-number"},[a._v("82")]),n("br"),n("span",{staticClass:"line-number"},[a._v("83")]),n("br"),n("span",{staticClass:"line-number"},[a._v("84")]),n("br"),n("span",{staticClass:"line-number"},[a._v("85")]),n("br"),n("span",{staticClass:"line-number"},[a._v("86")]),n("br"),n("span",{staticClass:"line-number"},[a._v("87")]),n("br"),n("span",{staticClass:"line-number"},[a._v("88")]),n("br"),n("span",{staticClass:"line-number"},[a._v("89")]),n("br"),n("span",{staticClass:"line-number"},[a._v("90")]),n("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);