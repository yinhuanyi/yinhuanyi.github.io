(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{1126:function(s,n,a){s.exports=a.p+"assets/img/2019-06-163.17.44.176f5db7.png"},1127:function(s,n,a){s.exports=a.p+"assets/img/2019-06-163.25.11.d7e41cf0.png"},1128:function(s,n,a){s.exports=a.p+"assets/img/2019-06-164.04.02.62fae726.png"},1129:function(s,n,a){s.exports=a.p+"assets/img/2019-06-164.12.48.f41e2a3c.png"},1130:function(s,n,a){s.exports=a.p+"assets/img/2019-06-164.21.26.a1fa0676.png"},2418:function(s,n,a){"use strict";a.r(n);var t=a(9),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"一-超参数和模型参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-超参数和模型参数"}},[s._v("#")]),s._v(" "),t("code",[s._v("(一)超参数和模型参数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("①：超参数：在算法运行前需要决定的参数\n②：模型参数：在算法运行中前学习的参数\n\tkNN算法没有模型参数\n\tkNN算法中的k是典型的超参数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"二-寻找好的超参数的方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-寻找好的超参数的方法"}},[s._v("#")]),s._v(" "),t("code",[s._v("(二)寻找好的超参数的方法")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   ①：领域知识\n   ②：经验数值\n   ③：实验搜索\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"三-使用digits数据集寻找更好的超参数k"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-使用digits数据集寻找更好的超参数k"}},[s._v("#")]),s._v(" "),t("code",[s._v("(三)使用digits数据集寻找更好的超参数k")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import numpy as np \nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndigits = datasets.load_digits()\nX = digits.data\ny = digits.target\n\n# 测试数据集为20%\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=666)\n\nbest_score = 0.0\nbest_k = -1\n\n# 如果k是10，那么需要以10为起点，再进行搜索最好的k值\nfor k in range(1,11):\n    knn_clf = KNeighborsClassifier(n_neighbors=k)\n    knn_clf.fit(X_train, y_train)\n    score= knn_clf.score(X_test, y_test)\n    if score ### best_score:\n        best_k = k\n        best_score = score\n        \n        \nprint('best_k = {}'.format(best_k))\nprint('best_score = {}'.format(best_score)) \n\n输出结果：\nbest_k = 4\nbest_score = 0.9916666666666667\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("h3",{attrs:{id:"四-在knn算法中考虑距离的权重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-在knn算法中考虑距离的权重"}},[s._v("#")]),s._v(" "),t("code",[s._v("(四)在knn算法中考虑距离的权重")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(1126),alt:"Alt text"}})]),s._v(" "),t("p",[t("img",{attrs:{src:a(1127),alt:"Alt text"}})]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\t按照传统的knn算法，只考虑到：绿色点到蓝色点的距离最近的个数为2，绿色点到红色点的距离最近的个数为1，那么这个时候，没有考虑到绿色节点到红色的距离是最近的这个因素，因此，权重这个因素需要加入到算法中了\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("knn算法改进(考虑距离权重因素)")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import numpy as np \nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndigits = datasets.load_digits()\nX = digits.data\ny = digits.target\n\n# 测试数据集为20%\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=666)\n\nbest_score = 0.0\nbest_k = -1\nbest_method = \"\"\n\n# 查看考虑了距离的因素，与没有考虑距离因素k的最优取值\nfor method in [\"uniform\", \"distance\"]:\n    # 如果k是10，那么需要以10为起点，再进行搜索最好的k值\n    for k in range(1,11):\n        knn_clf = KNeighborsClassifier(n_neighbors=k, weights=method)\n        knn_clf.fit(X_train, y_train)\n        score= knn_clf.score(X_test, y_test)\n        if score ### best_score:\n            best_k = k\n            best_score = score\n            best_method = method\n\nprint('best_k = {}'.format(best_k))\nprint('best_score = {}'.format(best_score))\nprint('best_method = {}'.format(best_method))\n输出结果：\nbest_k = 4\nbest_score = 0.9916666666666667\nbest_method = uniform\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("h3",{attrs:{id:"五-距离的因素-距离计算公式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-距离的因素-距离计算公式"}},[s._v("#")]),s._v(" "),t("code",[s._v("(五)距离的因素(距离计算公式)")])]),s._v(" "),t("ul",[t("li",[s._v("欧拉距离")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(1128),alt:"Alt text"}})]),s._v(" "),t("p",[s._v("$$\\sqrt{\\sum_{k=1}^n (X_{i}^a - X_{i}^b)^2 }$$")]),s._v(" "),t("ul",[t("li",[s._v("曼哈顿距离")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(1129),alt:"Alt text"}})]),s._v(" "),t("ul",[t("li",[s._v("明可夫斯基距离")])]),s._v(" "),t("p",[t("img",{attrs:{src:a(1130),alt:"Alt text"}})]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\t明可夫斯基距离（minkowski distance），又称明氏距离，是欧氏空间中的一种测度，被看做是欧氏距离和曼哈顿距离的一种推广\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("搜索明可夫斯基距离的p， 这个也是超参数")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("import numpy as np \nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndigits = datasets.load_digits()\nX = digits.data\ny = digits.target\n\n# 测试数据集为20%\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=666)\n\nbest_score = 0.0\nbest_k = -1\nbest_p = -1\n\n# 查看考虑了距离的因素，与没有考虑距离因素k的最优取值\n# 如果k是10，那么需要以10为起点，再进行搜索最好的k值\nfor k in range(1,11):\n    for p in range(1,6):\n\t    # 这里weights必须是distance\n        knn_clf = KNeighborsClassifier(n_neighbors=k, weights='distance', p=p)\n        knn_clf.fit(X_train, y_train)\n        score= knn_clf.score(X_test, y_test)\n        if score ### best_score:\n            best_k = k\n            best_score = score\n            best_p = p\n\n\nprint('best_k = {}'.format(best_k))\nprint('best_score = {}'.format(best_score))\nprint('best_p = {}'.format(best_p))\n\n\n输出结果：\nbest_k = 3\nbest_score = 0.9888888888888889\nbest_p = 2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br")])]),t("h3",{attrs:{id:"六-网格搜索grid-search-寻找最好的超参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-网格搜索grid-search-寻找最好的超参数"}},[s._v("#")]),s._v(" "),t("code",[s._v("(六)网格搜索Grid Search，寻找最好的超参数")])]),s._v(" "),t("ul",[t("li",[s._v("以上的搜索方法是称为网格搜索")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("通过对k和p的遍历，来寻找最好的k值和p值\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("# 创建一组网格搜索的参数范围\nparam_grid = [\n    # 这是第一组的网格搜索\n    {\n        'weights': ['uniform'],\n         'n_neighbors': [i for i in range(1, 11)],\n    },\n    \n    # 这是第二组的网格搜索\n    {\n        'weights': ['distance'],\n        'n_neighbors': [i for i in range(1, 11)],\n        'p': [i for i in range(1,6)],\n    }\n]\n\n# 创建一个knn分类器\nknn_clf = KNeighborsClassifier()\n\n# 引入GridSearchCV类，将网格参数进行交叉测试\nfrom sklearn.model_selection import GridSearchCV\n# 这里传递两个参数，一个是knn_clf分类器，第二个是网格参数， 使得grid_search具有分类器功能\ngrid_search = GridSearchCV(knn_clf, param_grid, cv=3)\n\n# 拟合数据集(需要很长一段时间)\ngrid_search.fit(X_train, y_train)\nCPU times: user 2min 15s, sys: 394 ms, total: 2min 16s\nWall time: 2min 17s\n\n# 查看分类器对应的最佳超参数, 这个以下划线结尾的变量表示，超参数并不是用户传递的参数，而是用户传递了超参数的定义或范围之后，GridSearchCV这个类自己计算出来的超参数。如果自己实现机器学习算法，那么也需要按照这样的规则来命名\ngrid_search.best_estimator_\n输出结果：\nKNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',metric_params=None, n_jobs=None, n_neighbors=3, p=3,weights='distance')\n\n# 查看分类器的选择超参后的准确度\ngrid_search.best_score_\n输出结果：\n0.9853862212943633\n\n# 获取最好的参数\ngrid_search.best_params_\n输出结果：\n{'n_neighbors': 3, 'p': 3, 'weights': 'distance'}\n\n# 拿到最好的分类器(estimator：推算子)\nknn_clf = grid_search.best_estimator_\n# 测试分类结果准确度\nknn_clf.score(X_test, y_test)\n输出结果：\n0.9833333333333333\n\n\n# GridSearchCV这个类目的就是创建多个分类器，分类器的比较需要消耗CPU计算\n# n_jobs就是指定使用多少个CPU进行计算，n_jobs为-1，表明尽可能多的使用CPU\n# verbose指定打印超参数选择的详细过程, 数值越大越详细\n\ngrid_search = GridSearchCV(knn_clf, param_grid, n_jobs=-1, verbose=2, cv=3)\n%time grid_search.fit(X_train, y_train)\n输出结果：\nFitting 3 folds for each of 60 candidates, totalling 180 fits\n[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n[Parallel(n_jobs=-1)]: Done  33 tasks      | elapsed:   14.3s\n[Parallel(n_jobs=-1)]: Done 154 tasks      | elapsed:   46.5s\n[Parallel(n_jobs=-1)]: Done 180 out of 180 | elapsed:   56.2s finished\n\nCPU times: user 382 ms, sys: 67.9 ms, total: 450 ms\nWall time: 56.2 s\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br")])]),t("h3",{attrs:{id:"七-更多距离的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-更多距离的定义"}},[s._v("#")]),s._v(" "),t("code",[s._v("(七)更多距离的定义")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("向量空间余弦相似度 Cosine similarity\n调整余弦相似度  Adjusted Cosine Similarity\n皮尔森相关系数  Pearson correlation coefficient\nJaccard相似系数  Jaccard similarity coefficient\n\n\n这些距离其实也是超参数，在KNeighborsClassifier这个类中使用metric这个参数进行区分，这个metric参数表明，使用哪种距离进行计算，默认的就是：“minkowski”\t距离\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);