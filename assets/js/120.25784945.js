(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{2235:function(n,s,t){"use strict";t.r(s);var e=t(9),a=Object(e.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"一-gin框架使用httprouter定制-路由的原理大量使用了公共前缀树的结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-gin框架使用httprouter定制-路由的原理大量使用了公共前缀树的结构"}},[n._v("#")]),n._v(" 一：Gin框架使用httprouter定制，路由的原理大量使用了公共前缀树的结构")]),n._v(" "),e("h3",{attrs:{id:"一-gin框架的路由的构建机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-gin框架的路由的构建机制"}},[n._v("#")]),n._v(" (一) Gin框架的路由的构建机制")]),n._v(" "),e("ul",[e("li",[n._v("在Gin框架的路由设计中，为了更好的体现Web路径的层级关系，使用了"),e("code",[n._v("压缩版的Trie字典树")]),n._v("，Trie字典树最大的问题是存储空间大，因此使用"),e("code",[n._v("压缩版的Trie字典树")]),n._v("进一步的节约了存储空间。虽然没有O(1)的查询效率，但是Trie树能够更好的体现Web路径的层级关系。下面是压缩版的Trie字典树模型")])]),n._v(" "),e("p",[e("img",{attrs:{src:t(756),alt:"Alt text"}})]),n._v(" "),e("ul",[e("li",[n._v("在Gin框架中，注册路由的过程就是对前缀树进行构造的过程，具有公共前缀的节点共享一个公共父节点。例如下面gin.Default()返回的Engine后，开始构建路由树")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('r := gin.Default()\n\nr.GET("/", func1)\nr.GET("/search/", func2)\nr.GET("/support/", func3)\nr.GET("/blog/", func4)\nr.GET("/blog/:post/", func5)\nr.GET("/about-us/", func6)\nr.GET("/about-us/team/", func7)\nr.GET("/contact/", func8)\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("ul",[e("li",[n._v("此时，Gin会创建一个Get方法对应的路由树，路由器为每种请求方法管理一棵单独的树。")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Priority   Path             Handle\n9          \\                *<1>\n3          ├s               nil\n2          |├earch\\         *<2>\n1          |└upport\\        *<3>\n2          ├blog\\           *<4>\n1          |    └:post      nil\n1          |         └\\     *<5>\n2          ├about-us\\       *<6>\n1          |        └team\\  *<7>\n1          └contact\\        *<8>\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("ul",[e("li",[n._v("上面最右边那一列每个*<数字>表示Handle处理函数的内存地址(一个指针)。从根节点遍历到叶子节点我们就能得到完整的路由表")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("例如：\n\t/blog/:post其中:post只是实际文章名称的占位符(参数)。与hash-maps不同，这种树结构还允许我们使用像:post参数这种动态部分，因为我们实际上是根据路由模式进行匹配，而不仅仅是比较哈希值\n\n\t由于URL路径具有层次结构，并且只使用有限的一组字符(字节值)，所以很可能有许多常见的前缀。这使我们可以很容易地将路由简化为更小的问题。此外，路由器为每种请求方法管理一棵单独的树。一方面，它比在每个节点中都保存一个method-> handle map更加节省空间，它还使我们甚至可以在开始在前缀树中查找之前大大减少路由问题\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br")])]),e("ul",[e("li",[e("p",[n._v("为了解决在Trie树中，"),e("code",[n._v("长路径做路由匹配的时间比短路由长的问题")]),n._v("，Gin在构建路由树的时候，基于"),e("code",[n._v("成本补偿的思想")]),n._v("，让子节点的优先级最高(设置为1，1是最高优先级)，让最长路径的节点能够优先被匹配，那么长路径匹配所花的时间不一定比短路径所花的时间长。")])]),n._v(" "),e("li",[e("p",[n._v("在路由树中，"),e("code",[n._v("每个节点由node结构体构成")]),n._v("，从node结构体上看，这个结构比Trie字典树的中每个节点的结构更加复杂")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('type node struct {\n   // 节点路径，比如上面的s，earch，和upport\n\tpath      string\n\t// 和children字段对应, 保存的是分裂的分支的第一个字符\n\t// 例如search和support, 那么s节点的indices对应的"eu"\n\t// 代表有两个分支, 分支的首字母分别是e和u\n\tindices   string\n\t// 儿子节点\n\tchildren  []*node\n\t// 处理函数链条（切片）\n\thandlers  HandlersChain\n\t// 优先级，子节点、子子节点等注册的handler数量\n\tpriority  uint32\n\t// 节点类型，包括static, root, param, catchAll\n\t// static: 静态节点（默认），比如上面的s，earch等节点\n\t// root: 树的根节点\n\t// catchAll: 有*匹配的节点\n\t// param: 参数节点\n\tnType     nodeType\n\t// 路径上最大参数个数\n\tmaxParams uint8\n\t// 节点是否是参数节点，比如上面的:post\n\twildChild bool\n\t// 完整路径\n\tfullPath  string\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br")])]),e("ul",[e("li",[n._v("我们在Gin框架中，配置路由的时候会调用Engine的addRoute方法，在Engine的addRoute方法里面会调用node节点的addRoute方法，在node节点的addRoute方法里面会调用insertChild方法，在insertChild方法里面会调用addChild方法，这就是添加一个路由节点的过程。下面是Engine的addRoute方法")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('func (engine *Engine) addRoute(method, path string, handlers HandlersChain) {\n\tassert1(path[0] == \'/\', "path must begin with \'/\'")\n\tassert1(method != "", "HTTP method can not be empty")\n\tassert1(len(handlers) > 0, "there must be at least one handler")\n\n\tdebugPrintRoute(method, path, handlers)\n\t\n\t// 获取请求方法对应的树\n\troot := engine.trees.get(method)\n\t\n\t// 如果没有就创建一个压缩Trie树\n\tif root == nil { \n\t\troot = new(node)\n\t\troot.fullPath = "/"\n\t\tengine.trees = append(engine.trees, methodTree{method: method, root: root})\n\t}\n\troot.addRoute(path, handlers)\n\n\t// Update maxParams\n\tif paramsCount := countParams(path); paramsCount > engine.maxParams {\n\t\tengine.maxParams = paramsCount\n\t}\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br")])]),e("ul",[e("li",[n._v("值得注意的是"),e("code",[n._v("在gin框架中保存请求方法对应树关系的并不是使用的map而是使用的切片slice")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 这个结构体保存了方法与每棵树根节点的对应关系\ntype methodTree struct {\n\tmethod string\n\troot   *node\n}\n\ntype methodTrees []methodTree  // slice\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("ul",[e("li",[n._v("为什么保存"),e("code",[n._v("请求方法")]),n._v("和"),e("code",[n._v("树根节点")]),n._v("的关系，需要使用切片slice，而不是map呢，这里可能是考虑到了节省内存吧，因为在http1.1中，请求方法就只有9种")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('func New() *Engine {\n\tdebugPrintWARNINGNew()\n\tengine := &Engine{\n\t\tRouterGroup: RouterGroup{\n\t\t\tHandlers: nil,\n\t\t\tbasePath: "/",\n\t\t\troot:     true,\n\t\t},\n\t\tFuncMap:                template.FuncMap{},\n\t\tRedirectTrailingSlash:  true,\n\t\tRedirectFixedPath:      false,\n\t\tHandleMethodNotAllowed: false,\n\t\tForwardedByClientIP:    true,\n\t\tRemoteIPHeaders:        []string{"X-Forwarded-For", "X-Real-IP"},\n\t\tTrustedProxies:         []string{"0.0.0.0/0"},\n\t\tAppEngine:              defaultAppEngine,\n\t\tUseRawPath:             false,\n\t\tRemoveExtraSlash:       false,\n\t\tUnescapePathValues:     true,\n\t\tMaxMultipartMemory:     defaultMultipartMemory,\n\t\t// 初始化容量为9的切片\n\t\ttrees:                  make(methodTrees, 0, 9),\n\t\tdelims:                 render.Delims{Left: "{{", Right: "}}"},\n\t\tsecureJSONPrefix:       "while(1);",\n\t}\n\tengine.RouterGroup.engine = engine\n\tengine.pool.New = func() interface{} {\n\t\treturn engine.allocateContext()\n\t}\n\treturn engine\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br")])]),e("h3",{attrs:{id:"二-gin框架的路由的匹配机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-gin框架的路由的匹配机制"}},[n._v("#")]),n._v(" (二) Gin框架的路由的匹配机制")]),n._v(" "),e("ul",[e("li",[n._v("Engine的ServeHTTP方法，实现了"),e("code",[n._v("net/http包中Handler接口的ServeHTTP方法")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\n\t// 这里的Context对象使用了sync.pool对象池\n\tc := engine.pool.Get().(*Context)\n\tc.writermem.reset(w)\n\tc.Request = req\n\tc.reset()\n\t\n\t// 从这里开始在路由树中寻找对应的处理函数\n\tengine.handleHTTPRequest(c)\n\n\tengine.pool.Put(c)\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br")])]),e("ul",[e("li",[n._v("在"),e("code",[n._v("engine.handleHTTPRequest(c)")]),n._v("中寻找路由树对应的处理函数")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('func (engine *Engine) handleHTTPRequest(c *Context) {\n\thttpMethod := c.Request.Method\n\trPath := c.Request.URL.Path\n\tunescape := false\n\tif engine.UseRawPath && len(c.Request.URL.RawPath) > 0 {\n\t\trPath = c.Request.URL.RawPath\n\t\tunescape = engine.UnescapePathValues\n\t}\n\n\tif engine.RemoveExtraSlash {\n\t\trPath = cleanPath(rPath)\n\t}\n\n\t// // 根据请求方法找到对应的路由树\n\tt := engine.trees\n\tfor i, tl := 0, len(t); i < tl; i++ {\n\t\tif t[i].method != httpMethod {\n\t\t\tcontinue\n\t\t}\n\t\troot := t[i].root\n\t\t// Find route in tree\n\t\tvalue := root.getValue(rPath, c.params, unescape)\n\t\tif value.params != nil {\n\t\t\tc.Params = *value.params\n\t\t}\n\t\tif value.handlers != nil {\n\t\t\tc.handlers = value.handlers\n\t\t\tc.fullPath = value.fullPath\n\t\t\tc.Next()\n\t\t\tc.writermem.WriteHeaderNow()\n\t\t\treturn\n\t\t}\n\t\tif httpMethod != "CONNECT" && rPath != "/" {\n\t\t\tif value.tsr && engine.RedirectTrailingSlash {\n\t\t\t\tredirectTrailingSlash(c)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif engine.RedirectFixedPath && redirectFixedPath(c, root, engine.RedirectFixedPath) {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t\tbreak\n\t}\n\n\tif engine.HandleMethodNotAllowed {\n\t\tfor _, tree := range engine.trees {\n\t\t\tif tree.method == httpMethod {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif value := tree.root.getValue(rPath, nil, unescape); value.handlers != nil {\n\t\t\t\tc.handlers = engine.allNoMethod\n\t\t\t\tserveError(c, http.StatusMethodNotAllowed, default405Body)\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\tc.handlers = engine.allNoRoute\n\tserveError(c, http.StatusNotFound, default404Body)\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br"),e("span",{staticClass:"line-number"},[n._v("37")]),e("br"),e("span",{staticClass:"line-number"},[n._v("38")]),e("br"),e("span",{staticClass:"line-number"},[n._v("39")]),e("br"),e("span",{staticClass:"line-number"},[n._v("40")]),e("br"),e("span",{staticClass:"line-number"},[n._v("41")]),e("br"),e("span",{staticClass:"line-number"},[n._v("42")]),e("br"),e("span",{staticClass:"line-number"},[n._v("43")]),e("br"),e("span",{staticClass:"line-number"},[n._v("44")]),e("br"),e("span",{staticClass:"line-number"},[n._v("45")]),e("br"),e("span",{staticClass:"line-number"},[n._v("46")]),e("br"),e("span",{staticClass:"line-number"},[n._v("47")]),e("br"),e("span",{staticClass:"line-number"},[n._v("48")]),e("br"),e("span",{staticClass:"line-number"},[n._v("49")]),e("br"),e("span",{staticClass:"line-number"},[n._v("50")]),e("br"),e("span",{staticClass:"line-number"},[n._v("51")]),e("br"),e("span",{staticClass:"line-number"},[n._v("52")]),e("br"),e("span",{staticClass:"line-number"},[n._v("53")]),e("br"),e("span",{staticClass:"line-number"},[n._v("54")]),e("br"),e("span",{staticClass:"line-number"},[n._v("55")]),e("br"),e("span",{staticClass:"line-number"},[n._v("56")]),e("br"),e("span",{staticClass:"line-number"},[n._v("57")]),e("br"),e("span",{staticClass:"line-number"},[n._v("58")]),e("br"),e("span",{staticClass:"line-number"},[n._v("59")]),e("br")])]),e("h2",{attrs:{id:"二-gin框架的中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-gin框架的中间件"}},[n._v("#")]),n._v(" 二：Gin框架的中间件")]),n._v(" "),e("h3",{attrs:{id:"一-gin框架的中间件通过engine的use方法添加"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-gin框架的中间件通过engine的use方法添加"}},[n._v("#")]),n._v(" (一) Gin框架的中间件通过Engine的Use方法添加")]),n._v(" "),e("ul",[e("li",[n._v("Gin框架中间件相关有4个常用的方法，它们分别是c.Next()、c.Abort()、c.Set()、c.Get()")])]),n._v(" "),e("h3",{attrs:{id:"二-gin框架中间件的注册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-gin框架中间件的注册"}},[n._v("#")]),n._v(" (二) Gin框架中间件的注册")]),n._v(" "),e("ul",[e("li",[n._v("在"),e("code",[n._v("r := gin.Default()")]),n._v("中，就调用了Use方法，注册了两个中间件函数")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func Default() *Engine {\n\tdebugPrintWARNINGDefault()\n\tengine := New()\n\tengine.Use(Logger(), Recovery())  // 默认注册的两个中间件\n\treturn engine\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br")])]),e("ul",[e("li",[n._v("继续往下查看Engine的Use()方法，"),e("code",[n._v("注册中间件其实就是将中间件函数追加到group.Handlers中")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func (engine *Engine) Use(middleware ...HandlerFunc) IRoutes {\n\tengine.RouterGroup.Use(middleware...)  // 实际上还是调用的RouterGroup的Use函数\n\tengine.rebuild404Handlers()\n\tengine.rebuild405Handlers()\n\treturn engine\n}\n\n// 其实就是将中间件函数添加到group.Handlers切片中\nfunc (group *RouterGroup) Use(middleware ...HandlerFunc) IRoutes {\n\tgroup.Handlers = append(group.Handlers, middleware...)\n\treturn group.returnObj()\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br")])]),e("ul",[e("li",[n._v("那么每次注册路由的时候，例如注册GET方法的路由，代码逻辑为：RouterGroup调用GET方法的配置路由的时候，会调用handle方法，在handle方法里面，"),e("code",[n._v("handlers = group.combineHandlers(handlers)")]),n._v("，将中间件函数与路由的处理函数进行合并，且中间件函数在前，请求处理函数在后，组成一个函数链条"),e("code",[n._v("HandlersChain")]),n._v("，再group.engine.addRoute(httpMethod, absolutePath, handlers)将请求方法、请求连接、处理函数构建到路由的Trie树中，最后返回")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 注册GET方法的路由，会调用handle方法\nfunc (group *RouterGroup) GET(relativePath string, handlers ...HandlerFunc) IRoutes {\n\treturn group.handle(http.MethodGet, relativePath, handlers)\n}\n\n// RouterGroup调用handler方法\nfunc (group *RouterGroup) handle(httpMethod, relativePath string, handlers HandlersChain) IRoutes {\n\tabsolutePath := group.calculateAbsolutePath(relativePath)\n\thandlers = group.combineHandlers(handlers)\n\tgroup.engine.addRoute(httpMethod, absolutePath, handlers)\n\treturn group.returnObj()\n}\n\n// 将中间件函数与请求处理函数合并\nfunc (group *RouterGroup) combineHandlers(handlers HandlersChain) HandlersChain {\n\tfinalSize := len(group.Handlers) + len(handlers)\n\tif finalSize >= int(abortIndex) {\n\t\tpanic("too many handlers")\n\t}\n\tmergedHandlers := make(HandlersChain, finalSize)\n\tcopy(mergedHandlers, group.Handlers)\n\tcopy(mergedHandlers[len(group.Handlers):], handlers)\n\treturn mergedHandlers\n}\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br")])]),e("h3",{attrs:{id:"三-gin框架中间件的执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-gin框架中间件的执行"}},[n._v("#")]),n._v(" (三) Gin框架中间件的执行")]),n._v(" "),e("ul",[e("li",[n._v("我们知道在Engine的handleHTTPRequest方法中，会执行处理函数，执行的代码如下：value.handlers可以获取到路径对应的处理函数链，将其封装在Context对象中，然后Context对象调用Next方法")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 在路由树中寻找路由处理函数，进行处理\nvalue := root.getValue(rPath, c.params, unescape)\n\nif value.params != nil {\n\tc.Params = *value.params\n}\n\n// 如果找到了路径匹配的处理函数\nif value.handlers != nil {\n\tc.handlers = value.handlers\n\tc.fullPath = value.fullPath\n\tc.Next()\n\tc.writermem.WriteHeaderNow()\n\treturn\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br")])]),e("ul",[e("li",[n._v("在c.Next()方法中，依次从处理函数链handlers中取出处理函数和中间件进行调用")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func (c *Context) Next() {\n\tc.index++\n\tfor c.index < int8(len(c.handlers)) {\n\t\tc.handlers[c.index](c)   // 调用了处理函数和中间件\n\t\tc.index++\n\t}\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("ul",[e("li",[n._v("调用顺序如下图")])]),n._v(" "),e("p",[e("img",{attrs:{src:t(757),alt:"Alt text"}})]),n._v(" "),e("ul",[e("li",[n._v("虽然执行c.Next()是请求路径匹配后，自动调用的。"),e("code",[n._v("但是中间件函数链的最前端，会在处理函数之前调用")]),n._v("。因此在自定义的中间件中，我们也可以手动调用，"),e("code",[n._v("让本应该完整执行的中间件函数，只执行到前一半代码逻辑，然后调用c.Next()去执行函数链中下一个函数，等所有的函数执行完毕后，再执行中间件的后一半代码逻辑")]),n._v("。例如下图中，index=2是请求处理函数，index=0和index=2是中间件函数，那么代码执行顺序如下：从①至⑥")])]),n._v(" "),e("p",[e("img",{attrs:{src:t(758),alt:"Alt text"}})]),n._v(" "),e("ul",[e("li",[n._v("再假设上图中，index=1是捕获请求处理函数异常的中间件，那么当请求处理函数执行过程中，抛出panic错误的时候，会执行捕获异常的中间件代码逻辑，记录panic的异常到日志中，然后调用c.Abort()终止函数链调用下一个函数(因为前面的函数抛出panic异常，因此再调用函数链后面的函数没有意义了)。然后再处理index=0的后一半代码逻辑。下面是Abort()方法的代码")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("func (c *Context) Abort() {\n\tc.index = abortIndex  // 直接将索引置为最大限制值，从而退出调用循环\n}\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("ul",[e("li",[e("code",[n._v("c.Set()/c.Get()这两个方法")]),n._v("，多个函数链中的函数直接传递数据用的。例如：我们可以在认证中间件中获取当前请求的相关信息（userID等）通过c.Set()存入c，然后在后续处理业务逻辑的函数中通过c.Get()来获取当前请求的用户。c就像是一根绳子，将该次请求相关的所有的函数都串起来了，包括中间件函数。")])]),n._v(" "),e("p",[e("img",{attrs:{src:t(759),alt:"Alt text"}})])])}),[],!1,null,null,null);s.default=a.exports},756:function(n,s,t){n.exports=t.p+"assets/img/2021-10-136.05.19.9b5ec1e7.png"},757:function(n,s,t){n.exports=t.p+"assets/img/2021-10-142.26.33.600c77e3.png"},758:function(n,s,t){n.exports=t.p+"assets/img/2021-10-142.42.28.6e856c7c.png"},759:function(n,s,t){n.exports=t.p+"assets/img/2021-10-143.20.48.6b3ab106.png"}}]);