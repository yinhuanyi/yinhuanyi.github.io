(window.webpackJsonp=window.webpackJsonp||[]).push([[351],{2192:function(s,n,a){"use strict";a.r(n);var t=a(9),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("ul",[a("li",[s._v("Go语言中没有“类”，没有类的继承关系，但是可以通过结构体嵌套的方式实现“继承”")])]),s._v(" "),a("h2",{attrs:{id:"一-自定义类型、类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-自定义类型、类型别名"}},[s._v("#")]),s._v(" 一：自定义类型、类型别名")]),s._v(" "),a("h3",{attrs:{id:"一-自定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-自定义类型"}},[s._v("#")]),s._v(" (一)：自定义类型")]),s._v(" "),a("ul",[a("li",[s._v("在Go语言中有一些基本的数据类型，如string、整型、浮点型、布尔等数据类型， Go语言中可以使用type关键字来定义自定义类型， 自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如："),a("code",[s._v("通过type关键字的定义，MyInt就是一种新的类型，它具有int的特性")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//将MyInt定义为int类型\ntype MyInt int\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"二-类型别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-类型别名"}},[s._v("#")]),s._v(" (二)：类型别名")]),s._v(" "),a("ul",[a("li",[s._v("类型别名规定：TypeAlias只是Type的别名，本质上TypeAlias与Type是同一个类型。就像一个孩子小时候有小名、乳名，上学后用学名，英语老师又会给他起英文名，但这些名字都指的是他本人")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type TypeAlias = Type\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("我们之前见过的rune和byte就是类型别名，他们的定义如下：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type byte = uint8\ntype rune = int32\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"三-类型定义和类型别名的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-类型定义和类型别名的区别"}},[s._v("#")]),s._v(" (三)：类型定义和类型别名的区别")]),s._v(" "),a("ul",[a("li",[s._v("类型别名与类型定义表面上看只有一个等号的差异，我们通过下面的这段代码来理解它们之间的区别， 结果显示a的类型是main.NewInt，表示main包下定义的NewInt类型。b的类型是int。MyInt类型只会在代码中存在，编译完成时并不会有MyInt类型。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//类型定义\ntype NewInt int\n\n//类型别名\ntype MyInt = int\n\nfunc main() {\n\tvar a NewInt\n\tvar b MyInt\n\t\n\tfmt.Printf("type of a:%T\\n", a) //type of a:main.NewInt\n\tfmt.Printf("type of b:%T\\n", b) //type of b:int\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"二-结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-结构体"}},[s._v("#")]),s._v(" 二：结构体")]),s._v(" "),a("h3",{attrs:{id:"一-结构体的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-结构体的定义"}},[s._v("#")]),s._v(" (一)：结构体的定义")]),s._v(" "),a("ul",[a("li",[s._v("使用type和struct关键字来定义结构体，具体代码格式如下：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type 类型名 struct {\n    字段名 字段类型\n    字段名 字段类型\n    …\n}\n\n类型名：标识自定义结构体的名称，在同一个包内不能重复。\n字段名：表示结构体字段名。结构体中的字段名必须唯一。\n字段类型：表示结构体字段的具体类型。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("type person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"二-结构体实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-结构体实例化"}},[s._v("#")]),s._v(" (二)：结构体实例化")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段，结构体本身也是一种类型，我们可以像声明内置类型一样使用var关键字声明结构体类型")])]),s._v(" "),a("li",[a("p",[s._v("基本实例化")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\t// 申明\n\tvar p1 person\n\t\n\t// 赋值\n\tp1.name = "沙河娜扎"\n\tp1.city = "北京"\n\tp1.age = 18\n\tfmt.Printf("p1=%v\\n", p1)  //p1={沙河娜扎 北京 18}\n\tfmt.Printf("p1=%#v\\n", p1) //p1=main.person{name:"沙河娜扎", city:"北京", age:18}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ul",[a("li",[s._v("也可以这样实例化")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\n\tp1 := person{\n\t\tname: "robby",\n\t\tcity: "背景",\n\t\tage:  30,\n\t}\n\n\tfmt.Printf("p1=%v\\n", p1)  //p1={沙河娜扎 北京 18}\n\tfmt.Printf("p1=%#v\\n", p1) //p1=main.person{name:"沙河娜扎", city:"北京", age:18}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h3",{attrs:{id:"三-匿名结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-匿名结构体"}},[s._v("#")]),s._v(" (三)：匿名结构体")]),s._v(" "),a("ul",[a("li",[s._v("在定义一些临时数据结构等场景下还可以使用匿名结构体。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('package main\n     \nimport (\n    "fmt"\n)\n     \nfunc main() {\n    var user struct{Name string; Age int}\n    user.Name = "小王子"\n    user.Age = 18\n    fmt.Printf("%#v\\n", user)\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"四-结构体的类型指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-结构体的类型指针"}},[s._v("#")]),s._v(" (四)：结构体的类型指针")]),s._v(" "),a("ul",[a("li",[s._v("我们还可以通过使用new关键字声明一个结构体类型的指针，得到的是结构体的地址。 格式如下")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var p2 = new(person)\nfmt.Printf("%T\\n", p2)     //*main.person\nfmt.Printf("p2=%#v\\n", p2) //p2=&main.person{name:"", city:"", age:0}\n\n// 结构体类型的指针可以直接赋值\np2.name = "小王子"\np2.age = 28\np2.city = "上海"\nfmt.Printf("p2=%#v\\n", p2) //p2=&main.person{name:"小王子", city:"上海", age:28}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("上面代码中解释了，为什么在orm里面将数据库记录映射到结构体，一般使用类型指针。因为类型指针可以给结构体的属性赋值")])]),s._v(" "),a("h3",{attrs:{id:"五-取结构体的地址实例化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-取结构体的地址实例化"}},[s._v("#")]),s._v(" (五)：取结构体的地址实例化")]),s._v(" "),a("ul",[a("li",[s._v("使用&对结构体进行取地址操作相当于对该结构体类型进行了一次new实例化操作，其实都是返回一个类型指针")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\t//var p2 = new(person)\n\tp2 := &person{}    // 改为取地址\n\tp2.name = "robby"\n\tp2.city = "北京"\n\tp2.age = 30\n\n\tfmt.Printf("p1=%v\\n", p2)\n\tfmt.Printf("p1=%#v\\n", p2)\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("ul",[a("li",[s._v("我们之所以可以使用"),a("code",[s._v('p2.name = "robby"')]),s._v(" 这样赋值，是因为go底层是"),a("code",[s._v('(*p2).name = "robby"')]),s._v(" 赋值的，这样go底层自动转换，是golang的语法糖")])]),s._v(" "),a("h2",{attrs:{id:"三-结构体初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-结构体初始化"}},[s._v("#")]),s._v(" 三：结构体初始化")]),s._v(" "),a("ul",[a("li",[s._v("没有初始化的结构体，其成员变量都是对应其类型的零值")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type person struct {\n\tname string\n\tcity string\n\tage  int8\n}\n\nfunc main() {\n\tvar p4 person\n\tfmt.Printf("p4=%#v\\n", p4) //p4=main.person{name:"", city:"", age:0}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"一-使用键值对初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-使用键值对初始化"}},[s._v("#")]),s._v(" (一)：使用键值对初始化")]),s._v(" "),a("ul",[a("li",[s._v("使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('p5 := person{\n\tname: "小王子",\n\tcity: "北京",\n\tage:  18,\n}\n\nfmt.Printf("p5=%#v\\n", p5) //p5=main.person{name:"小王子", city:"北京", age:18}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("也可以对结构体指针进行键值对初始化")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('p6 := &person{\n\tname: "小王子",\n\tcity: "北京",\n\tage:  18,\n}\nfmt.Printf("p6=%#v\\n", p6) //p6=&main.person{name:"小王子", city:"北京", age:18}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[s._v("当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('p7 := &person{\n\tcity: "北京",\n}\nfmt.Printf("p7=%#v\\n", p7) //p7=&main.person{name:"", city:"北京", age:0}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"二-使用值的列表初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-使用值的列表初始化"}},[s._v("#")]),s._v(" (二)：使用值的列表初始化")]),s._v(" "),a("ul",[a("li",[s._v("初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值，都是很少这样写，因为：必须初始化结构体的所有字段、初始值的填充顺序必须与字段在结构体中的声明顺序一致、该方式不能和键值初始化方式混用")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('p8 := &person{\n\t"沙河娜扎",\n\t"北京",\n\t28,\n}\nfmt.Printf("p8=%#v\\n", p8) //p8=&main.person{name:"沙河娜扎", city:"北京", age:28}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"四-结构体内存布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-结构体内存布局"}},[s._v("#")]),s._v(" 四：结构体内存布局")]),s._v(" "),a("ul",[a("li",[s._v("结构体占用一块连续的内存，例如如下例子")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('type test struct {\n\ta int8\n\tb int8\n\tc int8\n\td int8\n}\nn := test{\n\t1, 2, 3, 4,\n}\nfmt.Printf("n.a %p\\n", &n.a)\nfmt.Printf("n.b %p\\n", &n.b)\nfmt.Printf("n.c %p\\n", &n.c)\nfmt.Printf("n.d %p\\n", &n.d)\n\n\n输出：\nn.a 0xc0000a0060\nn.b 0xc0000a0061\nn.c 0xc0000a0062\nn.d 0xc0000a0063\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"一-空结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-空结构体"}},[s._v("#")]),s._v(" (一)：空结构体")]),s._v(" "),a("ul",[a("li",[s._v("空结构体是不占用空间的")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var v struct{}\nfmt.Println(unsafe.Sizeof(v))  // 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"二-实现构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-实现构造函数"}},[s._v("#")]),s._v(" (二)：实现构造函数")]),s._v(" "),a("ul",[a("li",[s._v("Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个person的构造函数。 因为struct是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是"),a("code",[s._v("结构体类型指针")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("func newPerson(name, city string, age int8) *person {\n\treturn &person{\n\t\tname: name,\n\t\tcity: city,\n\t\tage:  age,\n\t}\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("调用构造函数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 这里获取到的是结构体类型指针\np9 := newPerson("张三", "沙河", 90)\n\nfmt.Printf("%#v\\n", p9) //&main.person{name:"张三", city:"沙河", age:90}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"三-方法和接收者-方法与函数的区别是-函数不属于任何类型-方法属于特定的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-方法和接收者-方法与函数的区别是-函数不属于任何类型-方法属于特定的类型"}},[s._v("#")]),s._v(" (三)：方法和接收者(方法与函数的区别是，函数不属于任何类型，方法属于特定的类型)")]),s._v(" "),a("ul",[a("li",[s._v("Go语言中的方法（Method）是一种作用于特定类型变量的函数，这种特定类型变量叫做接收者（Receiver），接收者的概念就类似于其他语言中的this或者 self， 方法的定义格式如下")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("func (接收者变量 接收者类型) 方法名 (参数列表) (返回参数) {\n    函数体\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("说明")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是self、this之类的命名。例如，Person类型的接收者变量应该命名为 p，Connector类型的接收者变量应该命名为c等\n\n2：接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型\n\n3：方法名、参数列表、返回参数：具体格式与函数定义相同\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("举个例子")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Person 结构体\ntype Person struct {\n\tname string\n\tage  int8\n}\n\n//NewPerson 构造函数\nfunc NewPerson(name string, age int8) *Person {\n\treturn &Person{\n\t\tname: name,\n\t\tage:  age,\n\t}\n}\n\n//Dream Person做梦的方法\nfunc (p Person) Dream() {\n\tfmt.Printf("%s的梦想是学好Go语言！\\n", p.name)\n}\n\nfunc main() {\n\tp1 := NewPerson("小王子", 25)\n\tp1.Dream()\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h3",{attrs:{id:"四-指针类型的接收者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-指针类型的接收者"}},[s._v("#")]),s._v(" (四)：指针类型的接收者")]),s._v(" "),a("ul",[a("li",[s._v("指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的this或者self。 例如我们为Person添加一个SetAge方法，来修改实例变量的年龄")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// SetAge 设置p的年龄\n// 使用指针接收者\nfunc (p *Person) SetAge(newAge int8) {\n\tp.age = newAge\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"五-值类型的接收者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-值类型的接收者"}},[s._v("#")]),s._v(" (五)：值类型的接收者")]),s._v(" "),a("ul",[a("li",[s._v("当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。"),a("code",[s._v("虽然这里方法的调用者是结构体指针，但是方法的接受者是值类型，因此还是会将调用者拷贝一份")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// SetAge2 设置p的年龄\n// 使用值接收者\nfunc (p Person) SetAge2(newAge int8) {\n\tp.age = newAge\n}\n\nfunc main() {\n\t// 虽然这里创建的是结构体指针，但是如果方法是值接受者，那么也是拷贝一份\n\tp1 := NewPerson("小王子", 25)\n\tp1.Dream()\n\tfmt.Println(p1.age)  // 25\n\tp1.SetAge2(30)       // (*p1).SetAge2(30)\n\tfmt.Println(p1.age)  // 25\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"六-什么时候应该使用指针类型接收者-方法中最好优先使用指针接受者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-什么时候应该使用指针类型接收者-方法中最好优先使用指针接受者"}},[s._v("#")]),s._v(" (六)：什么时候应该使用指针类型接收者(方法中最好优先使用指针接受者)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：需要修改接收者中的值\n \n2：接收者是拷贝代价比较大的大对象\n\n3：保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"七-任意类型添加方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-任意类型添加方法"}},[s._v("#")]),s._v(" (七)：任意类型添加方法")]),s._v(" "),a("ul",[a("li",[s._v("在Go语言中，"),a("code",[s._v("接收者的类型可以是任何类型")]),s._v("，不仅仅是结构体，任何类型都可以拥有方法。")]),s._v(" "),a("li",[s._v("举个例子，我们基于"),a("code",[s._v("内置的int类型使用type关键字可以定义新的自定义类型")]),s._v("，然后为我们的自定义类型添加方法")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// MyInt 将int定义为自定义MyInt类型\ntype MyInt int\n\n// SayHello 为MyInt添加一个SayHello的方法\nfunc (m MyInt) SayHello() {\n\tfmt.Println("Hello, 我是一个int。")\n}\n\nfunc main() {\n\tvar m1 MyInt\n\tm1.SayHello() //Hello, 我是一个int。\n\tm1 = 100\n\tfmt.Printf("%#v  %T\\n", m1, m1) //100  main.MyInt\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ul",[a("li",[s._v("在"),a("code",[s._v("jiaoshoujia脚手架")]),s._v("项目中，自定义返回的业务状态码就使用到了这个方法，代码如下")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// ResCode 自定义类型\ntype ResCode int64\n\n// 创建业务状态码常量\nconst (\n\tCodeSuccess ResCode = 1000 + iota\n\tCodeInvalidParam\n\tCodeUserExist\n\tCodeUserNotExist\n\tCodeInvalidPassword\n\tCodeServerBusy\n\n\tCodeNeedLogin\n\tCodeInvalidToken\n)\n\n// CodeMsgMap 状态码与业务信息对应关系\nvar CodeMsgMap = map[ResCode]string{\n\tCodeSuccess:         "Success",\n\tCodeInvalidParam:    "请求参数错误",\n\tCodeUserExist:       "用户已经存在",\n\tCodeUserNotExist:    "用户不存在",\n\tCodeInvalidPassword: "密码错误",\n\tCodeServerBusy:      "服务器繁忙",\n\tCodeNeedLogin:       "需要登录",\n\tCodeInvalidToken:    "无效的token",\n}\n\n// GetMsg 这个方法，是状态码调用，然后返回一个字符串信息\nfunc (c ResCode) GetMsg() string {\n\tmsg, ok := CodeMsgMap[c]\n\tif !ok {\n\t\tmsg = CodeMsgMap[CodeServerBusy]\n\t}\n\treturn msg\n}\n\n\nfunc main() {\n\t// 1000状态码调用\n\tmsgSuccess := CodeSuccess.GetMsg()\n\tfmt.Println(msgSuccess)\n\n\t// 1006状态码调用\n\tmsgFail := CodeNeedLogin.GetMsg()\n\tfmt.Println(msgFail)\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br")])]),a("h3",{attrs:{id:"八-结构体的匿名字段-没有字段名称-只有类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八-结构体的匿名字段-没有字段名称-只有类型"}},[s._v("#")]),s._v(" (八)：结构体的匿名字段(没有字段名称，只有类型)")]),s._v(" "),a("ul",[a("li",[s._v("结构体允许"),a("code",[s._v("其成员字段在声明时没有字段名而只有类型")]),s._v("，这种没有名字的字段就称为匿名字段")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Person 结构体Person类型\ntype Person struct {\n\tstring\n\tint\n}\n\nfunc main() {\n\tp1 := Person{\n\t\t"小王子",\n\t\t18,\n\t}\n\n\tfmt.Printf("%#v\\n", p1)        //main.Person{string:"北京", int:18}\n\tfmt.Println(p1.string, p1.int) //北京 18\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"九-嵌套结构体-这个比较重要-在定义http返回的json中-经常使用到嵌套结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九-嵌套结构体-这个比较重要-在定义http返回的json中-经常使用到嵌套结构体"}},[s._v("#")]),s._v(" (九)：嵌套结构体(这个比较重要，在定义HTTP返回的json中，经常使用到嵌套结构体)")]),s._v(" "),a("ul",[a("li",[s._v("一个结构体中可以嵌套包含另一个结构体或结构体指针")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Address 地址结构体\ntype Address struct {\n\tProvince string\n\tCity     string\n}\n\n//User 用户结构体\ntype User struct {\n\tName    string\n\tGender  string\n\tAddress Address\n}\n\nfunc main() {\n\tuser1 := User{\n\t\tName:   "小王子",\n\t\tGender: "男",\n\t\tAddress: Address{\n\t\t\tProvince: "山东",\n\t\t\tCity:     "威海",\n\t\t},\n\t}\n\tfmt.Printf("user1=%#v\\n", user1)//user1=main.User{Name:"小王子", Gender:"男", Address:main.Address{Province:"山东", City:"威海"}}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("ul",[a("li",[s._v("嵌套匿名字段")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Address 地址结构体\ntype Address struct {\n\tProvince string\n\tCity     string\n}\n\n//User 用户结构体\ntype User struct {\n\tName    string\n\tGender  string\n\tAddress //匿名字段\n}\n\nfunc main() {\n\tvar user2 User\n\tuser2.Name = "小王子"\n\tuser2.Gender = "男"\n\tuser2.Address.Province = "山东"    // 匿名字段默认使用类型名作为字段名\n\tuser2.City = "威海"                // 匿名字段可以省略\n\tfmt.Printf("user2=%#v\\n", user2) //user2=main.User{Name:"小王子", Gender:"男", Address:main.Address{Province:"山东", City:"威海"}}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("ul",[a("li",[s._v("嵌套结构体的字段名冲突不会影响结构体字段的赋值")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Address 地址结构体\ntype Address struct {\n\tProvince   string\n\tCity       string\n\tCreateTime string\n}\n\n//Email 邮箱结构体\ntype Email struct {\n\tAccount    string\n\tCreateTime string\n}\n\n//User 用户结构体\ntype User struct {\n\tName   string\n\tGender string\n\tAddress\n\tEmail\n}\n\nfunc main() {\n\tvar user3 User\n\tuser3.Name = "沙河娜扎"\n\tuser3.Gender = "男"\n\t// user3.CreateTime = "2019" //ambiguous selector user3.CreateTime\n\tuser3.Address.CreateTime = "2000" //指定Address结构体中的CreateTime\n\tuser3.Email.CreateTime = "2000"   //指定Email结构体中的CreateTime\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h3",{attrs:{id:"十-结构体的-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十-结构体的-继承"}},[s._v("#")]),s._v(" (十)：结构体的“继承”")]),s._v(" "),a("ul",[a("li",[s._v("结构体也可以实现其他编程语言中面向对象的继承")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Animal 动物\ntype Animal struct {\n\tname string\n}\n\nfunc (a *Animal) move() {\n\tfmt.Printf("%s会动！\\n", a.name)\n}\n\n//Dog 狗\ntype Dog struct {\n\tFeet    int8\n\t*Animal //通过嵌套匿名结构体实现继承\n}\n\nfunc (d *Dog) wang() {\n\tfmt.Printf("%s会汪汪汪~\\n", d.name)\n}\n\nfunc main() {\n\td1 := &Dog{\n\t\tFeet: 4,\n\t\t// 注意：这里的Animal类型是类型指针，需要传递地址\n\t\tAnimal: &Animal{\n\t\t\tname: "乐乐",\n\t\t},\n\t}\n\n\t// 那此时，d1既有Dog的方法，也有Animal的方法\n\td1.wang() // 乐乐会汪汪汪~\n\td1.move() // 乐乐会动！\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h2",{attrs:{id:"五-结构体与json序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-结构体与json序列化"}},[s._v("#")]),s._v(" 五：结构体与JSON序列化")]),s._v(" "),a("h3",{attrs:{id:"一-结构体与json的序列化和反序列化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-结构体与json的序列化和反序列化"}},[s._v("#")]),s._v(" (一)：结构体与Json的序列化和反序列化")]),s._v(" "),a("ul",[a("li",[s._v("结构体 -> Json")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Student 学生\ntype Student struct {\n\tID     int\n\tGender string\n\tName   string\n}\n\n//Class 班级\ntype Class struct {\n\tTitle    string\n\t// 如果是列表类型，一般将列表里面的元素设置为类型指针，不会将列表类型作为类型指针\n\tStudents []*Student\n}\n\nfunc main() {\n\n\tc := &Class{\n\t\tTitle:    "101",\n\t\t// 使用make创建空列表\n\t\tStudents: make([]*Student, 0, 200),\n\t}\n\n\t// 给class添加student\n\tfor i := 0; i < 10; i++ {\n\t\tstu := &Student{\n\t\t\tName:   fmt.Sprintf("stu%02d", i),\n\t\t\tGender: "男",\n\t\t\tID:     i,\n\t\t}\n\t\tc.Students = append(c.Students, stu)\n\t}\n\n\t//JSON序列化：结构体--\x3eJSON格式的字符串\n\tdata, err := json.Marshal(c)\n\n\tif err != nil {\n\t\tfmt.Println("json marshal failed")\n\t\treturn\n\t}\n\t\n\n\t// 输出结果 {"Title":"101","Students":[{"ID":0,"Gender":"男","Name":"stu00"},{"ID":1,"Gender":"男","Name":"stu01"},{"ID":2,"Gender":"男","Name":"stu02"},{"ID":3,"Gender":"男","Name":"stu03"},{"ID":4,"Gender":"男","Name":"stu04"},{"ID":5,"Gender":"男","Name":"stu05"},{"ID":6,"Gender":"男","Name":"stu06"},{"ID":7,"Gender":"男","Name":"stu07"},{"ID":8,"Gender":"男","Name":"stu08"},{"ID":9,"Gender":"男","Name":"stu09"}]}\n\tfmt.Printf("json: %s\\n", data)\n}\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br")])]),a("ul",[a("li",[s._v("Json -> 结构体(将刚刚获得的json字符串，再转换为结构体)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Student 学生\ntype Student struct {\n\tID     int\n\tGender string\n\tName   string\n}\n\n//Class 班级\ntype Class struct {\n\tTitle    string\n\tStudents []*Student\n}\n\nfunc main() {\n\n\tjsonStr := `{"Title":"101","Students":[{"ID":0,"Gender":"男","Name":"stu00"},{"ID":1,"Gender":"男","Name":"stu01"},{"ID":2,"Gender":"男","Name":"stu02"},{"ID":3,"Gender":"男","Name":"stu03"},{"ID":4,"Gender":"男","Name":"stu04"},{"ID":5,"Gender":"男","Name":"stu05"},{"ID":6,"Gender":"男","Name":"stu06"},{"ID":7,"Gender":"男","Name":"stu07"},{"ID":8,"Gender":"男","Name":"stu08"},{"ID":9,"Gender":"男","Name":"stu09"}]}`\n\n\tc := &Class{}\n\t// json反序列化，先将str转换为[]byte类型\n\terr := json.Unmarshal([]byte(jsonStr), c)\n\n\tif err != nil {\n\t\tfmt.Println("json unmarshal failed!")\n\t\treturn\n\t}\n\n\tfmt.Printf("Title: %s\\n", c.Title)\n\n\tfor _, stu := range c.Students {\n\t\tfmt.Printf("Id: %d, Gender: %s, Name: %s\\n", stu.ID, stu.Gender, stu.Name)\n\t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("h3",{attrs:{id:"二-结构体标签-tag"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-结构体标签-tag"}},[s._v("#")]),s._v(" (二)：结构体标签（Tag）")]),s._v(" "),a("ul",[a("li",[s._v("Tag是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 Tag在结构体字段的后方定义，由一对反引号包裹起来。结构体的Tag类型有很多种，常见的有解析viper的"),a("code",[s._v("mapstructure")]),s._v("， 解析JSON的"),a("code",[s._v("json")]),s._v("，解析sqlx的"),a("code",[s._v("db")]),s._v("，解析YAML的"),a("code",[s._v("yaml")]),s._v("等")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Student 学生\ntype Student struct {\n\tID     int    `json:"id"` //通过指定tag实现json序列化该字段时的key\n\tGender string //json序列化是默认使用字段名作为key\n\tname   string //私有不能被json包访问\n}\n\nfunc main() {\n\ts1 := Student{\n\t\tID:     1,\n\t\tGender: "男",\n\t\tname:   "沙河娜扎",\n\t}\n\tdata, err := json.Marshal(s1)\n\tif err != nil {\n\t\tfmt.Println("json marshal failed!")\n\t\treturn\n\t}\n\tfmt.Printf("json str:%s\\n", data) //json str:{"id":1,"Gender":"男"}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"三-将map对象转换为结构体对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-将map对象转换为结构体对象"}},[s._v("#")]),s._v(" (三)：将Map对象转换为结构体对象")]),s._v(" "),a("ul",[a("li",[s._v("结构体的Tag信息可以通过reflect解析出来，其实在json.Unmarshal( )方法中，也是调用了"),a("code",[s._v("reflect.Valueof(结构体实例对象).Elem()")]),s._v("，获取到结构体实例对象的Value类型值，然后遍历结构体所有的字段，获取tag对应的值，基于从tag中获取的值，从json字符串中提取数据，然后转换为结构体字段对应的数据类型，再让结构体将对应的值写入到对应的字段，那么就完成了从json转结构体的过程。"),a("code",[s._v("其实从任何数据类型转结构体类型原理都是这样的，下面是map类型转结构体类型代码示例")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//DataToStructByTagSql 基于sql标签，将map类型映射到结构体\nfunc DataToStructByTagSql(data map[string]string, obj interface{}) {\n\n\t// 将结构体对象封装为value类型，以便以运行时获取结构体信息\n\tobjValue := reflect.ValueOf(obj).Elem()  // reflect.ValueOf(obj)获取接口的类型值，.Elem()是获取指针对应的值\n\n\t// objValue.NumField()获取到结构体的成员数量\n\tfor i := 0; i < objValue.NumField(); i++ {\n\t\t/*\n\t\t这里以结构体Product的第一个属性为例： Id int64 `json:"id" sql:"id"`\n\t\tdata := map[string]string{"id": "1"}\n\t\t*/\n\n\t\t// objValue.Type().Field(i).Tag.Get("sql")为id\n\t\ttagKey := objValue.Type().Field(i).Tag.Get("sql")  // 获取标签字段名称\n\t\t// data["id"]就是"1"，类型是string\n\t\tmapValue := data[tagKey]                                // 基于标签字段名称获取数据\n\t\t// 结构体字段名称是Id\n\t\tobjFiledName := objValue.Type().Field(i).Name\t\t\t// 获取结构体的字段名称\n\t\t// 结构体字段名称Id对应的类型: int64\n\t\tobjFieldType := objValue.Field(i).Type()\t\t\t\t// 获取结构体的字段类型\n\t\t// 获取原始值 "1", 类型是Value\n\t\treflectVal := reflect.ValueOf(mapValue)\t\t\t\t\t// 获取原始值，类型是Value\n\n\t\tvar err error\n\n\t\t// objFieldType:int64， reflectVal.Type()为:string\n\t\tif objFieldType != reflectVal.Type() { // 判断从map中获取的数据的类型是否与结构体字段的类型一样\n\t\t\t// 将"1"转换为int64类型\n\t\t\treflectVal, err = TypeConversion(mapValue, objFieldType.Name()) // 如果不一样，直接转换\n\t\t\tif err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\n\t\t// 给objValue结构体对应的字段设置值\n\t\tobjValue.FieldByName(objFiledName).Set(reflectVal)\n\t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);