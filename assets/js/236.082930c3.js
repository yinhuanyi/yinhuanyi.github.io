(window.webpackJsonp=window.webpackJsonp||[]).push([[236],{2190:function(s,a,n){"use strict";n.r(a);var t=n(9),e=Object(t.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"一-指针基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-指针基础"}},[s._v("#")]),s._v(" 一：指针基础")]),s._v(" "),t("ul",[t("li",[s._v("Go语言中的指针不能进行偏移和运算，因此Go语言中的指针操作非常简单，我们只需要记住两个符号："),t("code",[s._v("&（取地址）和 *（根据地址取值）")])])]),s._v(" "),t("h3",{attrs:{id:"一-指针地址和指针类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-指针地址和指针类型"}},[s._v("#")]),s._v(" (一)：指针地址和指针类型")]),s._v(" "),t("ul",[t("li",[s._v("每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。Go语言中使用&字符放在变量前面对变量进行“取地址”操作。 Go语言中的值类型"),t("code",[s._v("（int、float、bool、string、array、struct）")]),s._v("都有对应的指针类型，如："),t("code",[s._v("*int、*int64、*string")]),s._v("等")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("所以这里要搞清楚了，如果给一个函数传递的是&a地址，必须使用 *int 来接收\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("取变量指针的语法如下，这里说明了什么是地址，什么是类型指针")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("ptr := &v    // v的类型为T\n\n\nv:代表被取地址的变量，类型为T\nptr:用于接收地址的变量，ptr的类型就为*T，称做T的指针类型。*代表指针。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("举个例子")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('// %p用于表示地址，%T用于表示类型\nfunc main() {\n\ta := 10\n\tb := &a\n\tfmt.Printf("a:%d ptr:%p\\n", a, &a) // a:10 ptr:0xc00001a078\n\tfmt.Printf("b:%p type:%T\\n", b, b) // b:0xc00001a078 type:*int\n\tfmt.Println(&b)                    // 0xc00000e018\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("我们来看一下b := &a的图示：")])]),s._v(" "),t("p",[t("img",{attrs:{src:n(702),alt:"Alt text"}})]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("上图说明了：\n\t1：a变量的值是10，地址是0xc00001a078\n\t2：b变量的值是0xc00001a078，地址是0xc00000e018\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"二-指针取值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-指针取值"}},[s._v("#")]),s._v(" (二)：指针取值")]),s._v(" "),t("ul",[t("li",[s._v("在对普通变量使用&操作符取地址后会获得这个变量的指针，然后可以对指针使用*操作，也就是指针取值，代码如下")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('func main() {\n\t//指针取值\n\ta := 10\n\tb := &a // 取变量a的地址，将指针保存到b中\n\tfmt.Printf("type of b:%T\\n", b)\n\tc := *b // 指针取值（根据指针去内存取值）\n\tfmt.Printf("type of c:%T\\n", c)\n\tfmt.Printf("value of c:%v\\n", c)\n}\n\n\n输出：\ntype of b:*int\ntype of c:int\nvalue of c:10\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("总结： 取地址操作符&和取值操作符是一对互补操作符，&取出地址，根据地址取出地址指向的值。")])]),s._v(" "),t("li",[t("p",[s._v("指针传值示例：")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func modify1(x int) {\n\tx = 100\n}\n\nfunc modify2(x *int) {\n\t*x = 100\n}\n\nfunc main() {\n\ta := 10\n\t\n\t// 值传递\n\tmodify1(a)\n\tfmt.Println(a) // 10\n\t\n\t// 引用传递\n\tmodify2(&a)\n\tfmt.Println(a) // 100\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h2",{attrs:{id:"二-new和make-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-new和make-函数"}},[s._v("#")]),s._v(" 二：new和make 函数")]),s._v(" "),t("h3",{attrs:{id:"一-我们先来看一个例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-我们先来看一个例子"}},[s._v("#")]),s._v(" (一)：我们先来看一个例子")]),s._v(" "),t("ul",[t("li",[s._v("执行下面的代码会引发panic，为什么呢？ 在Go语言中"),t("code",[s._v("对于引用类型的变量")]),s._v("，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。"),t("code",[s._v("Go语言中new和make是内建的两个函数，主要用来分配内存")]),s._v("。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\n\tvar a *int\n\t*a = 100  // 这里直接panic\n\tfmt.Println(*a)\n\t\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h3",{attrs:{id:"二-new函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-new函数"}},[s._v("#")]),s._v(" (二)：new函数")]),s._v(" "),t("ul",[t("li",[s._v("new是一个内置的函数，它的函数签名如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func new(Type) *Type\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("解释上面的函数签名")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1：Type表示类型，new函数只接受一个参数，这个参数是一个类型\n2：*Type表示类型指针，new函数返回一个指向该类型内存地址的指针\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("new函数不太常用，使用new函数得到的是一个"),t("code",[s._v("类型指针")]),s._v("，并且该指针对应的值为该类型的零值。举个例子：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('func main() {\n\ta := new(int)\n\tb := new(bool)\n\tfmt.Printf("%T\\n", a) // *int\n\tfmt.Printf("%T\\n", b) // *bool\n\tfmt.Println(*a)       // 0\n\tfmt.Println(*b)       // false\n}\t\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("本节开始的示例代码中"),t("code",[s._v("var a *int")]),s._v("只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用"),t("code",[s._v("内置的new函数")]),s._v("对a进行初始化之后就可以正常对其赋值了：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\nfunc main() {\n\n\ta := new(int)\n\t*a = 100\n\tfmt.Println(*a)\n\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"三-make函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-make函数"}},[s._v("#")]),s._v(" (三)：make函数")]),s._v(" "),t("ul",[t("li",[s._v("make也是用于内存分配的，区别于new，它只用于"),t("code",[s._v("slice、map以及chan的内存创建")]),s._v("，而且"),t("code",[s._v("它返回的类型就是这三个类型本身，而不是他们的指针类型")]),s._v("，因为这三种类型就是"),t("code",[s._v("引用类型")]),s._v("，所以就没有必要返回他们的指针了。make函数的函数签名如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func make(t Type, size ...IntegerType) Type\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("我们在使用slice、map以及channel的时候，都需要使用make进行初始化，然后才可以对它们进行操作，"),t("code",[s._v("var b map[string]int")]),s._v("只是声明变量b是一个map类型的变量，不能够直接赋值，需要使用make进行初始化才能赋值")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('func main() {\n\tvar b map[string]int\n\tb = make(map[string]int, 10)\n\tb["沙河娜扎"] = 100\n\tfmt.Println(b)\n}\n\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("但是这里如果是声明的切片，那么就可以不需要使用make初始化")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var s []int        // 申明\ns = append(s, 1)   // 直接添加元素\nfmt.Println(s)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"四-new与make的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-new与make的区别"}},[s._v("#")]),s._v(" (四)：new与make的区别")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1：二者都是用来做内存分配的\n\n2：make只用于slice、map以及channel的初始化，返回的还是这三个引用类型本身，也就是说不是类型指针\n\n3：而new用于类型的内存分配，并且内存对应的值为类型零值，返回的是指向类型的指针，一般在gin开发过程中，需要给orm传递地址的时候使用到\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])])}),[],!1,null,null,null);a.default=e.exports},702:function(s,a,n){s.exports=n.p+"assets/img/2021-05-2711.41.03.d834a762.png"}}]);