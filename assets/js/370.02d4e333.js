(window.webpackJsonp=window.webpackJsonp||[]).push([[370],{2231:function(n,s,t){"use strict";t.r(s);var a=t(9),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"一-并发安全和锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-并发安全和锁"}},[n._v("#")]),n._v(" 一：并发安全和锁")]),n._v(" "),t("h3",{attrs:{id:"一-有时候在go代码中可能会存在多个goroutine同时操作一个资源-临界区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-有时候在go代码中可能会存在多个goroutine同时操作一个资源-临界区"}},[n._v("#")]),n._v(" (一)：有时候在Go代码中可能会存在多个goroutine同时操作一个资源（临界区）")]),n._v(" "),t("ul",[t("li",[n._v("举个例子，在goroutine在并发情况下，输出结果为："),t("code",[n._v("7031")]),n._v("，而且这个数字不确定的")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var x int64\nvar wg sync.WaitGroup\n\nfunc add() {\n\n\tdefer wg.Done()  // goroutine结束就减一\n\tfor i := 0; i < 5000; i++ {\n\t\tx = x + 1\n\t}\n\n}\n\nfunc main() {\n\t//runtime.GOMAXPROCS(1)\n\twg.Add(2) // 启动一个goroutine就登记+1\n\tgo add()\n\tgo add()\n\twg.Wait()\n\tfmt.Println(x)\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br")])]),t("ul",[t("li",[n._v("在goroutine在串行运行下，输出："),t("code",[n._v("10000")]),n._v("，这是数字是确定的")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var x int64\nvar wg sync.WaitGroup\n\nfunc add() {\n\n\tdefer wg.Done()  // goroutine结束就减一\n\tfor i := 0; i < 5000; i++ {\n\t\tx = x + 1\n\t}\n\n}\n\nfunc main() {\n\truntime.GOMAXPROCS(1)\n\twg.Add(2) // 启动一个goroutine就登记+1\n\tgo add()\n\tgo add()\n\twg.Wait()\n\tfmt.Println(x)\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("h3",{attrs:{id:"二-互斥锁sync-mutex解决临界资源访问-这里的sync-mutex完全互斥-隔离级别最高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-互斥锁sync-mutex解决临界资源访问-这里的sync-mutex完全互斥-隔离级别最高"}},[n._v("#")]),n._v(" (二)：互斥锁sync.Mutex解决临界资源访问，这里的sync.Mutex完全互斥 "),t("strong",[n._v("隔离级别最高")])]),n._v(" "),t("ul",[t("li",[n._v("互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个goroutine可以访问共享资源。Go语言中使用sync包的Mutex类型来实现互斥锁。 使用互斥锁来修复上面代码的问题：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nvar x int64\nvar wg sync.WaitGroup\nvar lock sync.Mutex\n\nfunc add() {\n\tfor i := 0; i < 5000; i++ {\n\t\tlock.Lock() // 加锁\n\t\tx = x + 1\n\t\tlock.Unlock() // 解锁\n\t}\n\twg.Done()\n}\n\nfunc main() {\n\twg.Add(2)\n\tgo add()\n\tgo add()\n\twg.Wait()\n\tfmt.Println(x)\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br")])]),t("h3",{attrs:{id:"三-读写互斥锁sync-rwmutex-读操作不会阻塞-适合读多写少情况下使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-读写互斥锁sync-rwmutex-读操作不会阻塞-适合读多写少情况下使用"}},[n._v("#")]),n._v(" (三)：读写互斥锁sync.RWMutex，读操作不会阻塞(适合读多写少情况下使用)")]),n._v(" "),t("ul",[t("li",[n._v("读写锁在Go语言中使用sync包中的RWMutex类型，"),t("code",[n._v("读写锁分为两种：读锁和写锁")]),n._v("。当一个"),t("code",[n._v("goroutine获取读锁之后")]),n._v("，其他的goroutine如果是获取读锁会继续获得锁，如果是获取写锁就会等待；当一个"),t("code",[n._v("goroutine获取写锁之后")]),n._v("，其他的goroutine无论是获取读锁还是写锁都会等待, "),t("code",[n._v("在读数据过程中，goroutine依然是并发的")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nvar (\n\tx      int64\n\twg     sync.WaitGroup\n\tlock   sync.Mutex    // 申请全局互斥锁\n\trwlock sync.RWMutex  // 申请全局读写互斥锁\n\n)\n\n\nfunc write() {\n\tlock.Lock()   // 加互斥锁\n\t// rwlock.Lock() // 加写锁\n\tx = x + 1\n\ttime.Sleep(10 * time.Millisecond)     // 假设读操作耗时10毫秒\n\t// rwlock.Unlock()                       // 解写锁\n\tlock.Unlock()                      // 解互斥锁\n\twg.Done()\n}\n\nfunc read() {\n\tlock.Lock()                  // 加互斥锁\n\t// rwlock.RLock()               // 加读锁\n\ttime.Sleep(time.Millisecond) // 假设读操作耗时1毫秒\n\t// rwlock.RUnlock()             // 解读锁\n\tlock.Unlock()                // 解互斥锁\n\twg.Done()\n}\n\nfunc main() {\n\n\tstart := time.Now()\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo write()\n\t}\n\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(1)\n\t\tgo read()\n\t}\n\n\twg.Wait()\n\tend := time.Now()\n\n\t// 计算耗时 加读写锁耗时 111.788809ms\n\t// 计算耗时 加互斥锁耗时 1.410702012s\n\tfmt.Println(end.Sub(start))\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br")])]),t("ul",[t("li",[n._v("小结")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("互斥锁有两种状态：正常状态和饥饿状态。\n\n在正常状态下，所有等待锁的 goroutine 按照FIFO顺序等待。唤醒的 goroutine 不会直接拥有锁，而是会和新请求锁的 goroutine 竞争锁的拥有。新请求锁的 goroutine 具有优势：它正在 CPU 上执行，而且可能有好几个，所以刚刚唤醒的 goroutine 有很大可能在锁竞争中失败。在这种情况下，这个被唤醒的 goroutine 会加入到等待队列的前面。 如果一个等待的 goroutine 超过 1ms 没有获取锁，那么它将会把锁转变为饥饿模式。\n\n在饥饿模式下，锁的所有权将从 unlock 的 goroutine 直接交给交给等待队列中的第一个。新来的 goroutine 将不会尝试去获得锁，即使锁看起来是 unlock 状态, 也不会去尝试自旋操作，而是放在等待队列的尾部。\n\n如果一个等待的 goroutine 获取了锁，并且满足一以下其中的任何一个条件：(1)它是队列中的最后一个；(2)它等待的时候小于1ms。它会将锁的状态转换为正常状态。\n\n正常状态有很好的性能表现，饥饿模式也是非常重要的，因为它能阻止尾部延迟的现象\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("h3",{attrs:{id:"四-sync-waitgroup-实现并发任务同步-需要注意sync-waitgroup是一个结构体-作为参数传递的时候要传递指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-sync-waitgroup-实现并发任务同步-需要注意sync-waitgroup是一个结构体-作为参数传递的时候要传递指针"}},[n._v("#")]),n._v(" "),t("code",[n._v("(四)：sync.WaitGroup:实现并发任务同步")]),n._v("(需要注意sync.WaitGroup是一个结构体，作为参数传递的时候要传递指针)")]),n._v(" "),t("ul",[t("li",[n._v("在代码中生硬的使用time.Sleep肯定是不合适的，Go语言中可以使用sync.WaitGroup来实现并发任务的同步。 sync.WaitGroup有以下几个方法：")])]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[n._v("方法名")]),n._v(" "),t("th",{staticStyle:{"text-align":"center"}},[n._v("功能")])])]),n._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[n._v("(wg * WaitGroup) Add(delta int)")]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("计数器+delta")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[n._v("(wg *WaitGroup) Done()")]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("计数器-1")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[n._v("(wg *WaitGroup) Wait()")]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("阻塞直到计数器变为0")])])])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("sync.WaitGroup使用思想：内部维护着一个计数器，计数器的值可以增加和减少。例如当我们启动了N 个并发任务时，就将计数器值增加N。每个任务完成时通过调用Done()方法将计数器减1。通过调用Wait()来等待并发任务执行完，当计数器值为0时，表示所有并发任务已经完成")])]),n._v(" "),t("li",[t("p",[n._v("我们利用sync.WaitGroup将上面的代码优化一下：")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var wg sync.WaitGroup\n\nfunc hello() {\n\tdefer wg.Done()\n\tfmt.Println("Hello Goroutine!")\n}\n\nfunc main() {\n\n\twg.Add(1)\n\tgo hello()\n\twg.Wait()\n\tfmt.Println("main goroutine done!")\n\t\t\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("h3",{attrs:{id:"五-sync-once和init函数的区别-共同特点-只执行一次操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-sync-once和init函数的区别-共同特点-只执行一次操作"}},[n._v("#")]),n._v(" "),t("code",[n._v("(五)：sync.Once和init函数的区别")]),n._v("(共同特点：只执行一次操作)")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("sync.Once这个类型与init函数很像("),t("strong",[n._v("init函数是导入包的时候，只执行一次")]),n._v(")，不同的是 "),t("strong",[n._v("init 函数"),t("code",[n._v("是当所在的 package 首次被加载时执行，若迟迟未被使用，则既浪费了内存，又延长了程序加载时间")])]),n._v("，"),t("strong",[n._v("sync.Once "),t("code",[n._v("可以在代码的任意位置初始化和调用，因此可以延迟到使用时再执行，并发场景下是线程安全的, 一个针对只执行一次场景的解决方案")])])])]),n._v(" "),t("li",[t("p",[n._v("在多数情况下，"),t("strong",[n._v("sync.Once 被用于控制变量的初始化")]),n._v("，这个变量的读写满足如下三个条件：")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：当且仅当第一次访问某个变量时，进行初始化（写）\n\n2：变量初始化过程中，所有读都被阻塞，直到初始化完成\n\n3：变量仅初始化一次，初始化完成后驻留在内存里，然后可以随意读了\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("ul",[t("li",[n._v("sync.Once只有一个Do方法，其签名如下")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 需要传递的参数是函数\nfunc (o *Once) Do(f func()) {}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("ul",[t("li",[n._v("下面的例子，在多个goroutine中执行回调函数，但是只会执行一次，"),t("code",[n._v("init config 仅打印了一次，说明 sync.Once 中的初始化函数仅执行了一次")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 全局变量\nvar (\n\tonce   sync.Once\n\tconfig *Config\n)\n\ntype Config struct {\n\tServer string\n\tPort   int64\n}\n\nfunc InitConfig() *Config {\n\n\tonce.Do(func() {\n\t\tvar err error\n\t\tconfig = &Config{Server: os.Getenv("SERVER_URL")}\n\t\tconfig.Port, err = strconv.ParseInt(os.Getenv("PORT"), 10, 0)\n\t\tif err != nil {\n\t\t\tconfig.Port = 8080 // default port\n\t\t}\n\t\tlog.Println("init config")\n\t})\n\n\treturn config\n\n}\n\nfunc main() {\n\n\t// 虽然这里初始化了10次，但是只会执行一次\n\tfor i := 0; i < 10; i++ {\n\t\tgo func() {\n\t\t\t_ = InitConfig()\n\t\t}()\n\t}\n\ttime.Sleep(time.Second)\n\n}\n\n// 输出结果：2021/08/09 16:45:17 init config\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br")])]),t("ul",[t("li",[n._v("下面这个例子实现了"),t("code",[n._v("缓存单例")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var (\n\tinstance *CacheSingleton\n\tonce sync.Once\n)\n\n// CacheSingleton 全局缓存单例\ntype CacheSingleton struct {\n\tdata map[string]int\n\tlock sync.RWMutex\n}\n\nfunc GetInstance() *CacheSingleton {\n\tonce.Do(func() {\n\t\tinstance = &CacheSingleton{\n\t\t\tdata: make(map[string]int),\n\t\t}\n\t})\n\treturn instance\n}\n\nfunc main() {\n\tinstance1 := GetInstance()\n\tinstance2 := GetInstance()\n\t// 同一个实例\n\tfmt.Println(instance1==instance2)\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br")])]),t("ul",[t("li",[n._v("sync.Once 的原理")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：保证变量仅被初始化一次，需要有个标志来判断变量是否已初始化过，若没有则需要初始化。\n\n2：线程安全，支持并发，需要互斥锁来实现。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h3",{attrs:{id:"六-sync-map-线程安全的map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-sync-map-线程安全的map"}},[n._v("#")]),n._v(" "),t("code",[n._v("(六)：sync.Map")]),n._v("(线程安全的map)")]),n._v(" "),t("ul",[t("li",[n._v("map不是并发安全的，sync.Map类型提供了一个线程安全的map，且无需make初始化类型，就行Python一样使用")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var m = sync.Map{}\n\nfunc main() {\n\n\twg := sync.WaitGroup{}\n\n\tfor i := 0; i < 20; i++ {\n\n\t\twg.Add(1)\n\n\t\tgo func(n int) {\n\t\t\tkey := strconv.Itoa(n)\n\t\t\t// 写入\n\t\t\tm.Store(key, n)\n\t\t\t// 读取\n\t\t\tvalue, _ := m.Load(key)\n\t\t\tfmt.Printf("k=:%v,v:=%v\\n", key, value)\n\t\t\twg.Done()\n\t\t}(i)\n\n\t}\n\n\twg.Wait()\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br")])]),t("h3",{attrs:{id:"七-sync-cond-条件判断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-sync-cond-条件判断"}},[n._v("#")]),n._v(" (七)：sync.cond 条件判断")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("sync.Cond实现了一个条件变量，通过条件的判断来唤醒一组goroutine")]),n._v("，Cond底层基于锁实阻塞，因此通常结合sync.Mutex或sync.RWMutex共同使用，下面代码中："),t("code",[n._v("goroutine")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var wg sync.WaitGroup\n\ntype Fifo struct {\n\tlock  *sync.Mutex\n\tcond  *sync.Cond\n\tqueue []int\n}\n\ntype Queue interface {\n\tPop() int\n\tOffer(num int) error\n}\n\ntype Container interface {\n\tQueue\n\tSetData()\n\tGetData()\n}\n\n// 构造函数这样写，目的是避免Mutex被拷贝，尽量与Cond使用同一把锁\nfunc NewFifo() Container {\n\n\tfifo := &Fifo{\n\t\tlock: new(sync.Mutex),\n\t}\n\tfifo.cond = sync.NewCond(fifo.lock)\n\treturn fifo\n}\n\n// Offer 入队操作\nfunc (f *Fifo) Offer(num int) error {\n\tf.lock.Lock()\n\tdefer f.lock.Unlock()\n\n\tf.queue = append(f.queue, num)\n\n\t// 对cond的mutex进行广播：有数据了\n\tf.cond.Broadcast()\n\n\treturn nil\n}\n\n// Pop 出队操作\nfunc (f *Fifo) Pop() int {\n\tf.lock.Lock()\n\tdefer f.lock.Unlock()\n\n\tfor {\n\t\t// 条件判断\n\t\tfor len(f.queue) == 0 {\n\t\t\t// 如果满足goroutine挂起条件，让goroutine挂起，这里会阻塞，如果Broadcast()被调用，代码取消阻塞\n\t\t\tf.cond.Wait()\n\t\t}\n\n\t\t// 不满足goroutine挂起条件，代码继续执行\n\t\titem := f.queue[0]\n\t\tf.queue = f.queue[1:]\n\t\treturn item\n\t}\n}\n\nfunc (f *Fifo) SetData() {\n\tdefer wg.Done()\n\t_ = f.Offer(rand.Int())\n}\n\nfunc (f *Fifo) GetData() {\n\tdefer wg.Done()\n\tfmt.Printf("data=%d\\n", f.Pop())\n}\n\nfunc main() {\n\n\tfifo := NewFifo()\n\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(2)\n\t\t\n\t\t// 必须是先set在前，否则mutex会报错\n\t\tgo fifo.SetData() \n\t\ttime.Sleep(time.Millisecond)\n\t\tgo fifo.GetData()\n\t}\n\n\twg.Wait()\n\n\tfmt.Println("正在运行的goroutine: ", runtime.NumGoroutine())\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br")])]),t("ul",[t("li",[t("p",[t("code",[n._v("Signal()方法")]),n._v("与"),t("code",[n._v("Broadcast()方法")]),n._v("类似，主要是Signal()方法是唤醒一个goroutine，Broadcast()方法是唤醒所有的goroutine")])]),n._v(" "),t("li",[t("p",[n._v("代码小结")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("代码逻辑：\n\t上面代码中创建了一个fifo队列，Fifo必须实现Container接口，从Fifo的构造函数可以看出，Cond底层的Mutex与外部使用的Mutex是同一个互斥锁对象mutex，因为使用的是指针，为了避免Lock()、Unlock()频繁调用复制锁导致死锁\n\t启动1000个goroutine写入数据到fifo，启动1000个goroutine从fifo中读取数据\n\t在Pop()方法中，会判断fifo队列是否有数据，如果没有数据，会调用cond.Wait()方法，将goroutine挂起，如果有会执行后面的代码\n\t在Offer()方法中，如果写入了一个数据会调用Broadcast()，让挂起的goroutine唤醒\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("h2",{attrs:{id:"二-原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-原子操作"}},[n._v("#")]),n._v(" 二：原子操作")]),n._v(" "),t("h3",{attrs:{id:"一-sync-atomic包介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-sync-atomic包介绍"}},[n._v("#")]),n._v(" (一)：sync/atomic包介绍")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("加锁是并发编程中实现同步的一种方法，一般有sync.Mutex互斥锁、sync.RWMutex读写锁，而这种锁机制的底层是基于原子操作实现的，一般直接通过CPU指令实现。Golang中原子操作由"),t("code",[n._v("sync/atomic")]),n._v("包提供")])]),n._v(" "),t("li",[t("p",[n._v("1：读取操作")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func LoadInt32(addr *int32) (val int32)\nfunc LoadInt64(addr *int64) (val int64)\nfunc LoadUint32(addr *uint32) (val uint32)\nfunc LoadUint64(addr *uint64) (val uint64)\nfunc LoadUintptr(addr *uintptr) (val uintptr)\nfunc LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("ul",[t("li",[n._v("2：写入操作")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func StoreInt32(addr *int32, val int32)\nfunc StoreInt64(addr *int64, val int64)\nfunc StoreUint32(addr *uint32, val uint32)\nfunc StoreUint64(addr *uint64, val uint64)\nfunc StoreUintptr(addr *uintptr, val uintptr)\nfunc StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("ul",[t("li",[n._v("3：修改操作")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func AddInt32(addr *int32, delta int32) (new int32)\nfunc AddInt64(addr *int64, delta int64) (new int64)\nfunc AddUint32(addr *uint32, delta uint32) (new uint32)\nfunc AddUint64(addr *uint64, delta uint64) (new uint64)\nfunc AddUintptr(addr *uintptr, delta uintptr) (new uintptr)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("ul",[t("li",[n._v("4：交换操作")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func SwapInt32(addr *int32, new int32) (old int32)\nfunc SwapInt64(addr *int64, new int64) (old int64)\nfunc SwapUint32(addr *uint32, new uint32) (old uint32)\nfunc SwapUint64(addr *uint64, new uint64) (old uint64)\nfunc SwapUintptr(addr *uintptr, new uintptr) (old uintptr)\nfunc SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("ul",[t("li",[n._v("5：比较并交换操作")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)\nfunc CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\nfunc CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)\nfunc CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)\nfunc CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)\nfunc CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("h3",{attrs:{id:"二-对比不加锁、加互斥锁、原子操作执行并发任务的效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-对比不加锁、加互斥锁、原子操作执行并发任务的效率"}},[n._v("#")]),n._v(" (二)：对比不加锁、加互斥锁、原子操作执行并发任务的效率")]),n._v(" "),t("ul",[t("li",[n._v("下面的例子，在并发操作过程中，多个goroutine修改一个count变量，对比不加锁、加互斥锁、原子操作 三种方式运行的结果和时间")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// Counter 计算器实现两个方法，\ntype Counter interface {\n\tInc()\n\tLoad() int64\n}\n\n// CommonCounter 普通计数器\ntype CommonCounter struct {\n\tcounter int64\n}\n\n// Inc 加一\nfunc (c *CommonCounter) Inc() {\n\tc.counter++\n}\n\n// Load 返回计数器的数\nfunc (c *CommonCounter) Load() int64 {\n\treturn c.counter\n}\n\n// MutexCounter 互斥锁版\ntype MutexCounter struct {\n\tcounter int64\n\tlock    sync.Mutex\n}\n\nfunc (m *MutexCounter) Inc() {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tm.counter++\n}\n\nfunc (m *MutexCounter) Load() int64 {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\treturn m.counter\n}\n\n// AtomicCounter 原子操作版\ntype AtomicCounter struct {\n\tcounter int64\n}\n\n// Inc 是加一的原子操作\nfunc (a *AtomicCounter) Inc() {\n\t//\n\tatomic.AddInt64(&a.counter, 1)\n}\n\n\nfunc (a *AtomicCounter) Load() int64 {\n\treturn atomic.LoadInt64(&a.counter)\n}\n\nfunc test(c Counter) {\n\tvar wg sync.WaitGroup\n\tstart := time.Now()\n\n\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(1)\n\n\t\tgo func() {\n\t\t\twg.Done()\n\t\t\tc.Inc()\n\n\t\t}()\n\t}\n\n\twg.Wait()\n\tend := time.Now()\n\n\tfmt.Println(c.Load(), end.Sub(start))\n}\n\nfunc main() {\n\tc1 := CommonCounter{} // 非并发安全\n\ttest(&c1)\n\n\tc2 := MutexCounter{} // 使用互斥锁实现并发安全\n\ttest(&c2)\n\n\tc3 := AtomicCounter{} // 并发安全且比互斥锁效率更高\n\ttest(&c3)\n}\n\n\n\n\n\n输出结果：\n0 1.023ms  // 结果错误\n1000 1.0445ms\n1000 513.7µs\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br"),t("span",{staticClass:"line-number"},[n._v("89")]),t("br"),t("span",{staticClass:"line-number"},[n._v("90")]),t("br"),t("span",{staticClass:"line-number"},[n._v("91")]),t("br"),t("span",{staticClass:"line-number"},[n._v("92")]),t("br"),t("span",{staticClass:"line-number"},[n._v("93")]),t("br"),t("span",{staticClass:"line-number"},[n._v("94")]),t("br"),t("span",{staticClass:"line-number"},[n._v("95")]),t("br")])]),t("ul",[t("li",[n._v("小结")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("原子操作可以直接操作CPU指令集，是锁实现的底层原理，但是除了某些特殊的底层应用，使用通道或者sync包的函数/类型实现同步更好\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("h2",{attrs:{id:"三-sync-errgroup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-sync-errgroup"}},[n._v("#")]),n._v(" 三：sync/errgroup")]),n._v(" "),t("h3",{attrs:{id:"一-sync-errgroup包介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-sync-errgroup包介绍"}},[n._v("#")]),n._v(" (一)：sync/errgroup包介绍")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("WaitGroup 使你在处理并发任务时对goroutines的创建和停止的数量控制变得简单，"),t("strong",[n._v("但是用 WatiGroup唯一的问题就是当你的goroutines出错时，你并不能知道出错的原因")]),n._v("。"),t("strong",[n._v("sync.ErrGroup再sync.WaitGroup功能的基础上，"),t("code",[n._v("增加了错误传递")]),n._v("，以及在发生不可恢复的错误时取消整个goroutine集合")])])]),n._v(" "),t("li",[t("p",[n._v("首先来看一个"),t("code",[n._v("闭包与goroutine的问题")]),n._v("：下面的代码想从切片中获取元素，在goroutine中将其打印，代码最终输出：c、c、c。"),t("code",[n._v('这是因为循环的每次迭代都使用同一个变量接收切片元素的值，但是v可能在goroutine运行的时候被改变，这里的v就被改变了，goroutine启动需要时间，当所有的goroutine执行到fmt.Println(v)的时候，v已经为变为了"c"')]),n._v("，因此代码最终输出：c、c、c")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n\n\n\tvalues := []string{"a", "b", "c"}\n\n\tfor _, v := range values {\n\n\t\tgo func() {\n\t\t\tfmt.Println(v)\n\t\t}()\n\n\t}\n\n\ttime.Sleep(10*time.Second)\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("ul",[t("li",[n._v("修改方式1：让变量v每次指向一个新的内存地址")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n\n\tvalues := []string{"a", "b", "c"}\n\n\tfor _, v := range values {\n\n\t\tv := v // 让变量v每次指向一个新的内存地址\n\n\t\tgo func() {\n\t\t\tfmt.Println(v)\n\t\t}()\n\n\t}\n\n\ttime.Sleep(10*time.Second)\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br")])]),t("ul",[t("li",[n._v("修改方式2：在启动goroutine之前，将v作为参数传递到goroutine中")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n\n\tvalues := []string{"a", "b", "c"}\n\n\tfor _, v := range values {\n\t\t\n\t\tgo func(v string) {\n\t\t\tfmt.Println(v)\n\t\t}(v)  // v作为参数传递到goroutine中\n\n\t}\n\n\ttime.Sleep(10*time.Second)\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br")])]),t("ul",[t("li",[n._v("再来看一个errgroup的简单使用")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n\n\tvar g errgroup.Group\n\n\tvar urls = []string{\n\t\t"https://www.baidu.com/",\n\t\t"https://studygolang.com/",\n\t\t"https://www.qq.com/",\n\t}\n\n\tfor _, url := range urls {\n\n\t\t// 这里由于errgroup中启动goroutine需要时间，所以v的值会在goroutine指向前改变，所以这里让变量url每次都指向一块新的内存地址\n\t\turl := url\n\n\t\t// 定义任务\n\t\tgoFunc := func() error {\n\n\t\t\tresp, err := http.Get(url)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf("response err: %s\\n", err.Error())\n\t\t\t}\n\t\t\tdefer resp.Body.Close()\n\n\t\t\tfmt.Printf("%s code == %d\\n", url, resp.StatusCode)\n\n\t\t\treturn err\n\t\t}\n\t\t\n\t\t// 使用errgroup启动goroutine执行任务\n\t\tg.Go(goFunc)\n\t}\n\n\tfmt.Printf("NumGoroutine=%d\\n",runtime.NumGoroutine())\n\n\t// 等待所有的goroutine执行完毕, 如果err有值，那么返回的报错是第一个报错协程的错误\n\tif err := g.Wait(); err != nil {\n\t\tlog.Fatalf("response err: %s\\n", err.Error())\n\t}\n\n}\n\n\n输出结果：\nNumGoroutine=4\nhttps://www.baidu.com/ code == 200\nhttps://www.qq.com/ code == 200\nhttps://studygolang.com/ code == 200\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br")])]),t("h2",{attrs:{id:"四-sync-pool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-sync-pool"}},[n._v("#")]),n._v(" 四：sync/pool")]),n._v(" "),t("h3",{attrs:{id:"一-sync-pool介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-sync-pool介绍"}},[n._v("#")]),n._v(" (一)：sync/pool介绍")]),n._v(" "),t("ul",[t("li",[n._v("sync/pool是"),t("code",[n._v("一个临时对象池")]),n._v("，"),t("strong",[t("code",[n._v("目的是为了保存和复用临时对象，减少内存分配，降低GC压力")])])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\tGolang的GC垃圾回收算法主要是基于(Mark and Sweep)标记清扫算法，对象越多GC流程越慢，因为Golang进行三色标记回收的时候，要标记的也越多，清理的就越多，自然GC就慢了。那么sync/pool临时对象池就可以减少临时对象的创建，加快GC的标记清扫的速度，提升GC性能\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("ul",[t("li",[n._v("sync/pool就是一个临时的对象池子，预先放入临时产生的对象，然后取出使用，在Gin框架中，为了避免Context对象大量创建，导致GC性能降低，因此在Engine处理请求的ServeHTTP方法中，Context对象不是临时创建的，是在gin.New()的时候，就初始化了一个sync.pool的池子。当需要用到Context对象的时候，调用"),t("code",[n._v("engine.pool.Get().(*Context)")]),n._v("获取，当用完了之后，在调用"),t("code",[n._v("engine.pool.Put(c)")]),n._v("放回到池子中")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func (engine *Engine) ServeHTTP(w http.ResponseWriter, req *http.Request) {\n\tc := engine.pool.Get().(*Context) // 从临时对象池中获取Context对象\n\tc.writermem.reset(w)\n\tc.Request = req\n\tc.reset()\n\n\tengine.handleHTTPRequest(c) // 处理请求\n\n\tengine.pool.Put(c) // 将临时对象Context放放回到池子中\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("h3",{attrs:{id:"二-sync-pool的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-sync-pool的使用"}},[n._v("#")]),n._v(" (二)：sync/pool的使用")]),n._v(" "),t("ul",[t("li",[n._v("使用池对象非常简单，只需要在初始化pool的时候，给New属性赋值一个匿名函数即可，匿名函数中返回一个对象的指针")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n\n\t// 将结构体序列化\n\tvar buf, _ = json.Marshal(&Student{Name: "Robby", Age: 30})\n\n\t// 初始化临时对象池\n\tstudentPool := sync.Pool{\n\t\t// 只需要给New属性定义一个匿名函数，放回池内结构体指针\n\t\tNew: func() interface{} { return new(Student) },\n\t}\n\n\t// 从临时对象池中，获取结构体指针\n\tstu := studentPool.Get().(*Student)\n\n\t// 反序列化\n\t_ = json.Unmarshal(buf, stu)\n\n\t// 对象用完之后，再放回对象池中\n\tstudentPool.Put(stu)\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br")])]),t("ul",[t("li",[n._v("基于基准测试，在序列化和反序列化中，使用sync.pool保存临时对象和临时创建对象两种方式，分析内存分配的效率")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func BenchmarkUnmarshal(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\t// 临时创建对象\n\t\tstu := &Student{}\n\t\t// 反序列化\n\t\tjson.Unmarshal(buf, stu)\n\t}\n}\n\nfunc BenchmarkUnmarshalWithPool(b *testing.B) {\n\tfor n := 0; n < b.N; n++ {\n\t\t// 从对象池取出对象\n\t\tstu := studentPool.Get().(*Student)\n\t\t// 反序列化\n\t\tjson.Unmarshal(buf, stu)\n\t\t// 在将对象放回池中\n\t\tstudentPool.Put(stu)\n\t}\n}\n\n\n// 结果分析：【1993】是b.N的值，也就是循环执行的次数；【559768 ns/op】是每次循环执行的时间，单位是纳秒；【5096 B/op】是每次循环消耗的内存，单位是字节；7 allocs/op是每次循环开辟的内存空间\n\nBenchmarkUnmarshal-8           1993   559768 ns/op   5096 B/op 7 allocs/op\nBenchmarkUnmarshalWithPool-8   1976   550223 ns/op    234 B/op 6 allocs/op\n\n\n可以看出，执行时间差不多，但是内存比例是 234/5096 == 1/22，差不多是22倍的差距\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br")])]),t("ul",[t("li",[n._v("从分析结果上来看，sync.pool可以很大程度为我们创建临时对象的过程中节约了内存")])])])}),[],!1,null,null,null);s.default=e.exports}}]);