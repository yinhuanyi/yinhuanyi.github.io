(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{1346:function(s,e,a){s.exports=a.p+"assets/img/2019-09-287.58.13.18bcae4b.png"},1347:function(s,e,a){s.exports=a.p+"assets/img/2019-09-288.01.34.1a30db6c.png"},1348:function(s,e,a){s.exports=a.p+"assets/img/2019-09-288.16.14.ee519d07.png"},1349:function(s,e,a){s.exports=a.p+"assets/img/2019-09-288.17.55.836978fa.png"},1350:function(s,e,a){s.exports=a.p+"assets/img/2019-09-289.07.26.ffb02055.png"},1351:function(s,e,a){s.exports=a.p+"assets/img/2019-09-289.29.11.b67d3f2a.png"},1352:function(s,e,a){s.exports=a.p+"assets/img/2019-09-2810.26.02.6ad5adfe.png"},1353:function(s,e,a){s.exports=a.p+"assets/img/2019-09-2810.40.07.65f2e54a.png"},1354:function(s,e,a){s.exports=a.p+"assets/img/2019-09-2810.46.25.25814321.png"},1355:function(s,e,a){s.exports=a.p+"assets/img/2019-09-296.37.57.8e601c46.png"},2449:function(s,e,a){"use strict";a.r(e);var n=a(9),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"一-drf的token登录原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-drf的token登录原理"}},[s._v("#")]),s._v(" 一：DRF的token登录原理")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("TokenAuthentication使用, 在INSTALLED_APPS中添加"),n("code",[s._v("'rest_framework.authtoken'")])])]),s._v(" "),n("li",[n("p",[s._v("执行")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("makemigrations\nmigrate\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("数据库中会生产一张表"),n("code",[s._v("authtoken_token")])])]),s._v(" "),n("li",[n("p",[s._v("查看数据表结构")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# user_id字段是一个外键，指向users_userprofile表的user_id字段\n+---------+-------------+------+-----+---------+-------+\n| Field   | Type        | Null | Key | Default | Extra |\n+---------+-------------+------+-----+---------+-------+\n| key     | varchar(40) | NO   | PRI | NULL    |       |\n| created | datetime(6) | NO   |     | NULL    |       |\n| user_id | int(11)     | NO   | UNI | NULL    |       |\n+---------+-------------+------+-----+---------+-------+\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("借助postman，对api-token-auth/接口提交post请求")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1346),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[n("p",[s._v("这里有个注意点：http://127.0.0.1:8000/api-token-auth/待"),n("code",[s._v("/")]),s._v("，如果想要请求不带"),n("code",[s._v("/")]),s._v("，那么可以在settings文件中配置"),n("code",[s._v("APPEND_SLASH = True")])])]),s._v(" "),n("li",[n("p",[s._v("此时"),n("code",[s._v("authtoken_token")]),s._v("表中会生产对应的token记录，不同的用户token值不同")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1347),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("在settings文件中添加token认证的Token认证中间件, 让用户登录的时候，获取用户的token信息，从而获取用户信息")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ]\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("借助postman对goods的列表发送get请求，查看后台获取到的token信息从而获取用户信息, 在GoodsListViewSet类中打断点查看")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1348),alt:"Alt text"}})]),s._v(" "),n("p",[n("img",{attrs:{src:a(1349),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"二-drf局部token认证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-drf局部token认证"}},[s._v("#")]),s._v(" 二：DRF局部Token认证")]),s._v(" "),n("ul",[n("li",[s._v("对于http://127.0.0.1:8000/goods/这样的接口是无需用户登录认证才返回数据的，但是之前已经在settings文件中添加了全局的TokenAuthentication。因此后台的任何接口都是需要Token认证才能成功请求的，为了解决这个问题，将全局的TokenAuthentication认证，改为局部的TokenAuthentication认证")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1: 在settings文件中将全局的TokenAuthentication移除\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n    ]\n}\n\n2：在需要用户token认证的接口，添加TokenAuthentication认证类, 这里以goods APP的GoodsListViewSet为例说明，在GoodsListViewSet中添加authentication_classes = (TokenAuthentication, )\nclass GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n    # 这里需要重新将queryset赋值\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    pagination_class = StandardResultsSetPagination\n    # 指定使用的过滤类\n    filter_backends = (DjangoFilterBackend, SearchFilter, OrderingFilter)\n    # 指定需要过滤的类\n    filter_class = GoodsFilter\n    # 基于drf的filter，指定需要搜索的字典，\n    search_fields = ('name', 'goods_brief', 'goods_desc')\n    # 指定排序的字段\n    ordering_fields = ('sold_num','shop_price')\n\n    # 添加局部TokenAuthentication认证\n    authentication_classes = (TokenAuthentication, )\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("ul",[n("li",[s._v("对ListModelMixin打断点认证，如果用户代token请求，用户为robby。不带token请求，用户显示为AnonymousUser")])]),s._v(" "),n("h3",{attrs:{id:"三-json-web-token原理以及drf实现jwt认证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-json-web-token原理以及drf实现jwt认证"}},[s._v("#")]),s._v(" 三：Json Web Token原理以及DRF实现JWT认证")]),s._v(" "),n("ul",[n("li",[s._v("传统的Restful API用户登录原理")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t前后端分离通过Restful API进行数据交互时，如何验证用户的登录信息及权限。在原来的项目中，使用的是最传统也是最简单的方式，前端登录，后端根据用户信息生成一个token，并保存这个 token 和对应的用户id到数据库或Session中，接着把 token 传给用户，存入浏览器 cookie，之后浏览器请求带上这个cookie，后端根据这个cookie值来查询用户，验证是否过期。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("传统的Restful API用户登录存在的问题")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1: cookie泄漏\n2: cookie无过期时间\n3: 增大了数据库查询的开销\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("JWT介绍")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：什么是JWT：\n\tJWT 是一个开放标准(RFC 7519)，它定义了一种用于简洁，自包含的用于通信双方之间以 JSON 对象的形式安全传递信息的方法。JWT 可以使用 HMAC 算法或者是 RSA 的公钥密钥对进行签名\n\n2：JWT的特点\n\t简洁(Compact)\n\t可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快\n\t自包含(Self-contained)\n\t负载中包含了所有用户所需要的信息，避免了多次查询数据库\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("JWT的组成部分")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1350),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("JWT中的Header")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\tHeader中包含两个部分：Token类型和采用的加密算法\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("JWT中的Payload")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t这部分就是我们存放信息的地方了，你可以把用户 ID 等信息放在这里，JWT 规范里面对这部分有进行了比较详细的介绍，常用的由 iss（签发者），exp（过期时间），sub（面向的用户），aud（接收方），iat（签发时间）\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("JWT中的Signature")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\tHeader、Payload都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("三个部分通过.连接在一起就是我们的 JWT 了，它可能长这个样子，长度貌似和你的加密算法和私钥有关系。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjU3ZmVmMTY0ZTU0YWY2NGZmYzUzZGJkNSIsInhzcmYiOiI0ZWE1YzUwOGE2NTY2ZTc2MjQwNTQzZjhmZWIwNmZkNDU3Nzc3YmUzOTU0OWM0MDE2NDM2YWZkYTY1ZDIzMzBlIiwiaWF0IjoxNDc2NDI3OTMzfQ.PA3QjeyZSUh7H0GfE0vJaKW4LjKJuC3dVLQiY4hii8s\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("前后端登录流程")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1351),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[n("strong",[n("code",[s._v("一句话说明JWT登录原理")])])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t从上述分析可知，JWT中Header和Payload在服务器端会被Base64编码，编码后的结果再借助HS256算法基于服务器端秘钥获得Signature，则JWT = Header + Payload + Signature。服务器将JWT返回给客户端，保存到浏览器中，当浏览器再次请求，服务器端只需要再次借助HS256算法基于服务器端秘钥获得新的Signature，与客户端JWT的Signature对比，如果一样，说明客户端用户认证合法，再取出Payload中有个用户的非敏感信息，对用户进行数据展示。如果不一样，说明用户方法，直接返回错误信息\n\tJWT同时也减轻了服务器端session的存储压力和session的同步压力\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"四-drf的jwt使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-drf的jwt使用"}},[s._v("#")]),s._v(" 四：DRF的JWT使用")]),s._v(" "),n("ul",[n("li",[s._v("安装djangorestframework-jwt")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("pip install djangorestframework-jwt\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("将"),n("code",[s._v("rest_framework_jwt.authentication.JSONWebTokenAuthentication")]),s._v("加入到settings文件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.BasicAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',\n    ]\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("在urls.py文件中添加JWT路由，删除DRF自带的Token认证路由")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t# 配置URL的token\n    # url(r'^api-token-auth/', views.obtain_auth_token),\n    # 配置第三方的jwt\n    url(r'^jwt-token/', obtain_jwt_token),\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("使用postman测试")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1352),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("基于JWT的Token，查看get请求可以解析到用户为robby")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1353),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"五-基于vue的jwt用户认证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-基于vue的jwt用户认证"}},[s._v("#")]),s._v(" 五：基于VUE的JWT用户认证")]),s._v(" "),n("ul",[n("li",[s._v("将url(r'^jwt-token/', obtain_jwt_token)修改为表示用户登录的路由")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 配置第三方的jwt\nurl(r'^login/', obtain_jwt_token),\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("当用户输入用户名和密码，点击登录，login.vue组件将会把用户名和token写入到cookie中")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1354),alt:"Alt text"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//本地存储用户信息\ncookie.setCookie('name',this.userName,7);\ncookie.setCookie('token',response.data.token,7)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("由于这里的用户认证是基于用户名和密码的认证，那么如果想基于手机做登录验证，就需要重新写一个认证方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1：在users.django_rest_view新建user_auth.py模块，重写CustomBackend认证\nfrom django.contrib.auth.backends import ModelBackend\nfrom django.contrib.auth import get_user_model\nfrom django.db.models import Q\n\nUser = get_user_model()\n\nclass CustomBackend(ModelBackend):\n    def authenticate(self, request, username=None, password=None, **kwargs):\n        try:\n            user = User.objects.get(Q(username=username) | Q(mobile=username))\n            if user.check_password(password):\n                return user\n        except Exception as e:\n            return None\n\n\n2: 在settings文件中使用CustomBackend\n# 6：设置用户自定义认证\nAUTHENTICATION_BACKENDS = (\n    'users.django_rest_view.CustomBackend',\n)\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("打个断点在CustomBackend中，再次post方法请求login登录, 发现自定义认证已经生效")])]),s._v(" "),n("li",[n("p",[s._v("对于JWT，可以设置一些全局属性, 在settings文件中设置")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 7： JWG设置其他属性\nJWT_AUTH = {\n    # 设置前缀\n\t'JWT_AUTH_HEADER_PREFIX': 'JWT',\n    # 设置Token过期时间\n\t'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300),\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"五-手机登录发送短信验证码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-手机登录发送短信验证码"}},[s._v("#")]),s._v(" 五：手机登录发送短信验证码")]),s._v(" "),n("ul",[n("li",[s._v("本次使用网易的第三方短信验证码, 在apps中创建一个utils包，在utils包下创建一个msg_code.py模块, 由于无法购买验证。因此，这里使用的是网易默认生成的随机验证码")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("import random\nimport datetime\nimport time\nimport hashlib\nimport requests\nimport json\n\nclass WYMSM:\n    def __init__(self, mobile, code=None):\n        self.mobile = mobile\n        self.code = code\n\n    def __get_header(self):\n        # appkey = '9038e2fed1d8380f2cc0a10b5d27f674'\n        appkey = '18a605bdd94221a910637e2ea80d186b'\n        # appsecret = '209cf1b090cf'\n        appsecret = 'a8a466273805'\n\n        nonce = random.randint(10000, 100000000)\n\n        ctime = datetime.datetime.utcnow()\n        curtime = str(int(time.mktime(ctime.timetuple())))\n        s = appsecret + str(nonce) + curtime\n        checksum = hashlib.sha1(s.encode('utf-8')).hexdigest()\n        Content_Type = \"application/x-www-form-urlencoded;charset=utf-8\"\n        header = {'Content-Type': Content_Type, 'AppKey': appkey, 'Nonce': str(nonce), 'CurTime': curtime,\n                  'CheckSum': checksum}\n        return header\n\n    def send(self):\n        url = 'https://api.netease.im/sms/sendcode.action'\n        header = self.__get_header()\n        data = {'mobile': str(self.mobile), 'template_id': '14829124'}\n        response = requests.post(url=url, data=data, headers=header)\n        text = json.loads(response.text)\n        return text\n\n\nif __name__ == '__main__':\n    msm = WYMSM('16673103093')\n    ret = msm.send()\n    code = ret['obj']\n    print(code)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br")])]),n("h3",{attrs:{id:"六-用户注册页面-drf实现短信验证接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-用户注册页面-drf实现短信验证接口"}},[s._v("#")]),s._v(" 六：用户注册页面，DRF实现短信验证接口")]),s._v(" "),n("ul",[n("li",[s._v("后台接口实现逻辑")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t前端页面中，用户点击注册，填写了手机号码后，点击免费获取验证码，那么此时请求将会提交到后台，后台的SMSVerifyCodeViewSet响应获取验证码的请求，在MsmSerializer对用户的手机号码进行验证。在DRF中对字段验证使用serializers，查看手机号码是否合法。由于在VerifyCode这个Model中code字段是必须填写的字段，因此这里使用serializers.Serializer显示说明需要验证的字段。\n\t如果用户注册的手机号码合法性验证通过，那么通过网易云信发送验证码给用户，如果发送成功将验证码和手机号写入到数据表中, \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("在urls.py文件中添加验证码请求的路由")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 用户注册发送短信验证码的路由\nrouter.register(r'codes', SMSVerifyCodeViewSet, base_name='codes')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[n("p",[s._v("在users.django_rest_view下创建verify_code.py模块，新建SMSVerifyCodeViewSet接收前端的验证码post请求。在SMSVerifyCodeViewSet中重写了create方法，"),n("code",[s._v("重写create方法的目的在于：①：MsmSerializer只对mobile字段进行了验证，那么写入数据库的时候，code字段缺失会报错。②：给用户发送验证码具有成功或失败的状态，需要根据发送验证码的状态判断是否写入post的数据到数表中")])])]),s._v(" "),n("li",[n("p",[s._v("这里后台生成的验证码之后，再调用网易云信接口发送验证码给用户，网易云信发送的验证码不是之前的验证码，这是由于自己没有购买短信服务")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from rest_framework import mixins\nfrom rest_framework import viewsets\nfrom ..serializers import MsmSerializer\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom utils.msg_code import WYMSM\nfrom random import choice\nfrom ..models import VerifyCode\n\n# 接收post请求\nclass SMSVerifyCodeViewSet(mixins.CreateModelMixin, viewsets.GenericViewSet):\n\n    # 声明序列化类使用MsmSerializer\n    serializer_class = MsmSerializer\n\n    # 生成4位数的验证码，这是一个扩充的方法，也可以写成外部函数\n    def generate_code(self):\n        sends = \"1234567890\"\n        random_str = []\n        for i in range(4):\n            random_str.append(choice(sends))\n        return ''.join(random_str)\n\t\n\t\n    # 重写create方法的目的在于需要判断是否需要将用户post的数据写入到数据表中\n    def create(self, request, *args, **kwargs):\n        # 获取到post提交mobile的结果\n        serializer = self.get_serializer(data=request.data)\n        # 判断mobile是否合法，如果合法继续执行下面的操作，不合法直接Response 400错误\n        serializer.is_valid(raise_exception=True)\n\n        # 如果mobile合法，获取用户提交的mobile\n        mobile = serializer.validate_data['mobile']\n\n        # 发送网易验证码到用户\n        wy = WYMSM(mobile, self.generate_code())\n        ret = wy.send()\n        # 这是网易云生成的随机验证码\n        real_code = ret['obj']\n        # 网易云状态码\n        code = ret['code']\n\n        # 判断，如果短信发送失败返回400\n        if code != 200:\n            return Response(data={'mobile': mobile}, status=status.HTTP_400_BAD_REQUEST)\n        else:\n            # 如果发送成功，返回201, 且写入数据表\n            verify_code = VerifyCode(code=real_code, mobile=mobile)\n            verify_code.save()\n            return Response(data={'mobile': mobile}, status=status.HTTP_201_CREATED)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br")])]),n("ul",[n("li",[s._v("为了验证用户的手机mobile是否合法，需要在users下创建serializers下再创建verify_code.py模块。这里序列化继承的是"),n("code",[s._v("serializers.Serializer")]),s._v("而不是"),n("code",[s._v("serializers.ModelSerializer")]),s._v(" 是由于"),n("code",[s._v("VerifyCode")]),s._v("这个Model中，code字段是必填字段，如果使用"),n("code",[s._v("serializers.ModelSerializer")]),s._v("初始化会报错。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nimport re\nfrom Mxshop.settings import REGEX_MOBILE\nfrom datetime import datetime, timedelta\nfrom ..models import VerifyCode\n\nUser = get_user_model()\n\nclass MsmSerializer(serializers.Serializer):\n    # 指定对mobile字段序列化\n    mobile = serializers.CharField(max_length=11)\n\n    # 对post请求提交的mobile字段验证其合法性，这是的验证是基于max_length=11之上的扩充验证\n    def validate_mobile(self, mobile):\n        # 查询用户这个表是否已经有电话号码注册了, 这个.count()是获得queryset中元素的个数\n        if User.objects.filter(mobile=mobile).count():\n            raise serializers.ValidationError("用户已经存在")\n\n        # 验证手机号码是否合法\n        if not re.match(REGEX_MOBILE, mobile):\n            raise serializers.ValidationError("手机号码非法")\n\n        # 限制验证码发送频率\n        one_minute_ago = datetime.now() - timedelta(hours=0, minutes=0, seconds=60)\n        if VerifyCode.objects.filter(add_time__gt=one_minute_ago, mobile=mobile):\n            raise serializers.ValidationError("请在60后再请求验证码")\n\n        return mobile\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("ul",[n("li",[s._v("在settings中需要加入手机号码的正则匹配")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 8：手机号码验证正则\nREGEX_MOBILE = '^1((3[\\d])|(4[75])|(5[^3|4])|(66)|(7[013678])|(8[\\d])|(9[89]))\\d{8}$'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("在DRF的文档后台，请求"),n("code",[s._v("http://localhost:8000/codes/")])])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1355),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"七-用户注册接口实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-用户注册接口实现"}},[s._v("#")]),s._v(" 七：用户注册接口实现")]),s._v(" "),n("ul",[n("li",[s._v("当用户获得"),n("code",[s._v("验证码")]),s._v("之后，根据前端提示会填写密码，然后将表单数据post到后台，因此需要创建一个"),n("code",[s._v("UserViewSet")]),s._v("，来处理用户注册请求, 首先在urls.py模块中添加路由")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 添加用户收到验证码后的注册路由\nrouter.register(r'users', UserViewSet, base_name='users')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("创建users.django_rest_view.user_signup.py模块，创建UserViewSet，处理用户的post请求, 这里重写CreateModelMixin的create方法和perform_create方法目的是在create方法中调用perform_create方法的时候，将需要序列化save到数据表的User Model实例返回，制作token返回给客户端")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from rest_framework import mixins, viewsets\nfrom ..serializers import UserRegSerializer\nfrom django.contrib.auth import get_user_model\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom rest_framework_jwt.serializers import jwt_encode_handler, jwt_payload_handler\n\nUser = get_user_model()\n\n# 这里是CreateModelMixin，表示只处理post请求\nclass UserViewSet(mixins.CreateModelMixin, viewsets.GenericViewSet):\n\n    serializer_class = UserRegSerializer\n    # 这里添加queryset的目的是可以查询到User Model字段, 但是这里并没开放get请求和继承mixins.ListModelMixin， 因此可以注释掉\n    # queryset = User.objects.all()\n\n\n    # 如果用户注册完毕之后，让用户直接登录了，那么就需要将JWT的token返回给用户\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        # 获取User Model实例，制作payload\n        user = self.perform_create(serializer)\n        # 返回请求的时候，将用户的token也返回\n        re_dict = serializer.data\n        payload = jwt_payload_handler(user)\n        re_dict['token'] = jwt_encode_handler(payload)\n        re_dict['name'] = user.name if user.name else user.username\n\n        headers = self.get_success_headers(serializer.data)\n        return Response(re_dict, status=status.HTTP_201_CREATED, headers=headers)\n\n    def perform_create(self, serializer):\n        return serializer.save()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br")])]),n("ul",[n("li",[s._v("在users.serializers.user_signup.py模块中创建UserRegSerializer序列化类，对用户提交的字段进行验证。这里使用的是serializers.ModelSerializer，关联的Model是User, Meta类指定了关联的Model为User, 且先基于Model对'username', 'code', 'mobile', 'password'四个字段进行认证，但是User这个Model没有code字段的，又需要用户传递进来验证，所以在fields中必须填写code字段，如果不填写用户将无法上传。字段是write_only的，表明不需要序列化被API返回，且需要重写全局的validate方法，在validate方法中在验证通过的字段中删除code字段。用户注册此时上传的字段为username、code、password。username传递的值是电话号码，对username字段验证需要唯一，使用validators=[UniqueValidator(queryset=User.objects.all(), message='用户已经存在')]验证唯一性。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from datetime import datetime, timedelta\nfrom rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom ..models import VerifyCode\nfrom rest_framework.validators import UniqueValidator\n\nUser = get_user_model()\n\nclass UserRegSerializer(serializers.ModelSerializer):\n\n    username = serializers.CharField(required=True,\n                                     allow_blank=False,\n                                     validators=[UniqueValidator(queryset=User.objects.all(), message='用户已经存在')],\n                                     label='用户名')\n\n    # 这个code是一个多余的字段，不会保存到数据库中，只是做验证，因此需要在validate方法中将字段删除\n    # write_only表示不需要序列化，不被API输出\n    code = serializers.CharField(required=True,\n                                 max_length=4,\n                                 min_length=4,\n                                 help_text='验证码',\n                                 error_messages={'required': '请输入验证码', 'max_length': '验证码格式错误', 'min_length': '验证码格式错误', 'blank': '请输入验证码'},\n                                 label='验证码',\n                                 write_only=True)\n\n\n    # style表示不明文显示密码，且为write_only字段表明password不需要被序列化API返回\n    password = serializers.CharField(style={'input_type': 'password'},\n                                     label='密码' ,\n                                     write_only=True)\n\n    # 这里的code是用户post进来的code\n    def validate_code(self, code):\n\n        # 这里是取出VerifyCode手机号等于用户post的用户名的记录，按照倒叙排序\n        verify_records = VerifyCode.objects.filter(mobile=self.initial_data['username']).order_by(\"-add_time\")\n        # 如果用户名存在\n        if verify_records:\n            # 取出最后一条记录\n            last_records = verify_records[0]\n\n            # 验证验证码时间过期\n            five_minutes_ago = datetime.now() - timedelta(hours=0, minutes=5, seconds=0)\n            if five_minutes_ago ### last_records.add_time:\n                raise serializers.ValidationError('验证码过期')\n            # 验证验证码准确性\n            if last_records.code != code:\n                raise serializers.ValidationError('验证码过期')\n        # 如果用户名不存在\n        else:\n            raise serializers.ValidationError('验证码或电话号码错误')\n\n    # 对最后的合法字段进行过滤\n    def validate(self, attrs):\n\t    # 由于用户在mobile字段没有上传数据，因此这里将username的值，也就是手机号码赋值给mobile字段\n        attrs['mobile'] = attrs['username']\n        del attrs['code']\n        return attrs\n\n    # 由于ModelSerializer保存字段的时候是明文，密码需要加密保存\n    def create(self, validated_data):\n        # 先调用父类的create方法，获取user这一条记录对象\n        user = super().create(validated_data=validated_data)\n        # 让密码加密\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n\n    class Meta:\n        model = User\n        # 这里由于对User这个model中的mobile字段设置的是可以为空，如果用户登录的时候，没有post mobile字段，那么久不会报错\n        fields = ('username', 'code', 'mobile', 'password')\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br"),n("span",{staticClass:"line-number"},[s._v("67")]),n("br"),n("span",{staticClass:"line-number"},[s._v("68")]),n("br"),n("span",{staticClass:"line-number"},[s._v("69")]),n("br"),n("span",{staticClass:"line-number"},[s._v("70")]),n("br"),n("span",{staticClass:"line-number"},[s._v("71")]),n("br"),n("span",{staticClass:"line-number"},[s._v("72")]),n("br")])]),n("ul",[n("li",[s._v("在UserRegSerializer中重写了ModelSerializer的create方法，目的是在validate方法对字段验证通过后将字段写入User Model的时候，对用户上传的密码进行hash加密")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    # 由于ModelSerializer保存字段的时候是明文，密码需要加密保存\n    def create(self, validated_data):\n        # 先调用父类的create方法，获取user这一条记录对象\n        user = super().create(validated_data=validated_data)\n        # 让密码加密\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("这种对密码进行hash加密后再写入到数据表中，其实可以使用Django的信号量完成。在创建users.signals.py模块，这里对post操作的信号量进行捕捉之后，将密码加密后保存。这个信号量模块需要注册到users.apps.py模块中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.contrib.auth import get_user_model\n\nUser = get_user_model()\n\ndef create_user(sender, instance=None, created=False, **kwargs):\n    if created:\n        password = instance.password\n        instance.set_password(password)\n        instance.save()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from django.apps import AppConfig\n\nclass UsersConfig(AppConfig):\n    name = 'users'\n    verbose_name = '用户管理'\n\n    def ready(self):\n        import users.signals\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h3",{attrs:{id:"八-对用户注册功能小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八-对用户注册功能小结"}},[s._v("#")]),s._v(" 八：对用户注册功能小结")]),s._v(" "),n("ul",[n("li",[s._v("发送验证码功能")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t发送验证码功能使用了第三方接口，当后台收到验证码发送请求，首先基于SMSVerifyCodeViewSet对请求的处理，首先会将用户post的mobile传递给MsmSerializer进行字段验证，因为SMSVerifyCodeViewSet继承了CreateModelMixin，CreateModelMixin中的create方法中serializer = self.get_serializer(data=request.data)是获取用户提交的post数据且拿到MsmSerializer，MsmSerializer继承serializers.Serializer，没有对Model进行关联，因此没有Meta类，那么用户可以上传的字段取决于字段的定义(mobile = serializers.CharField(max_length=11)), 这里只上传mobile字段，那么就只定义一个mobile字段就好了。\n\t字段定义的时候，可以进行少许一些字段的验证，如果需要对字段进行更加严格的认证，可以重写 validate_字段名(self, 字段名)方法，例如：validate_mobile(self, mobile)方法，对mobile字段进行更加严格的认证，认证完毕后需要return返回，因为在SMSVerifyCodeViewSet中的CreateModelMixin的create方法中serializer.is_valid(raise_exception=True)会判断是否用户post的字段在MsmSerializer中验证通过，如果验证不通过直接返回400错误，如果验证通过，create方法才会进行向下进行。mobile = serializer.validated_data['mobile']获取验证通过的mobile的值，基于WYMSM网易云信对用户手机发送验证码，再获取验证发送状态，如果成功，手动将code和mobile写入到数据表，且将mobile序列化，基于API返回给客户端。\n\t这里SMSVerifyCodeViewSet继承的CreateModelMixin的create方法中默认是直接serializer.save()，直接将MsmSerializer中的字段写入到数据表，由于MsmSerializer是不是继承ModelSerializer，所以需要自己手动的将需要保存的字段写入到数据表(verify_code = VerifyCode(code=real_code, mobile=mobile) 且verify_code.save() )\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("用户获取到验证码，完成注册功能")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t当用户将 mobile、code、password三个字段post到后台，由UserViewSet处理，因为是post请求，所以也是继承mixins.CreateModelMixin，用到的serializer_class为UserRegSerializer，这次UserRegSerializer继承的是ModelSerializer，Meta类中关联的是User Model， 允许用户提交'username', 'code', 'mobile', 'password'四个字段的数据，在User Model中mobile是可以为空的，所以用户提交 'mobile' 是空数据也不会报错。\n\t因为用户提交的'username', 'code', 'password'有数据，因此需要使用类变量定义这3个字段的Field对数据进行初步的验证，label字段表示在DRF后台可以显示字段的中文名称，write_only表明字段不会序列化通过API返回给前端，style={'input_type': 'password'}指定的DRF后台不显示密码明文，error_messages指定验证错误返回的错误提示。这里对code字段进行了进一步验证，重写了validate_code方法，查询了VerifyCode表。重写validate方法目的是在字段验证通过后，将username字段的值赋值给mobile字段，且由于code字段在User Model中没有，因此需要删除code字段才能保持到User Model中。在serializer中重写create方法目的是将字段写入到User Model中对password字段进行加密，这里也可以基于Django的信号量，捕捉写入数据的信号量，在信号量中对password字段进行加密处理也可以。\n\t在UserViewSet的create方法其实可以不需要重写的，一般重写的目的是因为在serializer中没有与Model关联，无法直接写入数据或写入的字段不符合Model的要求，这种情况写才需要重写，自定义字段的写入。这里重写的目的是中create方法返回serializer.data时候，在data中加入其它字段，这里加入的是用户名和JWT生成的token字段，客户端获取到token可以直接写入cookie中，使得前端调整到login页面，用户直接登录，就不要用户再次手动登录了。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);