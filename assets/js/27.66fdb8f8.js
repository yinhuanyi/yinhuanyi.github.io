(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{1338:function(s,e,a){s.exports=a.p+"assets/img/2021-03-164.25.11.a659eaad.png"},1339:function(s,e,a){s.exports=a.p+"assets/img/2019-03-219.27.20.38300633.png"},1340:function(s,e,a){s.exports=a.p+"assets/img/2019-03-219.38.47.a9e2460e.png"},1341:function(s,e,a){s.exports=a.p+"assets/img/2019-03-2110.25.59.1e174999.png"},1342:function(s,e,a){s.exports=a.p+"assets/img/2019-03-2110.52.20.1ef99ce5.png"},1343:function(s,e,a){s.exports=a.p+"assets/img/2019-03-2111.17.10.10e0775c.png"},1344:function(s,e,a){s.exports=a.p+"assets/img/2019-03-2111.24.43.bd41ead8.png"},1345:function(s,e,a){s.exports=a.p+"assets/img/2019-03-2211.04.08.de01107f.png"},1346:function(s,e,a){s.exports=a.p+"assets/img/2019-09-269.58.13.9b6d7a4c.png"},1347:function(s,e,a){s.exports=a.p+"assets/img/2019-09-278.51.05.28e8b2c3.png"},1348:function(s,e,a){s.exports=a.p+"assets/img/2019-09-274.45.44.a5e44ed7.png"},1349:function(s,e,a){s.exports=a.p+"assets/img/2019-09-275.14.44.f2991356.png"},1350:function(s,e,a){s.exports=a.p+"assets/img/2019-09-275.36.10.47524502.png"},2448:function(s,e,a){"use strict";a.r(e);var n=a(9),r=Object(n.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h3",{attrs:{id:"_1-django-rest-framework入门"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-django-rest-framework入门"}},[s._v("#")]),s._v(" 1：Django Rest Framework入门")]),s._v(" "),n("ul",[n("li",[s._v("配置urls.py")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from users.views import TestView\nurl(r'^goods/$', TestView.as_view(), name='goods'),\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[s._v("在users.views中编写TestView")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from django.views.generic.base import View\nfrom goods.models import Goods\nimport json\nfrom django.core.serializers import serialize\nfrom django.http import HttpResponse, JsonResponse\n\nclass TestView(View):\n    def get(self, request):\n        goods = Goods.objects.all()[:10]\n        # 直接将数据库中的QuerySet对象转换为json数据格式\n        goods_json = serialize('json', goods)\n        print(type(goods_json))\n        print('serialize: --------{}'.format(goods_json))\n        return HttpResponse(content=goods_json, content_type='application/json')\n\n    def post(self,request):\n        pass\n\n\n\n# 如果返回的是字典类型的数据，也可以返回JsonResponse对象，因为JsonResponse是对HttpResponse对象的封装，也就是内部使用了json.dumps()\nclass TestView(View):\n    def get(self, request):\n        goods = Goods.objects.all()[:10]\n        goods_json = serialize('json', goods)\n        # 将json转换为列表\n        goods_list = json.loads(goods_json)\n        return JsonResponse(goods_list, safe=False)\n\n    def post(self, request):\n        pass\n\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br")])]),n("h3",{attrs:{id:"_2-django-rest-framework-api文档-这个在集成swagger才会用到"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-django-rest-framework-api文档-这个在集成swagger才会用到"}},[s._v("#")]),s._v(" 2：Django Rest Framework API文档（这个在集成swagger才会用到）")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("现将rest_framework加入到settings中的INSTALL_APPS列表中")])]),s._v(" "),n("li",[n("p",[s._v("安装"),n("code",[s._v("coreapi")]),s._v("这个包之后，就能够使用文档功能, 在根urls.py文件中加入，且设置"),n("code",[s._v("settings.py")]),s._v("文件中，设置"),n("code",[s._v("DEBUG = True")]),s._v("，如果"),n("code",[s._v("DEBUG = False")]),s._v("，那么css的静态文件请求不到的，如果要让CSS也请求到，那么需要配置CSS的解析，一般使用NGINX解析静态文件，那么就需要将项目中的CSS和Medis静态文件到拷贝到/data/目录下")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 支持 brower api文档\nurl(r'^docs/', include_docs_urls(title='django docs')),\n# 支持浏览器访问api认证，也就是用户和密码登录\nurl(r'^api-auth/', include('rest_framework.urls'))\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("那么访问"),n("code",[s._v("http://127.0.0.1:8000/docs/")]),s._v("效果如下")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1338),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"_3-编写第一个restful-api接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-编写第一个restful-api接口"}},[s._v("#")]),s._v(" 3：编写第一个restful api接口")]),s._v(" "),n("ul",[n("li",[s._v("在根urls.py中添加")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("url(r'^goods/', GoodsList.as_view(), name='goods'),\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("在users APP的views.py中创建GoodsList， 实现GET接口")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from rest_framework.response import Response\nfrom goods.serializer import GoodsSerializer\nclass GoodsList(APIView):\n    """\n    List all snippets, or create a new snippet.\n    """\n    def get(self, request, format=None):\n        goods = Goods.objects.all()\n        # many表示返回一个list， 如果不设置，则返回一个\n        goods_serializer = GoodsSerializer(goods, many=True)\n        return Response(goods_serializer.data)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("在goods APP中创建serializer.py文件, 创建GoodsSerializer，目的是序列化Goods Model中的字段. "),n("code",[s._v("这里指定了只序列化name、click_num两个字段")])]),s._v(" "),n("li",[n("strong",[s._v("(serializers的意义在于：Get请求的时候，序列化指定的Model字段。Post请求的时候，校验字段的合法性)")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from rest_framework import serializers\n\n\nclass GoodsSerializer(serializers.Serializer):\n    name = serializers.CharField(required=True, max_length=100)\n    click_num = serializers.IntegerField(default=0)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("请求/goods/返回HTML页面，这是browser API")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(523),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("这个GoodsList的描述 "),n("code",[s._v("List all snippets, or create a new snippet")]),s._v("， 可以在GoodsList这个view中进行设置")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class GoodsList(APIView):\n    """\n    这个是GoodsList的描述\n    """\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("点击OPTIONS")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1339),alt:"Alt text"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("name: 为view的名称\ndescription：为这个view的描述\nrenders：指定客户端展现的显示，可以是text纯文本，或application/json格式\nparses：指定服务器端能够解析的json类型\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("在GoodsSerializer中添加一个图片字段，看看有什么变化")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 指定需要序列号的字段\nclass GoodsSerializer(serializers.Serializer):\n    name = serializers.CharField(required=True, max_length=100)\n    click_num = serializers.IntegerField(default=0)\n    goods_front_image = serializers.ImageField()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("返回结果（goods_front_image字段的值为全路径，加上了settings文件中配置的/media/）")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1340),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("GoodsList的POST接口实现，serializer.save()会调用GoodsSerializer的create方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class GoodsList(APIView):\n    """\n    这个是GoodsList的描述\n    """\n    def get(self, request, format=None):\n        goods = Goods.objects.all()\n        # many 表示 多个list\n        goods_serializer = GoodsSerializer(goods, many=True)\n        return Response(goods_serializer.data)\n\n    def post(self, request, format=None):\n        # 将request.data的数据进行校验\n        # request.data会拿到post提交的字段\n        serializer = GoodsSerializer(data=request.data)\n        # 如果验证字段合法\n        if serializer.is_valid():\n            # 直接保存到数据库，这里会调用GoodsSerializer的create方法\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("ul",[n("li",[s._v("给GoodsSerializer添加create方法")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 指定需要序列号的字段\nclass GoodsSerializer(serializers.Serializer):\n    name = serializers.CharField(required=True, max_length=100)\n    click_num = serializers.IntegerField(default=0)\n    # goods_front_image = serializers.ImageField()\n\n    # 如果是post方法，在GoodsSerializer中，如果post提交的数据验证通过，会调用create方法，验证通过的字段会保存到validated_data中, Goods.objects.create(**validated_data)就是在数据库中添加一行纪律\n    def create(self, validated_data):\n        """\n        Create and return a new `Snippet` instance, given the validated data.\n        """\n        return Goods.objects.create(**validated_data)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("使用postman提交json数据")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1341),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"_4-使用serializers-modelserializer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用serializers-modelserializer"}},[s._v("#")]),s._v(" 4：使用serializers.ModelSerializer")]),s._v(" "),n("ul",[n("li",[s._v("修改GoodsSerializer类")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("使用Django中的serializers.ModelSerializer替换serializers.Serializer， 让代码更加简洁，GoodsSerializer继承serializers.ModelSerializer\n\n# 指定需要序列号的字段\nclass GoodsSerializer(serializers.ModelSerializer):\n    \n    # 指定需要序列化的Model，和Model中的字段\n    class Meta:\n        model = Goods\n        fields = ('name', 'click_num')\n        \n        # 可以将所有的字段全部序列化\n        # fields = '__all__'\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("ul",[n("li",[s._v("访问效果")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(523),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"_5-使用serializers-modelserializer实现嵌套数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用serializers-modelserializer实现嵌套数据"}},[s._v("#")]),s._v(" 5：使用serializers.ModelSerializer实现嵌套数据")]),s._v(" "),n("ul",[n("li",[s._v("在Goods这个Model中有个字段category是外键，指向了GoodsCategory的id， 如果让显示Goods列表的时候，把外键的引用的数据也展示出来呢？那么就可以在GoodsSerializer重写category字段")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from rest_framework import serializers\nfrom .models import Goods, GoodsCategory\n\n\nclass GoodsCategorySerializer(serializers.ModelSerializer):\n\n    class Meta:\n        model = GoodsCategory\n        fields = '__all__'\n\n# 指定需要序列化的字段\nclass GoodsSerializer(serializers.ModelSerializer):\n\t# 重写默认的序列化字段category，让category返回的不是id，而是实例的序列化字段\n    category = GoodsCategorySerializer()\n\n    # 指定需要序列化的Model，和Model中的字段\n    class Meta:\n        model = Goods\n        fields = '__all__'\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("ul",[n("li",[s._v("展示效果如下，将category的id为20的数据也展示出来了")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1342),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"_6-使用mixins-listmodelmixin-generics-genericapiview简化goodslist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-使用mixins-listmodelmixin-generics-genericapiview简化goodslist"}},[s._v("#")]),s._v(" 6：使用mixins.ListModelMixin, generics.GenericAPIView简化GoodsList")]),s._v(" "),n("ul",[n("li",[s._v("编辑views.py文件, 重写GoodsList")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('# 由于这个类，不允许用户直接提交数据创建数据，因此，没有post方法，如果允许用户提交数据，那么需要继承mixins.CreateModeMixin, 且实现post方法\nclass GoodsList(mixins.ListModelMixin,generics.GenericAPIView ):\n    """\n    这个是GoodsList的描述\n    """\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n        \n\t# 如果继承了mixins.CreateModeMixin，才会有self.create()方法\n\t#def post(self, request, *args, **kwargs):\n\t#\treturn self.create(request, *args, **kwargs)\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("ul",[n("li",[s._v("效果如下")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1343),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"_7-使用generics-listapiview简化goodslist"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-使用generics-listapiview简化goodslist"}},[s._v("#")]),s._v(" 7：使用generics.ListAPIView简化GoodsList")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('由于generics.ListAPIView继承了mixins.ListModelMixin和GenericAPIView，所以可以这么写, 内部已经重写了get()方法，因此继承了ListAPIView的自定义View就不需要再重写get()方法了\n\nclass GoodsList(generics.ListAPIView):\n    """\n    这个是GoodsList的描述\n    """\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("在rest_framework库下的generics.py中有很多封装好的View")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1344),alt:"Alt text"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("这里的规律是：Create表示添加，Retrieve表示操作一条数据，List表示操作多条数据，Destroy表示删除，Update表示更新\n\nListCreateAPIView：用于post提交之后添加多条数据\nRetrieveAPIView：用于返回一条数据\nListAPIView：用于返回一个表的数据，或多条数据\nCreateAPIView：添加一条数据\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"_8-配置rest-framework的分页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-配置rest-framework的分页"}},[s._v("#")]),s._v(" 8：配置rest-framework的分页")]),s._v(" "),n("ul",[n("li",[s._v("在settings文件中添加**"),n("code",[s._v("rest-framework")]),s._v("**的配置, 设置全局的分页效果")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 这里可以设置所有的rest framework库的配置\nREST_FRAMEWORK = {\n    'PAGE_SIZE': 10,\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[s._v("显示效果")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1345),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("同样也可以设置某个view的pagination样式")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 创建一个分页类\nfrom rest_framework.pagination import PageNumberPagination\n\nclass StandardResultsSetPagination(PageNumberPagination):\n    page_query_param = 'current_page'\n    page_size_query_param = 'page_size'\n    max_page_size = 100\n    page_size = 6\n    ordering = 'id'\n\n# 将这个分页类应用到一个View\nclass GoodsList(generics.ListAPIView):\n    \"\"\"\n    这个是GoodsList的描述\n    \"\"\"\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    # 应用分页类\n    pagination_class = StandardResultsSetPagination\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("ul",[n("li",[s._v("也可以动态指定每一页的goods的个数，例如在URL指定page_size为20，那么就会动态的分为3页")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1346),alt:"Alt text"}})]),s._v(" "),n("h3",{attrs:{id:"_9-配置viewsets和router完成商品的列表页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-配置viewsets和router完成商品的列表页"}},[s._v("#")]),s._v(" 9：配置Viewsets和Router完成商品的列表页")]),s._v(" "),n("ul",[n("li",[s._v("自定义view也可以基于ViewSet和Router实现ListView的功能")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('from rest_framework import mixins,viewsets\n\nclass GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n    """\n    List all snippets, or create a new snippet.\n    """\n\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    pagination_class = StandardResultsSetPagination\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("ul",[n("li",[s._v("继承了viewsets的自定义view需要配置action路由, 在urls.py文件中添加")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from goods.django_rest_view.view_base import GoodsListViewSet\n\n# 配置自定义ViewSet的get方法\ngoods_list = GoodsListViewSet.as_view({\n    'get': 'list',\n\n    # 如果view有创建接口，需要配置post方法\n    # 'post': 'create'\n})\n\n\n# 配置URL\nurlpatterns = [\n    url(r'^xadmin/', xadmin.site.urls),\n    url(r'^media/(?P<path>.*)$', serve, {\"document_root\": MEDIA_ROOT}),\n\n\n\n    # rest url\n    url(r'docs/',  include_docs_urls(title='电商平台')),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n\t\n\t# 配置viewset的URL，让访问goods的URL请求交由ViewSet的实例goods_list处理\n    url(r'^goods/$', goods_list, name='goods'),\n\n]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("ul",[n("li",[s._v("这里也可以使用router实例管理路由，将所有的API请求交由router实例处理，在router实例中只需要注册对应的url和自定义ViewSet即可，边界urls.py文件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from goods.django_rest_view.view_base import GoodsListViewSet\n\n# 导入默认路由\nfrom rest_framework.routers import DefaultRouter\nrouter = DefaultRouter()\n# 配置将访问goods的url让GoodsListViewSet这个view处理\nrouter.register(r'goods', GoodsListViewSet)\n\nurlpatterns = [\n    url(r'^xadmin/', xadmin.site.urls),\n    url(r'^media/(?P<path>.*)$', serve, {\"document_root\": MEDIA_ROOT}),\n\n    # rest url\n    url(r'docs/',  include_docs_urls(title='电商平台')),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n\n    # 将URL路由交给router管理\n    url(r'^', include(router.urls))\n]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("h3",{attrs:{id:"_10-drf中view的应用原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-drf中view的应用原理"}},[s._v("#")]),s._v(" 10：DRF中View的应用原理")]),s._v(" "),n("ul",[n("li",[s._v("drf中使用mixin实现对HTTP请求方法的绑定")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1347),alt:"Alt text"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("这些view的功能依赖于mixin\n\t\nmixin\n\tCreateModelMixin          : 实现了post与create的功能绑定，写入数据\n\tListModelMixin            : 实现了get与list的功能绑定，所有数据查询\n\tUpdateModelMixin          : 更新数据\n\tDestroyModelMixin\t\t  : 实现了删除数据\n\tRetriveModelMixin         : 实现了单个数据查询\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("ul",[n("li",[s._v("drf中常用view的继承关系")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("GenericViewSet                属于drf框架\n\tGenericAPIView            属于drf框架\n\t\tAPIView               属于drf框架\n\t\t\tView              属于django框架\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h3",{attrs:{id:"_11-drf中request和response类的介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-drf中request和response类的介绍"}},[s._v("#")]),s._v(" 11：DRF中Request和Response类的介绍")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("在DRF中，引入了一个Request和Response对象进行请求和响应，这两个对象分别继承于Djaong中常规的HttpRequest和SimpleTemplateResponse，相比其父类，它们提供了更灵活的请求解析和响应内容")])]),s._v(" "),n("li",[n("p",[s._v("Request介绍")])])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('Request类继承于Django中常规的HttpRequest，相比HttpRequest增加了灵活的请求解析和请求认证的支持。\n\n1:REST框架中提供了多种用于解析request的类，如JSONParser，FormParser等等，Request对象可以像处理form数据一样处理JSON数据和其他媒体类型的数据。经常我们会将请求解析为JSON数据的形式进行响应。\n\trequest.data：是Request对象的核心属性,它会返回请求体中所有的解析内容。能够处理任何数据，如文件和表单数据并且对适用于POST、PUT、PATCH方式请求。\n\trequest.query_params：是获取请求的查询参数，如假设通过GET方式请求http://127.0.0.1:8000/goods/?name=生鲜食品,则request.query_params返回的结果是{"name": "生鲜食品"}\n\t\n2: DRF中提供了按请求进行认证的机制\n\t①：对API的不同部分使用不同的认证策略\n\t②：支持多种身份验证策略\n\t③：对每个请求提供了用户和token信息\n\t\n\trequest.user： 该属性返回请求的用户\n\trequest.auth：该属性值返回身份验证上下文\n\trequest.authenticators：该属性值返回身份验证的list\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("ul",[n("li",[s._v("Response介绍")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("\t和HttpResponse对象相比，Response不需要通过实例化Render进行渲染，而是直接传入未渲染的数据。由于Response的渲染器无法处理复杂类型的数据，如Django中的Model实例，因此，需要在响应之前通过Serializer类进行序列化操作，将复杂类型序列化为Python原始数据类型。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"_12-drf中的过滤功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-drf中的过滤功能"}},[s._v("#")]),s._v(" 12：DRF中的过滤功能")]),s._v(" "),n("ul",[n("li",[s._v("传统方法是重写自定义view的get_queryset方法，实现过滤")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n    """\n    List all snippets, or create a new snippet.\n    """\n\n    # queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    pagination_class = StandardResultsSetPagination\n\n\n    # 重写get_queryset方法，实现对数据过滤\n    def get_queryset(self):\n        queryset = Goods.objects.all()\n        # 获取请求参数price_min的值作为过滤条件\n        price_min = self.request.query_params.get("price_min", 0)\n        if price_min:\n            queryset = queryset.filter(shop_price__gt=int(price_min))\n        return queryset\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("ul",[n("li",[s._v("如果重写了get_queryset方法，这里需要将urls.py文件的router路由方法还原, 才不会报错")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("# 配置自定义ViewSet的get方法\ngoods_list = GoodsListViewSet.as_view({\n    'get': 'list',\n    # 如果view有创建接口，需要配置post方法\n    # 'post': 'create'\n})\n\n\n\nurlpatterns = [\n    url(r'^xadmin/', xadmin.site.urls),\n    url(r'^media/(?P<path>.*)$', serve, {\"document_root\": MEDIA_ROOT}),\n\n    # rest url\n    url(r'docs/',  include_docs_urls(title='电商平台')),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework')),\n\n    url(r'^goods/$', goods_list, name='goods'),\n]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("ul",[n("li",[s._v("也可以使用DRF的filter进行过滤, 首先将django_filters加入到settings文件的INSTALLED_APPS中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'users.apps.UsersConfig',\n    'goods.apps.GoodsConfig',\n    'trade.apps.TradeConfig',\n    'user_operation.apps.UserOperationConfig',\n    'DjangoUeditor',\n    'xadmin',\n    'crispy_forms',\n    'rest_framework',\n    'django_filters',\n]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("ul",[n("li",[s._v("默认DRF使用的是DjangoFilterBackend, 不需要将此设置加入到settings文件中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("REST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[s._v("使用DjangoFilterBackend类对数据进行过滤")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n    """\n    List all snippets, or create a new snippet.\n    """\n    # 这里需要重新将queryset赋值\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    pagination_class = StandardResultsSetPagination\n    # 指定使用的过滤类\n    filter_backends = (DjangoFilterBackend, )\n    # 指定需要过滤的字段\n    filter_fields = (\'name\', \'shop_price\'  )\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("前端页面访问goods的时候会多一个"),n("code",[s._v("过滤器")]),s._v("标签，可以对返回的json数据进行过滤，过滤的URL会显示到浏览器端")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1348),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("也可以自己实现一个Filters类，实现自定义过滤, 在goods这个APP下创建一个filters.py模块，内容如下")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from django_filters import rest_framework as filters, NumberFilter\nfrom .models import Goods\n\nclass GoodsFilter(filters.FilterSet):\n    # 初始化过滤对象，对goods的价格小于等于或大于等于过滤\n    min_price = NumberFilter(field_name='shop_price', lookup_expr='gte')\n    max_price = NumberFilter(field_name='shop_price', lookup_expr='lte')\n\n    class Meta:\n        model = Goods\n        fields = ['min_price', 'max_price']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("将这个GoodsFilter类配置到自定义的ViewSet中")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n\n    # 这里需要重新将queryset赋值\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    pagination_class = StandardResultsSetPagination\n    # 指定使用的过滤类\n    filter_backends = (DjangoFilterBackend, )\n    # 指定自定义的过滤类\n    filter_class = GoodsFilter\n\n    # 重写get_queryset方法，实现对数据过滤\n    def get_queryset(self):\n        queryset = Goods.objects.all()\n        price_min = self.request.query_params.get("price_min", 0)\n        if price_min:\n            queryset = queryset.filter(shop_price__gt=int(price_min))\n        return queryset\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h3",{attrs:{id:"_13-drf中的搜索与排序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-drf中的搜索与排序"}},[s._v("#")]),s._v(" 13：DRF中的搜索与排序")]),s._v(" "),n("ul",[n("li",[s._v("数据的搜索功能也可以在过滤的基础上完成，搜索相当于SQL的like语句， 例如需要搜索"),n("code",[s._v("牛肉")]),s._v("相关的商品, 那么修改goods这个APP下的filters.py文件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from django_filters import rest_framework as filters, NumberFilter, CharFilter\nfrom .models import Goods\n\nclass GoodsFilter(filters.FilterSet):\n    # 初始化过滤对象，对goods的价格小于等于或大于等于过滤\n    min_price = NumberFilter(field_name='shop_price', lookup_expr='gte')\n    max_price = NumberFilter(field_name='shop_price', lookup_expr='lte')\n    # SQL的搜索过滤\n    name = CharFilter(field_name='name', lookup_expr='icontains')\n\n    class Meta:\n        model = Goods\n        fields = ['min_price', 'max_price', 'name']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("ul",[n("li",[s._v("访问goods，对商品名称进行搜索, 返回商品名称中包含'牛肉'的商品")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1349),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("其实也可以使用DRF自己的filter中的SearchFilter对商品进行搜索, 修改自定义GoodsListViewSet")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("from rest_framework.filters import SearchFilter, OrderingFilter\n\nclass GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n\n    # 这里需要重新将queryset赋值\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    pagination_class = StandardResultsSetPagination\n    # 指定使用的过滤类\n    filter_backends = (DjangoFilterBackend, SearchFilter)\n    # 指定需要过滤的类\n    filter_class = GoodsFilter\n    # 基于drf的filter，指定需要搜索的字典\n    search_fields = ('name', 'goods_brief', 'goods_desc')\n\n\n    # 重写get_queryset方法，实现对数据过滤\n    def get_queryset(self):\n        queryset = Goods.objects.all()\n        price_min = self.request.query_params.get(\"price_min\", 0)\n        if price_min:\n            queryset = queryset.filter(shop_price__gt=int(price_min))\n        return queryset\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("ul",[n("li",[s._v("访问goods，对商品名称进行搜索, 返回商品名称中包含'牛肉'的商品")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(1350),alt:"Alt text"}})]),s._v(" "),n("ul",[n("li",[s._v("其实在搜索字段中，也可以使用正则表达式, 对不同的字段的搜索使用不同的正则匹配模式，可以在字段前面加上"),n("code",[s._v("=、^、@、$")]),s._v("，例如对字段的值进行精确匹配，")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("search_fields = ['=username', '=email']\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[s._v("如果需要指定排序字段，可以直接使用OrderingFilter类")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class GoodsListViewSet(mixins.ListModelMixin, viewsets.GenericViewSet):\n\n    # 这里需要重新将queryset赋值\n    queryset = Goods.objects.all()\n    serializer_class = GoodsSerializer\n    pagination_class = StandardResultsSetPagination\n    # 指定使用的过滤类\n    filter_backends = (DjangoFilterBackend, SearchFilter, OrderingFilter)\n    # 指定需要过滤的类\n    filter_class = GoodsFilter\n    # 基于drf的filter，指定需要搜索的字典，\n    search_fields = ('name', 'goods_brief', 'goods_desc')\n    # 指定排序的字段\n    ordering_fields = ('shop_price',)\n\n\n    # 重写get_queryset方法，实现对数据过滤\n    def get_queryset(self):\n        queryset = Goods.objects.all()\n        price_min = self.request.query_params.get(\"price_min\", 0)\n        if price_min:\n            queryset = queryset.filter(shop_price__gt=int(price_min))\n        return queryset\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])])])}),[],!1,null,null,null);e.default=r.exports},523:function(s,e,a){s.exports=a.p+"assets/img/2019-03-219.17.06.9f4b9f96.png"}}]);