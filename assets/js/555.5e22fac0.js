(window.webpackJsonp=window.webpackJsonp||[]).push([[555],{2566:function(n,s,t){"use strict";t.r(s);var a=t(9),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h3",{attrs:{id:"一-flink连接kafka"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-flink连接kafka"}},[n._v("#")]),n._v(" "),t("strong",[t("code",[n._v("（一）Flink连接Kafka")])])]),n._v(" "),t("ul",[t("li",[n._v("从kafka中获取数据，再写入kafka中去")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class StreamingJob {\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t// 获取上下文环境\n\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n\t\t// 设置properties\n\t\tProperties properties = new Properties();\n\n\t\t// 设置bootstrap， groupid\n\t\tproperties.setProperty("bootstrap.servers", "192.168.1.11:9092");\n\t\tproperties.setProperty("group.id", "test");\n\n\t\t// 拿到数据源\n\t\tDataStream<String### data = env.addSource(new FlinkKafkaConsumer<>("test", new SimpleStringSchema(), properties));\n\n\t\t// 可以将数据打印出来\n\t\tdata.print().setParallelism(1);\n\n\t\t// 可以将数据写到kafka中去上去\n\t\tdata.addSink(new FlinkKafkaProducer<String>("test", new SimpleStringSchema(), properties));\n\n\t\t// 执行任务\n\t\tenv.execute("StreamingJob");\n\n\t}\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br")])]),t("ul",[t("li",[n._v("流的合并与拆分")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('public class SplitUnionCount {\n\n    public static void main(String[] args) throws Exception {\n        final ParameterTool params = ParameterTool.fromArgs(args);\n        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n        DataStream text;\n        //判断输入文件,否则直接获取words类的内容\n        if(params.has("input")){\n            text = env.readTextFile(params.get("input"));\n        }else {\n            text = env.fromElements(WordsData.WORDS);\n        }\n\n        SplitStream<Tuple2<String,Integer>### split = text.flatMap(new FlatMapFunction<String,Tuple2<String,Integer>>() {\n            @Override\n            public void flatMap(String s, Collector<Tuple2<String,Integer>### collector) throws Exception {\n                //按照单词进行分割\n                String [] words = s.split("\\\\W+");\n                for(String word:words){\n                    collector.collect(new Tuple2<>(word,1));\n                }\n            }\n        \n        }).split(new OutputSelector<Tuple2<String,Integer>>() {\n            @Override\n            public Iterable<String### select(Tuple2<String, Integer> values) {\n                //使用arraylist存储分流信息\n                List<String### output = new ArrayList<>();\n                //按照第一列单词是否包含the进行分组\n                if(values.f0.equals("the")){\n                    output.add("a");\n                }else {\n                    output.add("b");\n                }\n                return output;\n            }\n        });\n\n        //把分组a的split流转成data stream流\n        DataStream<Tuple2<String, Integer>### stream1= split.select("a").keyBy(0).sum(1);\n        //把分组b的split流转成data stream流\n        DataStream<Tuple2<String, Integer>### stream2 = split.select("b").keyBy(0).sum(1);\n\n        //union合并a、b两个数据流\n        DataStream<Tuple2<String, Integer>### stream = stream1.union(stream2).keyBy(0).sum(1);\n\n        if(params.has("output")){\n            stream.writeAsText(params.get("output"));\n        }else {\n            //输出包含the的统计\n            stream1.print();\n            //输出合并流之后的所有统计\n            stream.print();\n        }\n        env.execute("split union stream");\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);