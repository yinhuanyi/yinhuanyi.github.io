(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{2181:function(n,s,a){"use strict";a.r(s);var t=a(9),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("ul",[t("li",[n._v("并发是编程里面一个非常重要的概念，Go语言在语言层面天生支持并发，这也是Go语言流行的一个很重要的原因。"),t("a",{attrs:{href:"https://www.zhihu.com/question/20862617",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考文档"),t("OutboundLink")],1)])]),n._v(" "),t("h2",{attrs:{id:"一-并发基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-并发基础"}},[n._v("#")]),n._v(" 一：并发基础")]),n._v(" "),t("h3",{attrs:{id:"一-并发与并行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-并发与并行"}},[n._v("#")]),n._v(" (一)：并发与并行")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("并发：同一时间段内执行多个任务（你在用微信和两个女朋友聊天）。\n\n并行：同一时刻执行多个任务（你和你朋友都在用微信和女朋友聊天）。\n\nGo语言的并发通过goroutine实现。goroutine类似于线程，属于用户态的线程，我们可以根据需要创建成千上万个goroutine并发工作。\ngoroutine是由Go语言的运行时（runtime）调度完成，而线程是由操作系统调度完成，最终由内核级线程完成任务的执行操作。\n\nGo语言还提供channel在多个goroutine间进行通信。goroutine和channel是 Go 语言秉承的 CSP（Communicating Sequential Process）并发模式的重要实现基础。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br")])]),t("h3",{attrs:{id:"二-goroutine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-goroutine"}},[n._v("#")]),n._v(" (二)：Goroutine")]),n._v(" "),t("ul",[t("li",[n._v("不同编程语言实现并发编程的思想")])]),n._v(" "),t("div",{staticClass:"language-tex line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-tex"}},[t("code",[n._v("\t在java/c++中我们要实现并发编程的时候，我们通常需要自己维护一个线程池，并且需要自己去包装一个又一个的任务，同时需要自己去调度线程执行任务并维护上下文切换，这一切通常会耗费程序员大量的心智。那么能不能有一种机制，程序员只需要定义很多个任务，让系统去帮助我们把这些任务分配到CPU上实现并发执行呢？\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("ul",[t("li",[n._v("Goroutine")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\tGo语言中的goroutine就是这样一种机制，goroutine的概念类似于线程，但 goroutine是由Go的运行时（runtime）调度和管理的。Go程序会智能地将 goroutine 中的任务合理地分配给每个CPU。\n\tGo语言之所以被称为现代化的编程语言，就是因为它在语言层面已经内置了调度和上下文切换的机制。\n\t在Go语言编程中你不需要去自己写进程、线程、协程，你的技能包里只有一个技能–goroutine，当你需要让某个任务并发执行的时候，你只需要把这个任务包装成一个函数，开启一个goroutine去执行这个函数就可以了，就是这么简单粗暴。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h2",{attrs:{id:"二-goroutine基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-goroutine基础"}},[n._v("#")]),n._v(" 二：goroutine基础")]),n._v(" "),t("h3",{attrs:{id:"一-启动单个goroutine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-启动单个goroutine"}},[n._v("#")]),n._v(" (一)：启动单个goroutine")]),n._v(" "),t("ul",[t("li",[n._v("启动goroutine的方式非常简单，只需要在调用的函数（普通函数和匿名函数）前面加上一个go关键字")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func hello() {\n\tfmt.Println("Hello Goroutine!")\n}\nfunc main() {\n\tgo hello()\n\tfmt.Println("main goroutine done!")\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("ul",[t("li",[n._v("分析")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("首先为什么会先打印main goroutine done!是因为我们在创建新的goroutine的时候需要花费一些时间，而此时main函数所在的goroutine是继续执行的，还没有等到hello()函数执行，main函数就停止了\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("h3",{attrs:{id:"二-启动多个goroutine"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-启动多个goroutine"}},[n._v("#")]),n._v(" (二)：启动多个goroutine")]),n._v(" "),t("ul",[t("li",[n._v("在Go语言中实现并发就是这样简单，我们还可以启动多个goroutine。让我们再来一个例子： （这里使用了sync.WaitGroup来实现goroutine的同步）")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var wg sync.WaitGroup\n\nfunc hello(i int) {\n\tdefer wg.Done() // goroutine结束就登记-1\n\tfmt.Println("Hello Goroutine!", i)\n}\n\n\nfunc main() {\n\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1) // 启动一个goroutine就登记+1\n\t\tgo hello(i)\n\t}\n\n\twg.Wait() // 等待所有登记的goroutine都结束\n\tfmt.Println("main goroutine done!")\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br")])]),t("ul",[t("li",[n._v("分析")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\t多次执行上面的代码，会发现每次打印的数字的顺序都不一致。这是因为10个goroutine是并发执行的，而goroutine的调度是随机的。但是也取决于当前操作系统的内核线程数，如果内核数较多，那么同一时刻运行的goroutine较多\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("h3",{attrs:{id:"三-goroutine原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-goroutine原理"}},[n._v("#")]),n._v(" (三)：goroutine原理")]),n._v(" "),t("ul",[t("li",[n._v("可增长的栈")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\tOS线程（操作系统线程）一般都有固定的栈内存（通常为2MB）,一个goroutine的栈在其生命周期开始时只有很小的栈（典型情况下2KB），goroutine的栈不是固定的，他可以按需增大和缩小，goroutine的栈大小限制可以达到1GB，虽然极少会用到这么大。所以在Go语言中一次创建十万左右的goroutine也是可以的\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("ul",[t("li",[n._v("goroutine调度(GPM调度)")])]),n._v(" "),t("p",[t("img",{attrs:{src:a(694),alt:"Alt text"}})]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("GPM是Go语言运行时（runtime）层面的实现，是go语言自己实现的一套调度系统，区别于操作系统调度OS线程。\n\n\t1：G很好理解，就是个goroutine的，里面除了存放本goroutine信息外 还有与所在P的绑定等信息。\n\t2：P管理着一组goroutine队列，P里面会存储当前goroutine运行的上下文环境（函数指针，堆栈地址及地址边界），P会对自己管理的goroutine队列做一些调度（比如把占用CPU时间较长的goroutine暂停、运行后续的goroutine等等）当自己的队列消费完了就去全局队列里取，如果全局队列里也消费完了会去其他P的队列里抢任务。\n\t3：M（machine）是Go运行时（runtime）对操作系统内核线程的虚拟， M与内核线程一般是一一映射的关系， 一个groutine最终是要放到M上执行的；\n\n\nP与M一般也是一一对应的。他们关系是： P管理着一组G挂载在M上运行。当一个G长久阻塞在一个M上时，runtime会新建一个M，阻塞G所在的P会把其他的G 挂载在新建的M上。当旧的G阻塞完成或者认为其已经死掉时 回收旧的M\n\nP的个数是通过runtime.GOMAXPROCS设定（最大256），Go1.5版本之后默认为物理线程数。 在并发量大的时候会增加一些P和M，但不会太多，切换太频繁的话得不偿失。\n\n单从线程调度讲，Go语言相比起其他语言的优势在于OS线程是由OS内核来调度的，goroutine则是由Go运行时（runtime）自己的调度器调度的，Python的coroutine是自己控制调度(所以难度大),这个调度器使用一个称为m:n调度的技术（复用/调度m个goroutine到n个OS线程）。 其一大特点是goroutine的调度是在用户态下完成的， 不涉及内核态与用户态之间的频繁切换，包括内存的分配与释放，都是在用户态维护着一块大的内存池， 不直接调用系统的malloc函数（除非内存池需要改变），成本比调度OS线程低很多。 另一方面充分利用了多核的硬件资源，近似的把若干goroutine均分在物理线程上， 再加上本身goroutine的超轻量，以上种种保证了go调度方面的性能\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br")])]),t("h3",{attrs:{id:"四-设置gomaxprocs的意义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-设置gomaxprocs的意义"}},[n._v("#")]),n._v(" (四)：设置GOMAXPROCS的意义")]),n._v(" "),t("ul",[t("li",[n._v("介绍")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Go运行时的调度器使用GOMAXPROCS参数来确定需要使用多少个OS线程来同时执行Go代码。默认值是机器上的CPU核心数。例如在一个8核心的机器上，调度器会把Go代码同时调度到8个OS线程上（m:n调度中，Goroutine是m，GOMAXPROCS是的n, 将m个goroutine调度到n个OS线程上运行）。\n\nGo语言中可以通过runtime.GOMAXPROCS()函数设置当前程序并发时占用的CPU逻辑核心数。\n\nGo1.5版本之前，默认使用的是单核心执行。Go1.5版本之后，默认使用全部的CPU逻辑核心数。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("ul",[t("li",[n._v("我们可以通过将任务分配到不同的CPU逻辑核心上实现并行的效果，这里举个例子")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func a() {\n\tfor i := 1; i < 10; i++ {\n\t\tfmt.Println("A:", i)\n\t}\n}\n\nfunc b() {\n\tfor i := 1; i < 10; i++ {\n\t\tfmt.Println("B:", i)\n\t}\n}\n\nfunc main() {\n\t// 设置只使用1个核心\n\truntime.GOMAXPROCS(1)\n\tgo a()\n\tgo b()\n\ttime.Sleep(time.Second)\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br")])]),t("ul",[t("li",[n._v("输出分析: 只使用一个CPU核心，那么goroutine是线性运行的，因此打印的数字是连续的，而且先运行的是"),t("code",[n._v("go b()")]),n._v("这个函数，说明是函数压栈了"),t("code",[n._v("go b()")]),n._v("这个函数位于栈定，先被执行")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("B: 1\nB: 2\nB: 3\nB: 4\nB: 5\nB: 6\nB: 7\nB: 8\nB: 9\nA: 1\nA: 2\nA: 3\nA: 4\nA: 5\nA: 6\nA: 7\nA: 8\nA: 9\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br")])]),t("ul",[t("li",[n._v("小结: Go语言中的操作系统线程和goroutine的关系：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：一个操作系统线程对应用户态多个goroutine。\n\n2：go程序可以同时使用多个操作系统线程，能够利用操作系统的多核优势。\n\n3：goroutine和OS线程是多对多的关系，即m:n。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("h2",{attrs:{id:"三-channel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-channel"}},[n._v("#")]),n._v(" 三：Channel")]),n._v(" "),t("h3",{attrs:{id:"一-并发带来利好的思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-并发带来利好的思考"}},[n._v("#")]),n._v(" (一)：并发带来利好的思考")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：单纯地将函数并发执行是没有意义的。函数与函数间需要交换数据才能体现并发执行函数的意义。\n\n2：虽然可以使用共享内存进行数据交换，但是共享内存在不同的goroutine中容易发生竞态问题。为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。\n\n3：Go语言的并发模型是CSP（Communicating Sequential Processes），提倡通过通信共享内存而不是通过共享内存而实现通信。\n\n4：如果说goroutine是Go程序并发的执行体，channel就是它们之间的连接。channel是可以让一个goroutine发送特定值到另一个goroutine的通信机制。\n\n5：Go 语言中的通道（channel）是一种特殊的类型。通道像一个队列，总是遵循【先入先出】（First In First Out）的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。特别注意的是：没有goroutine存在的情况下，不能使用channel，否则会出现fatal error: all goroutines are asleep - deadlock!，一般情况下，channel操作是先读再写，如果channel的读写都是在goroutine中完成的，那么就没有写和读的顺序要求了\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("h3",{attrs:{id:"二-channel类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-channel类型"}},[n._v("#")]),n._v(" (二)：channel类型")]),n._v(" "),t("ul",[t("li",[n._v("channel是一种类型，一种引用类型(我们学过的引用类型还有："),t("strong",[n._v("指针、Slice、Map、接口")]),n._v(")。声明通道类型的格式如下：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var 变量 chan 元素类型\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("ul",[t("li",[n._v("举几个例子：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var ch1 chan int   // 声明一个传递整型的通道\nvar ch2 chan bool  // 声明一个传递布尔型的通道\nvar ch3 chan []int // 声明一个传递int切片的通道\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h3",{attrs:{id:"三-创建channel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-创建channel"}},[n._v("#")]),n._v(" (三)：创建channel")]),n._v(" "),t("ul",[t("li",[n._v("通道是引用类型，通道类型的空值是nil")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var ch chan int\nfmt.Println(ch) // <nil>\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("ul",[t("li",[n._v("声明的通道后需要使用make函数初始化之后才能使用(我们学过的使用make函数初始化的数据类型有切片和Map)，创建channel的格式如下：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("make(chan 元素类型, [缓冲大小])\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("ul",[t("li",[n._v("channel的缓冲大小是可选的")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("ch4 := make(chan int, 100) // 设置100个缓冲大小\nch5 := make(chan bool)\nch6 := make(chan []int)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h3",{attrs:{id:"四-channel操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-channel操作"}},[n._v("#")]),n._v(" (四)：channel操作")]),n._v(" "),t("ul",[t("li",[n._v("通道有发送（send）、接收(receive）和关闭（close）三种操作， 发送和接收都使用"),t("code",[n._v("<-")]),n._v("符号，上面这段代码能够通过编译，但是执行的时候会出现错误："),t("code",[n._v("fatal error: all goroutines are asleep - deadlock!")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func recv(c chan int)  {\n\tret := <- c\n\tfmt.Printf("接收成功 %d\\n", ret)\n}\n\nfunc main() {\n\tch := make(chan int)\n\tch <- 10 // 把10发送到ch中\n\tgo recv(ch) // 启用goroutine从通道接收值\n\tclose(ch)\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("ul",[t("li",[n._v("goroutine deadlock 分析")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("为什么会出现deadlock错误呢？\n\t因为我们使用ch := make(chan int)创建的是无缓冲的通道，无缓冲的通道只有在有人接收值的时候才能写入数据，如果没有接受者，写入就会被阻塞，因为main函数也是goroutine，在goroutine中向channel写入数据，无人接收，就会出现阻塞，导致goroutine deadlock问题\n\n上面的代码会阻塞在ch <- 10这一行代码形成死锁，那如何解决这个问题呢？\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br")])]),t("ul",[t("li",[n._v("第一种方法是"),t("code",[n._v("先使用goroutine接收，再写入数据")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func recv(c chan int)  {\n\tret := <- c\n\tfmt.Printf("接收成功 %d\\n", ret)\n}\n\nfunc main() {\n\tch := make(chan int)\n\tgo recv(ch) // 启用goroutine从通道接收值\n\tch <- 10 // 把10发送到ch中\n\tclose(ch)\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("ul",[t("li",[n._v("第二种方法是"),t("code",[n._v("读写都使用goroutine")]),n._v("，那么main函数就不会被阻塞，不会导致goroutine deadlock问题")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 读\nfunc recv(c <- chan int)  {\n\tret := <- c\n\tfmt.Printf("接收成功 %d\\n", ret)\n}\n\n// 写\nfunc send(c chan <- int, num int)  {\n\tc <- num\n}\n\nfunc main() {\n\n\tch := make(chan int)\n\tgo send(ch, 10)\n\tgo recv(ch)\n\n\t// 这里必须要等一下，goroutine启动需要一点时间\n\ttime.Sleep(1 * time.Second)\n\tclose(ch)\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br")])]),t("ul",[t("li",[n._v("关闭chan通道的时机【通道可以被垃圾回收机制回收，通道的关闭不是必须的】")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\t关于关闭通道需要注意的事情是，只有在通知接收方goroutine所有的数据都发送完毕的时候才需要关闭通道。\n\t通道是可以被垃圾回收机制回收的，它和关闭文件是不一样的，在结束操作之后关闭文件是必须要做的，但关闭通道不是必须的。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("ul",[t("li",[n._v("关闭后的通道有以下特点")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：对一个关闭的通道再发送值就会导致panic。\n\n2：关闭一个已经关闭的通道会导致panic。\n\n3：对一个关闭的通道进行接收会一直获取值直到通道为空。\n\n4：对一个关闭的并且没有值的通道执行接收操作会得到【对应类型】的零值。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("h3",{attrs:{id:"五-有缓存的通道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-有缓存的通道"}},[n._v("#")]),n._v(" (五)：有缓存的通道")]),n._v(" "),t("ul",[t("li",[n._v("解决goroutine deadlock问题的方法，"),t("strong",[t("code",[n._v("还有一种就是使用有缓冲区的通道")])]),n._v("。我们可以在使用make函数初始化通道的时候为其指定通道的容量，我们可以使用内置的len函数获取通道内元素的数量，使用cap函数获取通道的容量，虽然我们很少会这么做。例如：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 只要通道的容量大于零，那么该通道就是有缓冲的通道，通道的容量表示通道中能存放元素的数量。就像你小区的快递柜只有那么个多格子，格子满了就装不下了，就阻塞了，等到别人取走一个快递员就能往里面放一个。\n\nfunc main() {\n\tch := make(chan int, 1) // 创建一个容量为1的有缓冲区通道\n\tch <- 10\n\tfmt.Println("发送成功")\n\tlengh := len(ch)   // 获取当前chan的元素个数\n\tfmt.Println(lengh)\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("h3",{attrs:{id:"六-for-range-从通道循环取值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-for-range-从通道循环取值"}},[n._v("#")]),n._v(" (六)：for range 从通道循环取值")]),n._v(" "),t("ul",[t("li",[n._v("当向通道中发送完数据时，我们可以通过close函数来关闭通道。"),t("code",[n._v("当通道被关闭时，再往该通道发送值会引发panic")]),n._v("，从该通道取值的操作会先取完通道中的值，再然后取到的值一直都是对应类型的零值。那如何判断一个通道是否被关闭了呢？"),t("code",[n._v("当chan被关闭后，range 循环自动退出")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func main() {\n\n\t// 下面例子中我们看到有两种方式在接收值的时候判断该通道是否被关闭，不过我们通常使用的是for range的方式。使用for range遍历通道，当通道被关闭的时候就会退出for range\n\n\tch1 := make(chan int)\n\tch2 := make(chan int)\n\t// 开启goroutine将0~100的数发送到ch1中\n\tgo func() {\n\t\tfor i := 0; i < 100000; i++ {\n\t\t\tch1 <- i\n\t\t}\n\t\tclose(ch1) // 这里ch1必须要手动close，否则从ch1读取数据会被死锁\n\t}()\n\n\t// 开启goroutine从ch1中接收值，并将该值的平方发送到ch2中\n\tgo func() {\n\t\tfor {\n\t\t\ti, ok := <-ch1 // 通道关闭后再取值ok=false\n\t\t\tif !ok {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tch2 <- i * i\n\t\t}\n\t\tclose(ch2)\n\t}()\n\n\t// 在主goroutine中从ch2中接收值打印\n\tfor i := range ch2 { // 通道关闭后会退出for range循环\n\t\tfmt.Println(i)\n\t}\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br")])]),t("h3",{attrs:{id:"七-单向通道"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-单向通道"}},[n._v("#")]),n._v(" (七)：单向通道")]),n._v(" "),t("ul",[t("li",[n._v("有的时候我们会将"),t("code",[n._v("通道作为参数")]),n._v("在多个任务函数间传递，很多时候我们在不同的任务函数中使用通道都会对其进行限制，比如限制通道在函数中只能发送或只能接收。Go语言中提供了"),t("code",[n._v("单向通道")]),n._v("来处理这种情况。例如，我们把上面的例子改造如下："),t("strong",[n._v("(<- 在chan左边是读取，在右边是写入)")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// out chan<- int 表示：只能写入\nfunc counter(out chan<- int) {\n\tfor i := 0; i < 100; i++ {\n\t\tout <- i\n\t}\n\tclose(out)\n}\n\n// out chan<- int 表示：只能写入，in <-chan int 表示：只能读取\nfunc squarer(out chan<- int, in <-chan int) {\n\tfor i := range in {\n\t\tout <- i * i\n\t}\n\tclose(out)\n}\n\n// in <-chan int 表示：只能读取\nfunc printer(in <-chan int) {\n\tfor i := range in {\n\t\tfmt.Println(i)\n\t}\n}\n\nfunc main() {\n\tch1 := make(chan int)\n\tch2 := make(chan int)\n\n\tgo counter(ch1)\n\tgo squarer(ch2, ch1)\n\tprinter(ch2)\n}\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br")])]),t("ul",[t("li",[n._v("分析")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\tchan<- int是一个只写单向通道（只能对其写入int类型值），可以对其执行发送操作但是不能执行接收操作；\n\t\n\t<-chan int是一个只读单向通道（只能从其读取int类型值），可以对其执行接收操作但是不能执行发送操作。\n\t\n在函数传参及任何赋值操作中可以将双向通道转换为单向通道，但反过来是不可以的。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("h3",{attrs:{id:"八-channel异常总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八-channel异常总结"}},[n._v("#")]),n._v(" (八)：channel异常总结")]),n._v(" "),t("p",[t("img",{attrs:{src:a(695),alt:"Alt text"}})]),n._v(" "),t("ul",[t("li",[n._v("当channel是有数据，"),t("code",[n._v("只要发送者先关闭channel，那么接受者会从channel里面将数据全部读取，直到channel中没有数据，接受者再读取返回的是chan的类型零值")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// receive 在channel关闭的情况下，依然可以获取数据，直到返回类型零值\nfunc receive(ch chan int) {\n\tfor {\n\t\tselect {\n\t\tcase ret := <-ch:\n\t\t\tfmt.Printf("ret = %#v\\n", ret)\n\t\t\ttime.Sleep(time.Second)\n\t\t}\n\t}\n}\n\n// send 向channel中写入10个值，然后关闭\nfunc send(ch chan int)  {\n\n\ti := 1\n\tfor {\n\t\tch <- i\n\t\ti ++\n\t\tif i > 10 {\n\t\t\tclose(ch)\n\t\t\tbreak\n\t\t}\n\t}\n\n}\n\nfunc main() {\n\n\tch := make(chan int)\n\n\tgo receive(ch)\n\tgo send(ch)\n\n\tselect {}\n}\n\n\n输出结果：\nret = 1\nret = 2\nret = 3\nret = 4\nret = 5\nret = 6\nret = 7\nret = 8\nret = 9\nret = 10\nret = 0\nret = 0\nret = 0\nret = 0\nret = 0\nret = 0\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br")])]),t("h3",{attrs:{id:"九-goroutine池实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九-goroutine池实现"}},[n._v("#")]),n._v(" (九)：Goroutine池实现")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("goroutine池的作用："),t("strong",[n._v("提高响应速度，减少创建协程的时间，更好的管理goroutine，定期回收")])])]),n._v(" "),t("li",[t("p",[n._v("goroutine池实现思想："),t("strong",[n._v("基于for循环将函数任务写入到EntryChannel，在Pool运行的时候，协程启动多个worker，并且同时从EntryChannel中读取任务写入到JobsChannel中，worker内部从JobsChannel中读取任务，并且执行")])])])]),n._v(" "),t("p",[t("img",{attrs:{src:a(696),alt:"Alt text"}})]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('/* 有关Task任务相关定义及操作 */\n//定义任务Task类型,每一个任务Task都可以抽象成一个函数\n\ntype Task struct {\n\tf func() error //一个无参的函数类型\n}\n\n// NewTask Task构造函数，\nfunc NewTask(f func() error) *Task {\n\tt := Task{\n\t\tf: f,\n\t}\n\n\treturn &t\n}\n\n// Execute 执行Task任务的方法\nfunc (t *Task) Execute() {\n\t_ = t.f() //调用任务所绑定的函数\n}\n\n/* 有关协程池的定义及操作 */\n//定义池类型\n\ntype Pool struct {\n\t// 对外接收Task的入口\n\tEntryChannel chan *Task\n\n\t// 协程池最大worker数量,限定Goroutine的个数\n\tworkerNum int\n\n\t// 协程池内部的任务就绪队列, // 就绪队列是什么\n\tJobsChannel chan *Task\n}\n\n// NewPool 创建一个协程池\nfunc NewPool(cap int) *Pool {\n\tp := Pool{\n\t\tEntryChannel: make(chan *Task),\n\t\tworkerNum:    cap,\n\t\tJobsChannel:  make(chan *Task),\n\t}\n\n\treturn &p\n}\n\n// worker 协程池创建一个worker并且开始工作，worker的目的是获取task，并且执行\nfunc (p *Pool) worker(workId int) {\n\t//worker不断的从JobsChannel内部任务队列中拿任务\n\tfor task := range p.JobsChannel {\n\t\t//如果拿到任务,则执行task任务\n\t\ttask.Execute()\n\t\tfmt.Println("worker ID ", workId, " 执行完毕任务")\n\t}\n}\n\n// Run 让协程池Pool开始工作\nfunc (p *Pool) Run() {\n\t// 首先根据协程池的worker数量限定,开启固定数量的Worker, 每一个Worker用一个Goroutine承载\n\tfor i := 1; i <= p.workerNum; i++ {\n\t\tgo p.worker(i)\n\t}\n\n\t// 将entry中获取任务，写入到jobs中\n\tfor task := range p.EntryChannel {\n\t\tp.JobsChannel <- task\n\t}\n\n\t// 执行完毕需要关闭JobsChannel\n\tclose(p.JobsChannel)\n\n\t// 执行完毕需要关闭EntryChannel\n\tclose(p.EntryChannel)\n}\n\n//主函数\nfunc main() {\n\t// 创建一个任务函数\n\ttask := func() error {\n\t\tfmt.Println(time.Now())\n\t\ttime.Sleep(1 * time.Second)\n\t\treturn nil\n\t}\n\n\t//创建一个Task\n\tt := NewTask(task)\n\n\t//创建一个协程池,最大开启个协程worker\n\tp := NewPool(3)\n\n\t//开一个协程 不断的向 Pool 输送打印一条时间的task任务\n\tgo func() { // 这里是不断写入任务\n\t\tfor {\n\t\t\tp.EntryChannel <- t\n\t\t}\n\t}()\n\n\t//启动协程池p\n\tp.Run()\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br"),t("span",{staticClass:"line-number"},[n._v("89")]),t("br"),t("span",{staticClass:"line-number"},[n._v("90")]),t("br"),t("span",{staticClass:"line-number"},[n._v("91")]),t("br"),t("span",{staticClass:"line-number"},[n._v("92")]),t("br"),t("span",{staticClass:"line-number"},[n._v("93")]),t("br"),t("span",{staticClass:"line-number"},[n._v("94")]),t("br"),t("span",{staticClass:"line-number"},[n._v("95")]),t("br"),t("span",{staticClass:"line-number"},[n._v("96")]),t("br"),t("span",{staticClass:"line-number"},[n._v("97")]),t("br"),t("span",{staticClass:"line-number"},[n._v("98")]),t("br"),t("span",{staticClass:"line-number"},[n._v("99")]),t("br"),t("span",{staticClass:"line-number"},[n._v("100")]),t("br")])]),t("h2",{attrs:{id:"四-select多路复用-主要作用在channel上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-select多路复用-主要作用在channel上"}},[n._v("#")]),n._v(" 四：select多路复用(主要作用在channel上)")]),n._v(" "),t("h3",{attrs:{id:"一-select与channel直接的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-select与channel直接的关系"}},[n._v("#")]),n._v(" (一)：select与channel直接的关系")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("在某些场景下我们需要同时从多个通道接收数据")]),n._v("。通道在接收数据时，如果没有数据可以接收将会发生阻塞。你也许会写出如下代码使用遍历的方式来实现：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("for{\n    // 尝试从ch1接收值\n    data, ok := <-ch1\n    // 尝试从ch2接收值\n    data, ok := <-ch2\n    …\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("ul",[t("li",[n._v("分析")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("上面的代码是死循环代码，不断阻塞的从通道获取数据，但是如果一直阻塞操作，会消耗CPU的计算时间。\n\n为了应对这种场景，Go内置了select关键字，可以同时响应多个通道的操作，类似于IO多路复用，注意：select不是死循环，任何一个case可以获取到值，都可以结束select\n\n\nselect{\n    case <-ch1:\n        ...\n    case data := <-ch2:\n        ...\n    case ch3<-data:\n        ...\n    default:\n        默认操作\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("ul",[t("li",[n._v("select的使用：由输出结果")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('func main() {\n\n\tch := make(chan int, 1)\n\n\tfor i := 0; i < 10; i++ {\n\t\tselect {\n\t\t\n\t\tcase x := <-ch:\n\t\t\tfmt.Printf("读取数据:%d\\n", x)\n\n\t\tcase ch <- i:\n\t\t\tfmt.Printf("写入数据:%d\\n", i)\n\t\t\t\n\t\t// 这里的default不会运行，只有channel阻塞情况下才会执行default\n\t\tdefault:\n\t\t\tfmt.Printf("default: %d\\n", i)\n\t\t}\n\t}\n\n}\n\n\n// 输出结果：\n写入数据:0\n读取数据:0\n写入数据:2\n读取数据:2\n写入数据:4\n读取数据:4\n写入数据:6\n读取数据:6\n写入数据:8\n读取数据:8\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br")])]),t("ul",[t("li",[n._v("这里会报错：fatal error: all goroutines are asleep - deadlock!，由于case从通道无法获取数据，main函数被阻塞了")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func main() {\n\tch := make(chan int, 1)\n\n\tfor i := 0; i < 10; i++ {\n\t\tselect {\n\t\tcase x := <-ch:\n\t\t\tfmt.Println(x)\n\t\t}\n\t}\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br")])]),t("ul",[t("li",[n._v("使用select语句能提高代码的可读性")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：可处理一个或多个channel的发送/接收操作。\n2：如果多个case同时满足，select会随机选择一个。\n3：对于没有case的select{}会报错， all goroutines are asleep - deadlock!\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h2",{attrs:{id:"五-并发安全和锁-参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-并发安全和锁-参考文档"}},[n._v("#")]),n._v(" 五：并发安全和锁 "),t("a",{attrs:{href:"https://geektutu.com/post/hpg-mutex.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考文档"),t("OutboundLink")],1)]),n._v(" "),t("h3",{attrs:{id:"一-有时候在go代码中可能会存在多个goroutine同时操作一个资源-临界区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-有时候在go代码中可能会存在多个goroutine同时操作一个资源-临界区"}},[n._v("#")]),n._v(" (一)：有时候在Go代码中可能会存在多个goroutine同时操作一个资源（临界区）")]),n._v(" "),t("ul",[t("li",[n._v("举个例子，在goroutine在并发情况下，输出结果为："),t("code",[n._v("7031")]),n._v("，而且这个数字不确定的")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var x int64\nvar wg sync.WaitGroup\n\nfunc add() {\n\n\tdefer wg.Done()  // goroutine结束就减一\n\tfor i := 0; i < 5000; i++ {\n\t\tx = x + 1\n\t}\n\n}\n\nfunc main() {\n\t//runtime.GOMAXPROCS(1)\n\twg.Add(2) // 启动一个goroutine就登记+1\n\tgo add()\n\tgo add()\n\twg.Wait()\n\tfmt.Println(x)\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br")])]),t("ul",[t("li",[n._v("在goroutine在串行运行下，输出："),t("code",[n._v("10000")]),n._v("，这是数字是确定的")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var x int64\nvar wg sync.WaitGroup\n\nfunc add() {\n\n\tdefer wg.Done()  // goroutine结束就减一\n\tfor i := 0; i < 5000; i++ {\n\t\tx = x + 1\n\t}\n\n}\n\nfunc main() {\n\truntime.GOMAXPROCS(1)\n\twg.Add(2) // 启动一个goroutine就登记+1\n\tgo add()\n\tgo add()\n\twg.Wait()\n\tfmt.Println(x)\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br")])]),t("h3",{attrs:{id:"二-互斥锁sync-mutex解决临界资源访问-这里的sync-mutex完全互斥-隔离级别最高"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-互斥锁sync-mutex解决临界资源访问-这里的sync-mutex完全互斥-隔离级别最高"}},[n._v("#")]),n._v(" (二)：互斥锁sync.Mutex解决临界资源访问，这里的sync.Mutex完全互斥 "),t("strong",[n._v("隔离级别最高")])]),n._v(" "),t("ul",[t("li",[n._v("互斥锁是一种常用的控制共享资源访问的方法，它能够保证同时只有一个goroutine可以访问共享资源。Go语言中使用sync包的Mutex类型来实现互斥锁。 使用互斥锁来修复上面代码的问题：")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nvar x int64\nvar wg sync.WaitGroup\nvar lock sync.Mutex\n\nfunc add() {\n\tfor i := 0; i < 5000; i++ {\n\t\tlock.Lock() // 加锁\n\t\tx = x + 1\n\t\tlock.Unlock() // 解锁\n\t}\n\twg.Done()\n}\n\nfunc main() {\n\twg.Add(2)\n\tgo add()\n\tgo add()\n\twg.Wait()\n\tfmt.Println(x)\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br")])]),t("h3",{attrs:{id:"三-读写互斥锁sync-rwmutex-读操作不会阻塞-适合读多写少情况下使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-读写互斥锁sync-rwmutex-读操作不会阻塞-适合读多写少情况下使用"}},[n._v("#")]),n._v(" (三)：读写互斥锁sync.RWMutex，读操作不会阻塞(适合读多写少情况下使用)")]),n._v(" "),t("ul",[t("li",[n._v("读写锁在Go语言中使用sync包中的RWMutex类型，"),t("code",[n._v("读写锁分为两种：读锁和写锁")]),n._v("。当一个"),t("code",[n._v("goroutine获取读锁之后")]),n._v("，其他的goroutine如果是获取读锁会继续获得锁，如果是获取写锁就会等待；当一个"),t("code",[n._v("goroutine获取写锁之后")]),n._v("，其他的goroutine无论是获取读锁还是写锁都会等待, "),t("code",[n._v("在读数据过程中，goroutine依然是并发的")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nvar (\n\tx      int64\n\twg     sync.WaitGroup\n\tlock   sync.Mutex    // 申请全局互斥锁\n\trwlock sync.RWMutex  // 申请全局读写互斥锁\n\n)\n\n\nfunc write() {\n\tlock.Lock()   // 加互斥锁\n\t// rwlock.Lock() // 加写锁\n\tx = x + 1\n\ttime.Sleep(10 * time.Millisecond)     // 假设写操作耗时10毫秒\n\t// rwlock.Unlock()                       // 解写锁\n\tlock.Unlock()                      // 解互斥锁\n\twg.Done()\n}\n\nfunc read() {\n\tlock.Lock()                  // 加互斥锁\n\t// rwlock.RLock()               // 加读锁\n\ttime.Sleep(time.Millisecond) // 假设读操作耗时1毫秒\n\t// rwlock.RUnlock()             // 解读锁\n\tlock.Unlock()                // 解互斥锁\n\twg.Done()\n}\n\nfunc main() {\n\n\tstart := time.Now()\n\tfor i := 0; i < 10; i++ {\n\t\twg.Add(1)\n\t\tgo write()\n\t}\n\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(1)\n\t\tgo read()\n\t}\n\n\twg.Wait()\n\tend := time.Now()\n\n\t// 计算耗时 加读写锁耗时 111.788809ms\n\t// 计算耗时 加互斥锁耗时 1.410702012s\n\tfmt.Println(end.Sub(start))\n\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br")])]),t("h3",{attrs:{id:"四-sync-waitgroup-实现并发任务同步-需要注意sync-waitgroup是一个结构体-作为参数传递的时候要传递指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-sync-waitgroup-实现并发任务同步-需要注意sync-waitgroup是一个结构体-作为参数传递的时候要传递指针"}},[n._v("#")]),n._v(" "),t("code",[n._v("(四)：sync.WaitGroup:实现并发任务同步")]),n._v("(需要注意sync.WaitGroup是一个结构体，作为参数传递的时候要传递指针)")]),n._v(" "),t("ul",[t("li",[n._v("在代码中生硬的使用time.Sleep肯定是不合适的，Go语言中可以使用sync.WaitGroup来实现并发任务的同步。 sync.WaitGroup有以下几个方法：")])]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"center"}},[n._v("方法名")]),n._v(" "),t("th",{staticStyle:{"text-align":"center"}},[n._v("功能")])])]),n._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"center"}},[n._v("(wg * WaitGroup) Add(delta int)")]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("计数器+delta")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[n._v("(wg *WaitGroup) Done()")]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("计数器-1")])]),n._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"center"}},[n._v("(wg *WaitGroup) Wait()")]),n._v(" "),t("td",{staticStyle:{"text-align":"center"}},[n._v("阻塞直到计数器变为0")])])])]),n._v(" "),t("ul",[t("li",[t("p",[n._v("sync.WaitGroup使用思想：内部维护着一个计数器，计数器的值可以增加和减少。例如当我们启动了N 个并发任务时，就将计数器值增加N。每个任务完成时通过调用Done()方法将计数器减1。通过调用Wait()来等待并发任务执行完，当计数器值为0时，表示所有并发任务已经完成")])]),n._v(" "),t("li",[t("p",[n._v("我们利用sync.WaitGroup将上面的代码优化一下：")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var wg sync.WaitGroup\n\nfunc hello() {\n\tdefer wg.Done()\n\tfmt.Println("Hello Goroutine!")\n}\n\nfunc main() {\n\n\twg.Add(1)\n\tgo hello()\n\twg.Wait()\n\tfmt.Println("main goroutine done!")\n\t\t\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("h3",{attrs:{id:"五-sync-once和init函数的区别-共同特点-只执行一次操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-sync-once和init函数的区别-共同特点-只执行一次操作"}},[n._v("#")]),n._v(" "),t("code",[n._v("(五)：sync.Once和init函数的区别")]),n._v("(共同特点：只执行一次操作)")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("sync.Once这个类型与init函数很像("),t("strong",[n._v("init函数是导入包的时候，只执行一次")]),n._v(")，不同的是 "),t("strong",[n._v("init 函数"),t("code",[n._v("是当所在的 package 首次被加载时执行，若迟迟未被使用，则既浪费了内存，又延长了程序加载时间")])]),n._v("，"),t("strong",[n._v("sync.Once "),t("code",[n._v("可以在代码的任意位置初始化和调用，因此可以延迟到使用时再执行，并发场景下是线程安全的, 一个针对只执行一次场景的解决方案")])])])]),n._v(" "),t("li",[t("p",[n._v("在多数情况下，"),t("strong",[n._v("sync.Once 被用于控制变量的初始化")]),n._v("，这个变量的读写满足如下三个条件：")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：当且仅当第一次访问某个变量时，进行初始化（写）\n\n2：变量初始化过程中，所有读都被阻塞，直到初始化完成\n\n3：变量仅初始化一次，初始化完成后驻留在内存里，然后可以随意读了\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("ul",[t("li",[n._v("sync.Once只有一个Do方法，其签名如下")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 需要传递的参数是函数\nfunc (o *Once) Do(f func()) {}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("ul",[t("li",[n._v("下面的例子，在多个goroutine中执行回调函数，但是只会执行一次，"),t("code",[n._v("init config 仅打印了一次，说明 sync.Once 中的初始化函数仅执行了一次")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('// 全局变量\nvar (\n\tonce   sync.Once\n\tconfig *Config\n)\n\ntype Config struct {\n\tServer string\n\tPort   int64\n}\n\nfunc InitConfig() *Config {\n\n\tonce.Do(func() {\n\t\tvar err error\n\t\tconfig = &Config{Server: os.Getenv("SERVER_URL")}\n\t\tconfig.Port, err = strconv.ParseInt(os.Getenv("PORT"), 10, 0)\n\t\tif err != nil {\n\t\t\tconfig.Port = 8080 // default port\n\t\t}\n\t\tlog.Println("init config")\n\t})\n\n\treturn config\n\n}\n\nfunc main() {\n\n\t// 虽然这里初始化了10次，但是只会执行一次\n\tfor i := 0; i < 10; i++ {\n\t\tgo func() {\n\t\t\t_ = InitConfig()\n\t\t}()\n\t}\n\ttime.Sleep(time.Second)\n\n}\n\n// 输出结果：2021/08/09 16:45:17 init config\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br")])]),t("ul",[t("li",[n._v("下面这个例子实现了"),t("code",[n._v("缓存单例")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var (\n\tinstance *CacheSingleton\n\tonce sync.Once\n)\n\n// CacheSingleton 全局缓存单例\ntype CacheSingleton struct {\n\tdata map[string]int\n\tlock sync.RWMutex\n}\n\nfunc GetInstance() *CacheSingleton {\n\tonce.Do(func() {\n\t\tinstance = &CacheSingleton{\n\t\t\tdata: make(map[string]int),\n\t\t}\n\t})\n\treturn instance\n}\n\nfunc main() {\n\tinstance1 := GetInstance()\n\tinstance2 := GetInstance()\n\t// 同一个实例\n\tfmt.Println(instance1==instance2)\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br")])]),t("ul",[t("li",[n._v("sync.Once 的原理")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("1：保证变量仅被初始化一次，需要有个标志来判断变量是否已初始化过，若没有则需要初始化。\n\n2：线程安全，支持并发，需要互斥锁来实现。\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br")])]),t("h3",{attrs:{id:"六-sync-map-线程安全的map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-sync-map-线程安全的map"}},[n._v("#")]),n._v(" "),t("code",[n._v("(六)：sync.Map")]),n._v("(线程安全的map)")]),n._v(" "),t("ul",[t("li",[n._v("map不是并发安全的，sync.Map类型提供了一个线程安全的map，且无需make初始化类型，就行Python一样使用")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var m = sync.Map{}\n\nfunc main() {\n\n\twg := sync.WaitGroup{}\n\n\tfor i := 0; i < 20; i++ {\n\n\t\twg.Add(1)\n\n\t\tgo func(n int) {\n\t\t\tkey := strconv.Itoa(n)\n\t\t\t// 写入\n\t\t\tm.Store(key, n)\n\t\t\t// 读取\n\t\t\tvalue, _ := m.Load(key)\n\t\t\tfmt.Printf("k=:%v,v:=%v\\n", key, value)\n\t\t\twg.Done()\n\t\t}(i)\n\n\t}\n\n\twg.Wait()\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br")])]),t("h3",{attrs:{id:"七-原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-原子操作"}},[n._v("#")]),n._v(" (七)：原子操作")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("加锁是并发编程中实现同步的一种方法，一般有sync.Mutex互斥锁、sync.RWMutex读写锁，而这种锁机制的底层是基于原子操作实现的，一般直接通过CPU指令实现。Golang中原子操作由"),t("code",[n._v("sync/atomic")]),n._v("包提供")])]),n._v(" "),t("li",[t("p",[n._v("1：读取操作")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func LoadInt32(addr *int32) (val int32)\nfunc LoadInt64(addr *int64) (val int64)\nfunc LoadUint32(addr *uint32) (val uint32)\nfunc LoadUint64(addr *uint64) (val uint64)\nfunc LoadUintptr(addr *uintptr) (val uintptr)\nfunc LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("ul",[t("li",[n._v("2：写入操作")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func StoreInt32(addr *int32, val int32)\nfunc StoreInt64(addr *int64, val int64)\nfunc StoreUint32(addr *uint32, val uint32)\nfunc StoreUint64(addr *uint64, val uint64)\nfunc StoreUintptr(addr *uintptr, val uintptr)\nfunc StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("p",[n._v("-3：修改操作")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func AddInt32(addr *int32, delta int32) (new int32)\nfunc AddInt64(addr *int64, delta int64) (new int64)\nfunc AddUint32(addr *uint32, delta uint32) (new uint32)\nfunc AddUint64(addr *uint64, delta uint64) (new uint64)\nfunc AddUintptr(addr *uintptr, delta uintptr) (new uintptr)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("ul",[t("li",[n._v("4：交换操作")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func SwapInt32(addr *int32, new int32) (old int32)\nfunc SwapInt64(addr *int64, new int64) (old int64)\nfunc SwapUint32(addr *uint32, new uint32) (old uint32)\nfunc SwapUint64(addr *uint64, new uint64) (old uint64)\nfunc SwapUintptr(addr *uintptr, new uintptr) (old uintptr)\nfunc SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("ul",[t("li",[n._v("5：比较并交换操作")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)\nfunc CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\nfunc CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)\nfunc CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)\nfunc CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)\nfunc CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br")])]),t("ul",[t("li",[n._v("下面的例子，在并发操作过程中，多个goroutine修改一个count变量，对比不加锁、加互斥锁、原子操作 三种方式运行的结果和时间")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// Counter 计算器实现两个方法，\ntype Counter interface {\n\tInc()\n\tLoad() int64\n}\n\n// CommonCounter 普通计数器\ntype CommonCounter struct {\n\tcounter int64\n}\n\n// Inc 加一\nfunc (c *CommonCounter) Inc() {\n\tc.counter++\n}\n\n// Load 返回计数器的数\nfunc (c *CommonCounter) Load() int64 {\n\treturn c.counter\n}\n\n// MutexCounter 互斥锁版\ntype MutexCounter struct {\n\tcounter int64\n\tlock    sync.Mutex\n}\n\nfunc (m *MutexCounter) Inc() {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\tm.counter++\n}\n\nfunc (m *MutexCounter) Load() int64 {\n\tm.lock.Lock()\n\tdefer m.lock.Unlock()\n\treturn m.counter\n}\n\n// AtomicCounter 原子操作版\ntype AtomicCounter struct {\n\tcounter int64\n}\n\n// Inc 是加一的原子操作\nfunc (a *AtomicCounter) Inc() {\n\t//\n\tatomic.AddInt64(&a.counter, 1)\n}\n\n\nfunc (a *AtomicCounter) Load() int64 {\n\treturn atomic.LoadInt64(&a.counter)\n}\n\nfunc test(c Counter) {\n\tvar wg sync.WaitGroup\n\tstart := time.Now()\n\n\n\tfor i := 0; i < 1000; i++ {\n\t\twg.Add(1)\n\n\t\tgo func() {\n\t\t\twg.Done()\n\t\t\tc.Inc()\n\n\t\t}()\n\t}\n\n\twg.Wait()\n\tend := time.Now()\n\n\tfmt.Println(c.Load(), end.Sub(start))\n}\n\nfunc main() {\n\tc1 := CommonCounter{} // 非并发安全\n\ttest(&c1)\n\n\tc2 := MutexCounter{} // 使用互斥锁实现并发安全\n\ttest(&c2)\n\n\tc3 := AtomicCounter{} // 并发安全且比互斥锁效率更高\n\ttest(&c3)\n}\n\n\n\n\n\n输出结果：\n0 1.023ms  // 结果错误\n1000 1.0445ms\n1000 513.7µs\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br"),t("span",{staticClass:"line-number"},[n._v("56")]),t("br"),t("span",{staticClass:"line-number"},[n._v("57")]),t("br"),t("span",{staticClass:"line-number"},[n._v("58")]),t("br"),t("span",{staticClass:"line-number"},[n._v("59")]),t("br"),t("span",{staticClass:"line-number"},[n._v("60")]),t("br"),t("span",{staticClass:"line-number"},[n._v("61")]),t("br"),t("span",{staticClass:"line-number"},[n._v("62")]),t("br"),t("span",{staticClass:"line-number"},[n._v("63")]),t("br"),t("span",{staticClass:"line-number"},[n._v("64")]),t("br"),t("span",{staticClass:"line-number"},[n._v("65")]),t("br"),t("span",{staticClass:"line-number"},[n._v("66")]),t("br"),t("span",{staticClass:"line-number"},[n._v("67")]),t("br"),t("span",{staticClass:"line-number"},[n._v("68")]),t("br"),t("span",{staticClass:"line-number"},[n._v("69")]),t("br"),t("span",{staticClass:"line-number"},[n._v("70")]),t("br"),t("span",{staticClass:"line-number"},[n._v("71")]),t("br"),t("span",{staticClass:"line-number"},[n._v("72")]),t("br"),t("span",{staticClass:"line-number"},[n._v("73")]),t("br"),t("span",{staticClass:"line-number"},[n._v("74")]),t("br"),t("span",{staticClass:"line-number"},[n._v("75")]),t("br"),t("span",{staticClass:"line-number"},[n._v("76")]),t("br"),t("span",{staticClass:"line-number"},[n._v("77")]),t("br"),t("span",{staticClass:"line-number"},[n._v("78")]),t("br"),t("span",{staticClass:"line-number"},[n._v("79")]),t("br"),t("span",{staticClass:"line-number"},[n._v("80")]),t("br"),t("span",{staticClass:"line-number"},[n._v("81")]),t("br"),t("span",{staticClass:"line-number"},[n._v("82")]),t("br"),t("span",{staticClass:"line-number"},[n._v("83")]),t("br"),t("span",{staticClass:"line-number"},[n._v("84")]),t("br"),t("span",{staticClass:"line-number"},[n._v("85")]),t("br"),t("span",{staticClass:"line-number"},[n._v("86")]),t("br"),t("span",{staticClass:"line-number"},[n._v("87")]),t("br"),t("span",{staticClass:"line-number"},[n._v("88")]),t("br"),t("span",{staticClass:"line-number"},[n._v("89")]),t("br"),t("span",{staticClass:"line-number"},[n._v("90")]),t("br"),t("span",{staticClass:"line-number"},[n._v("91")]),t("br"),t("span",{staticClass:"line-number"},[n._v("92")]),t("br"),t("span",{staticClass:"line-number"},[n._v("93")]),t("br"),t("span",{staticClass:"line-number"},[n._v("94")]),t("br"),t("span",{staticClass:"line-number"},[n._v("95")]),t("br")])]),t("ul",[t("li",[n._v("小结")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("原子操作可以直接操作CPU指令集，是锁实现的底层原理，但是除了某些特殊的底层应用，使用通道或者sync包的函数/类型实现同步更好\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports},694:function(n,s,a){n.exports=a.p+"assets/img/2021-08-054.17.47.31aa1282.png"},695:function(n,s,a){n.exports=a.p+"assets/img/2021-06-021.42.02.dc588360.png"},696:function(n,s,a){n.exports=a.p+"assets/img/2021-08-063.14.35.6364dac2.png"}}]);