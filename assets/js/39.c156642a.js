(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{2391:function(s,n,e){"use strict";e.r(n);var a=e(9),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一-socket套接字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-socket套接字"}},[s._v("#")]),s._v(" 一：Socket套接字")]),s._v(" "),a("h3",{attrs:{id:"一-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-概念"}},[s._v("#")]),s._v(" (一)：概念")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：socket是一个抽象的概念，表示TCP连接的一端\n2：通过socket可以进行数据发送或接收\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h2",{attrs:{id:"二-网络io模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-网络io模型"}},[s._v("#")]),s._v(" 二：网络IO模型")]),s._v(" "),a("h3",{attrs:{id:"一-概念-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-概念-2"}},[s._v("#")]),s._v(" (一)：概念")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("阻塞式IO")])])]),s._v(" "),a("p",[a("img",{attrs:{src:e(953),alt:"Alt text"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("非阻塞式IO")])])]),s._v(" "),a("p",[a("img",{attrs:{src:e(954),alt:"Alt text"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("IO多路复用")])])]),s._v(" "),a("p",[a("img",{attrs:{src:e(955),alt:"Alt text"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("信号驱动式IO")])])]),s._v(" "),a("p",[a("img",{attrs:{src:e(956),alt:"Alt text"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("异步IO")])])]),s._v(" "),a("p",[a("img",{attrs:{src:e(957),alt:"Alt text"}})]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("对比")])])]),s._v(" "),a("p",[a("img",{attrs:{src:e(958),alt:"Alt text"}})]),s._v(" "),a("h3",{attrs:{id:"二-io多路复用的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-io多路复用的区别"}},[s._v("#")]),s._v(" (二)：IO多路复用的区别")]),s._v(" "),a("ul",[a("li",[s._v("区别")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：Select模型：线性扫描所有监听的文件描述符fd\n2：Poll模型：同Select，性能有所优化\n3：Epoll模型：使用红黑树管理数据结构，性能好\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"三-select-基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-select-基本原理"}},[s._v("#")]),s._v(" (三)：select 基本原理")]),s._v(" "),a("ul",[a("li",[s._v("select网络模型的基本概念")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t在多路复⽤的模型中， ⽐较常⽤的有select模型和epoll模型。 这两个都是系统接⼝， 由操作系统提供。当然， Python的select模块进⾏了更⾼级的封装。\n\t⽹络通信被Unix系统抽象为⽂件的读写， 通常是⼀个设备， 由设备驱动程序提供， 驱动可以知道⾃身的数据是否可⽤。 ⽀持阻塞操作的设备驱动通常会实现⼀组⾃身的等待队列， 如读/写等待队列⽤于⽀持上层(⽤户层)所需的block或non-block操作。 设备的⽂件的资源如果可⽤（ 可读或者可写） 则会通知进程， 反之则会让进程睡眠， 等到数据到来可⽤的时候， 再唤醒进程。这些设备的⽂件描述符被放在⼀个数组中， 然后select调⽤的时候遍历这个数组， 如果发现某个⽂件描述符可读则会返回该⽂件描述符。 当遍历结束之后，如果仍然没有⼀个可⽤设备⽂件描述符， select让⽤户进程则会睡眠， 直到等待资源可⽤的时候在唤醒， 遍历之前那个监视的数组。 每次遍历都是依次进⾏判断的。 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("select网络模型**"),a("code",[s._v("优点")]),s._v("**")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tselect⽬前⼏乎在所有的平台上⽀持， 其良好跨平台⽀持也是它的⼀个优点\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("select网络模型**"),a("code",[s._v("缺点")]),s._v("**")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tselect的⼀个缺点在于单个进程能够监视的⽂件描述符的数量存在最⼤限制，在Linux上⼀般为1024， 可以通过修改宏定义甚⾄重新编译内核的⽅式提升这⼀限制， 但是这样也会造成效率的降低。⼀般来说这个数⽬和系统内存关系很⼤， 具体数⽬可以cat /proc/sys/fs/filemax察看。 32位机默认是1024个。 64位机默认是2048.对socket进⾏扫描时是依次扫描的， 即采⽤轮询的⽅法， 效率较低。当套接字⽐较多的时候， 每次select()都要通过遍历FD_SETSIZE个Socket来完成调度， 不管哪个Socket是活跃的， 都遍历⼀遍。 这会浪费很多CPU时间\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"四-epoll-基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-epoll-基本原理"}},[s._v("#")]),s._v(" (四) epoll 基本原理")]),s._v(" "),a("ul",[a("li",[s._v("epoll网络模型的基本概念")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t直到Linux2.6才出现了由内核直接支持的实现方法，那就是epoll，它几乎具备了之前所说的一切优点，被公认为Linux2.6下性能最好的多路I/O就绪通知方法\n\tepoll可以同时支持水平触发(level trigger)和边缘触发（edge trigger: 只告诉进程哪些文件描述符刚刚变为就绪状态，它只说一遍，如果我们没有采取行动，那么它将不会再次告知，这种方式称为边缘触发），理论上边缘触发的性能要更高一些，但是代码实现相当复杂\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("epoll网络模型可注册的事件(常用的)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：EPOLLIN 读就绪事件 (self.epoll.register(fileno, select.EPOLLIN))\n2：EPOLLOUT 写就绪事件 (self.epoll.register(fileno, select.EPOLLOUT))\n3：EPOLLPRI 有事件紧急读取 (self.epoll.register(fileno, select.EPOLLPRI))\n4：EPOLLET 设置ET边缘触发 (self.epoll.register(fileno, select.EPOLLIN|select.EPOLLET))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("epoll网络模型的**"),a("code",[s._v("优点")]),s._v("**")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t1：没有最⼤并发连接的限制， 能打开的FD(指的是⽂件描述符， 通俗的理解就是套接字对应的数字编号)的上限远⼤于1024\n\t2：效率提升，不是轮询的⽅式，不会随着FD数⽬的增加效率下降。 只有活跃可⽤的FD才会调⽤callback函数； 即epoll最⼤的优点就在于它只管你“活跃”的连接，⽽跟连接总数⽆关， 因此在实际的⽹络环境中， epoll的效率就会远远⾼于select和poll\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("epoll网络模型实现相关代码(代码基本思想："),a("code",[s._v("首先socket绑定一个端口且监听，基于select库创建一个epoll对象，基于epoll对象注册这个socket的文件句柄和可写事件，在循环体中，获取epoll(文件句柄, 事件)对象列表，遍历这个列表，获取文件句柄和事件。如果这个文件句柄是socket的文件句柄，标明此时有客户端发送了连接请求，那么调用socket的accept方法，建立TCP连接，且获取这个conn连接和客户端addr，且保存起来，同时基于epoll对象注册这个连接的文件句柄和可写事件。如果遍历出来的事件是可读事件，标明此时是已经建立TCP连接的客户端发送了数据到服务器端，那么调用连接的recv方法，接收客户端的数据，如果数据是空，那么服务器端主动断开连接")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# coding: utf-8\n"""\n"""\n\nimport socket\nimport select\n\n\n# 创建网络套接字\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n# 设置可以重复使⽤绑定端口\ns.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR, 1)\n# 绑定本机信息\ns.bind(("127.0.0.1",9000))\ns.listen()\n\n\n# 创建⼀个epoll对象\nepoll=select.epoll()\n# 查看这个socket对象的文件描述符\nprint(s.fileno()) # 3\n\n\n# 注册socket实例的文件描述符，并且注册一个写入事件\nepoll.register(s.fileno(), select.EPOLLIN|select.EPOLLET)\n\nconnections = {}\naddresses = {}\n\n# 循环等待客户端发送的连接请求或建立TCP连接后发送的数据\nwhile True:\n    # 获取epoll中的(文件句柄, 事件)对象列表, 这里的1是超时时长\n    epoll_list=epoll.poll(1)\n    # 对(文件句柄, 事件)对象列表遍历\n    for fileno, events in epoll_list:\n        # 如果文件句柄为socket实例的文件句柄，那么表示有客户端发送新建TCP连接请求\n        if fileno == s.fileno():\n            # 调用socket实例的accept方法，获取已建立连接的连接对象和客户端地址\n            conn, addr = s.accept()\n            print(\'有新的客户端到来%s\' % str(addr))\n            # 将已经建立的连接和客户端地址保存\n            connections[conn.fileno()] = conn\n            addresses[conn.fileno()] = addr\n            # 并且在epoll中注册这个连接的(文件句柄和读事件)\n            epoll.register(conn.fileno(), select.EPOLLIN | select.EPOLLET)\n\n        # 如果文件句柄不是socket的文件句柄，且事件可读，那肯定是已经建立的连接发送了数据\n        elif events == select.EPOLLIN:\n            # 先从保存的connects字典中取出文件句柄对应的连接\n            conn = connections[fileno]\n            # 再从连接中获读取1024字节\n            recvData = conn.recv(1024).strip()\n            # 如果数据大于0，打印一下\n            if len(recvData)>0:\n                print(\'recv:%s\'%recvData)\n\n            # 如果数据为空，表示客户端想断开连接\n            else:\n                # 在epoll中取消对这个文件句柄\n                epoll.unregister(fileno)\n                # 且服务器端将连接主动关闭\n                conn.close()\n                print("%s 已经下线" % str(addresses[fileno]))\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br")])]),a("h2",{attrs:{id:"三-async和await关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-async和await关键字"}},[s._v("#")]),s._v(" 三：async和await关键字")]),s._v(" "),a("h3",{attrs:{id:"一-可等待对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-可等待对象"}},[s._v("#")]),s._v(" (一)：可等待对象")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("可以在await语句中使用的对象称之为：可等待对象")]),s._v("，可等待对象的编程模型如下")])]),s._v(" "),a("p",[a("img",{attrs:{src:e(959),alt:"Alt text"}})]),s._v(" "),a("h3",{attrs:{id:"二-future的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-future的实现原理"}},[s._v("#")]),s._v(" (二)：future的实现原理")]),s._v(" "),a("ul",[a("li",[s._v("生成器中"),a("code",[s._v("yield关键字")]),s._v("的实现原理(在用户空间完成)")])]),s._v(" "),a("p",[a("img",{attrs:{src:e(960),alt:"Alt text"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：让出CPU\n2：保存当前的函数运行进度\n3：切换运行栈\n4：从新的栈执行\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("future的实现原理")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：协程对象引用\n2：完成标记\n3：执行结果\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("Future对象基本代码模型如下(主要是重写了"),a("code",[s._v("__await__方法")]),s._v("，在"),a("code",[s._v("__await__")]),s._v("方法中会判断是否这个Future对象已经完成，如果没有完成，会调用yield关键字将自己yield出去，让出CPU)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Future:\n\n    def __init__(self):\n        self.done = False\n        self.co = None\n\n    def set_coroutine(self, co):\n        self.co = co\n\n    def set_done(self):\n        self.done = True\n\n    # 重写生成器的await方法\n    def __await__(self):\n        # 判断当前的futurn是否已经完成\n        if not self.done:\n            # 让出CPU\n            yield self\n        return\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"四-socket套接字协程适配器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-socket套接字协程适配器"}},[s._v("#")]),s._v(" 四：socket套接字协程适配器")]),s._v(" "),a("h3",{attrs:{id:"一-聊一聊什么是socket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-聊一聊什么是socket"}},[s._v("#")]),s._v(" (一)：聊一聊什么是socket")]),s._v(" "),a("ul",[a("li",[s._v("socket层的位置：socket在传输层和应用层之间")])]),s._v(" "),a("p",[a("img",{attrs:{src:e(961),alt:"Alt text"}})]),s._v(" "),a("ul",[a("li",[s._v("socket是什么")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tSocket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议\n\n\t所以，我们无需深入理解tcp/udp协议，socket已经为我们封装好了，我们只需要遵循socket的规定去编程，写出的程序自然就是遵循tcp/udp标准的\n\n\t套接字分类：\n\t\t1：基于文件类型的套接字家族；套接字家族的名字：AF_UNIX\n\t\t2：基于网络类型的套接字家族；套接字家族的名字：AF_INET\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ul",[a("li",[s._v("socket套接字基本工作流程")])]),s._v(" "),a("p",[a("img",{attrs:{src:e(962),alt:"Alt text"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("Server端套接字函数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import socket\n \n# 明确配置变量\nip_port = ('127.0.0.1',8080)\nback_log = 5\nbuffer_size = 1024\n# 创建一个TCP套接字,套接字类型AF_INET, socket.SOCK_STREAM  tcp协议，基于流式的协议\nser = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n# 对socket的配置, 重用ip和端口号\nser.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)  \n# 绑定端口号\nser.bind(ip_port)  \n# 设置半连接池,最多可以连接多少个客户端\nser.listen(back_log)\nwhile 1:\n    # 阻塞等待，创建连接\n    con, address = ser.accept()  # 在这个位置进行等待，监听端口号 \n    while 1:\n        try:\n            # 接受套接字的大小，怎么发就怎么收\n            msg = con.recv(buffer_size)\n            if msg.decode('utf-8') == '1':\n                # 断开连接\n                con.close()\n            print('服务器收到消息',msg.decode('utf-8'))\n        except Exception as e:\n            break\n# 关闭服务器\nser.close()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("ul",[a("li",[s._v("Client端套接字函数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import socket\n \np = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\np.connect(('127.0.0.1',8080))\nwhile 1:\n    msg = input('please input')\n    # 防止输入空消息\n    if not msg:\n        continue\n    # 收发消息一定要二进制，记得编码    \n    p.send(msg.encode('utf-8'))  \n    if msg == '1':\n        break\np.close()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"三-socket套接字协程适配器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-socket套接字协程适配器"}},[s._v("#")]),s._v(" (三)：socket套接字协程适配器")]),s._v(" "),a("ul",[a("li",[s._v("非阻塞式的socket，可以设置socket为非阻塞，但是会报错，因为没有连接请求进来，但是异常是可以捕获的")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('>>> import socket\n>>> s = socket.socket()\n>>> s.bind((\'localhost\', 8999))\n>>> s.listen()\n>>> \n>>> s.setblocking(False)\n>>> s.accept()\nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "/Users/yinhuanyi/.pyenv/versions/3.6.3/lib/python3.6/socket.py", line 205, in accept\n    fd, addr = self._accept()\nBlockingIOError: [Errno 35] Resource temporarily unavailable\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ul",[a("li",[s._v("基于协程的Epoll TCP服务器端代码实现(代码基本思想："),a("code",[s._v("1 未完成")]),s._v(")")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# coding: utf-8\n\"\"\"\n\"\"\"\nimport socket\nimport select\nfrom collections import deque\n\n# Todo: 这里是创建可等待对象，来控制协程的运行，也就是什么时候让出CPU\nclass Future:\n\n    def __init__(self, loop):\n        self.loop = loop\n        self.done = False\n        self.co = None\n\n    # 让协程封装到future对象中\n    def set_coroutine(self, co):\n        self.co = co\n\n    # 设置future对象已经完成\n    def set_done(self):\n        self.done = True\n\n    # 重写生成器的await方法\n    def __await__(self):\n        # 判断当前的future是否已经完成\n        if not self.done:\n            # 如果没有完成，让出CPU，且将Future对象yield出去\n            yield self\n        # TODO: 这个return在这里好像没有用\n        return\n\n# Todo: 这里是对socket对象的封装\nclass SocketWrapper:\n\n    def __init__(self, sock, loop):\n        # 设置socket为非阻塞\n        sock.setblocking(False)\n        self.sock = sock\n        self.loop = loop\n\n    # 获取socket的文件句柄\n    def fileno(self):\n        return self.sock.fileno()\n\n    # 创建future对象\n    def create_future_for_events(self, events):\n        # 调用控制器的create_future方法创建future对象\n        future = self.loop.create_future()\n\n        def handler():\n            # 设置可等待对象完成\n            future.set_done()\n            # 取消对文件句柄的注册\n            self.loop.unregister_handler(self.fileno())\n            # 如果协程对象还在，那么添加到队列\n            if future.co:\n                self.loop.add_coroutine(future.co)\n        # 将文件句柄、事件、和\n        self.loop.register_handler(self.fileno(), events, handler)\n        return future\n\n    # async表示此函数是一个协程函数\n    async def accept(self):\n        while True:\n            try:\n                sock, addr = self.sock.accept()\n                return SocketWrapper(sock=sock, loop=self.loop), addr\n            except BlockingIOError:\n                # 如果没有连接进来，调用future对象, 让出CPU， 设置裸事件可读\n                future = self.create_future_for_events(select.EPOLLIN)\n                await future\n\n    async def recv(self, backlog):\n        while True:\n            try:\n                return self.sock.recv(backlog)\n            except BlockingIOError:\n                # 设置裸事件可读\n                future = self.create_future_for_events(select.EPOLLIN)\n                await future\n\n    async def send(self, data):\n        while True:\n            try:\n                return self.sock.send(data)\n            except BlockingIOError:\n                future = self.create_future_for_events(select.EPOLLOUT)\n                await future\n\n# Todo: 这里是作为协程运行的调度器\nclass EventLoop:\n    # 控制器实例\n    current = None\n    runnables = deque()\n    # epoll事件循环\n    epoll = select.epoll()\n    # 存储文件句柄与handler的一一对应关系\n    handlers = {}\n\n    # 获取调度器单例\n    @classmethod\n    def instance(self):\n        if not EventLoop.current:\n            EventLoop.current = EventLoop()\n        return EventLoop.current\n\n    # 创建一个future可等待对象\n    def create_future(self):\n        return Future(loop=self)\n\n    # 创建一个监听的socket\n    def create_listen_socket(self, ip='localhost', port=9000):\n        sock = socket.socket()\n        # 让socket地址可以重新被使用\n        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        sock.bind((ip, port))\n        sock.listen()\n        return SocketWrapper(sock=sock, loop=self)\n\n    # 在事件循环中注册文件句柄\n    def register_handler(self, fileno, evnets, handler):\n        # 将文件句柄与回调捆绑\n        self.handlers[fileno] = handler\n        # 将文件句柄与事件注册\n        self.epoll.register(fileno, evnets)\n\n    #\n    def unregister_handler(self, fileno):\n        # 取消事件注册很简单，直接取消就好\n        self.epoll.unregister(fileno)\n        # 然后从handlers里面删除这个文件句柄\n        self.handlers.pop(fileno)\n\n    def run_coroutine(self, co):\n        try:\n            # send方法是调度协程\n            future = co.send(None)\n            # 将协程添加到future中\n            future.set_coroutine(co)\n        except Exception as e:\n            print('coroutine {} stopped'.format(co.__name__))\n\n\n    def run_forever(self):\n        while True:\n            # 当队列中有任务，先执行它\n            while self.runnables:\n                self.run_coroutine(co=self.runnables.popleft())\n            # epoll 进⾏ fd 扫描的地⽅，获取\n            events = self.epoll.poll(1)\n            # 从注册的(文件句柄,事件)列表中遍历，\n            for fileno, event in events:\n                # handlers是保证fileno和handler的对应关系\n                handle = self.handlers.get(fileno)\n                handle()\n\n    def add_coroutine(self, co):\n        self.runnables.append(co)\n\n\n# Todo: 这里是控制TCP建立的连接对象收发数据\nclass TCPServer:\n\n    def __init__(self, loop):\n        self.loop = loop\n        self.listen_sock = self.loop.create_listen_socket()\n        self.loop.add_coroutine(self.serve_forever())\n\n    async def handle_client(self, sock):\n        while True:\n            data = await sock.recv(1024)\n            if not data:\n                print('client disconnected')\n                break\n            await sock.send(data.upper())\n\n    async def serve_forever(self):\n        while True:\n            sock, addr = await self.listen_sock.accept()\n            print('client connect addr = {}'.format(addr))\n            self.loop.add_coroutine(self.handle_client(sock))\n\n\nif __name__ == '__main__':\n    # 初始化一个协程控制器实例\n    loop = EventLoop.instance()\n    # 让协程控制器与socket的accept、recv、send方法捆绑\n    TCPServer(loop)\n    # 让控制器不断运行，执行协程函数\n    loop.run_forever()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br"),a("span",{staticClass:"line-number"},[s._v("168")]),a("br"),a("span",{staticClass:"line-number"},[s._v("169")]),a("br"),a("span",{staticClass:"line-number"},[s._v("170")]),a("br"),a("span",{staticClass:"line-number"},[s._v("171")]),a("br"),a("span",{staticClass:"line-number"},[s._v("172")]),a("br"),a("span",{staticClass:"line-number"},[s._v("173")]),a("br"),a("span",{staticClass:"line-number"},[s._v("174")]),a("br"),a("span",{staticClass:"line-number"},[s._v("175")]),a("br"),a("span",{staticClass:"line-number"},[s._v("176")]),a("br"),a("span",{staticClass:"line-number"},[s._v("177")]),a("br"),a("span",{staticClass:"line-number"},[s._v("178")]),a("br"),a("span",{staticClass:"line-number"},[s._v("179")]),a("br"),a("span",{staticClass:"line-number"},[s._v("180")]),a("br"),a("span",{staticClass:"line-number"},[s._v("181")]),a("br"),a("span",{staticClass:"line-number"},[s._v("182")]),a("br"),a("span",{staticClass:"line-number"},[s._v("183")]),a("br"),a("span",{staticClass:"line-number"},[s._v("184")]),a("br"),a("span",{staticClass:"line-number"},[s._v("185")]),a("br"),a("span",{staticClass:"line-number"},[s._v("186")]),a("br"),a("span",{staticClass:"line-number"},[s._v("187")]),a("br"),a("span",{staticClass:"line-number"},[s._v("188")]),a("br"),a("span",{staticClass:"line-number"},[s._v("189")]),a("br"),a("span",{staticClass:"line-number"},[s._v("190")]),a("br"),a("span",{staticClass:"line-number"},[s._v("191")]),a("br")])]),a("ul",[a("li",[s._v("小结")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：async和await可以将一个函数或方法定义为一个协程对象，在一个函数或方法中，async和await必须是同时出现，否则就会报错\n\n2：只有出现需要等待结果的方法中，才需要将方法设置为协程对象\n\n3：Futurn的作用在于，当future对象未完成的时候，基于yield关键字让出CPU。__await__方法将Future这个类变成了一个可等待对象\n\n4：SocketWrapper中会调用Future对象，因为accept、recv、send都是阻塞任务，因此会调用Future对象来让出CPU\n\n5：EventLoop中有两个重要方法\n\t第一个是run_forever，在run_forever里面会一直从队列中取出协程，执行协程，然后从epoll列表中获取(文件句柄和事件)，再获取保存的回调函数，再调用回调函数\n\t第二个是run_coroutine，执行协程的send方法，再将协程添加到future对象中\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ul",[a("li",[s._v("Python中的协程与内核级线程的关系（多个用户级协程对应一个内核级线程）")])]),s._v(" "),a("p",[a("img",{attrs:{src:e(963),alt:"Alt text"}})]),s._v(" "),a("h2",{attrs:{id:"五-将multi-thread多线程转变为coroutine协程服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-将multi-thread多线程转变为coroutine协程服务"}},[s._v("#")]),s._v(" 五：将multi_thread多线程转变为coroutine协程服务")]),s._v(" "),a("h3",{attrs:{id:"一-这里主要是优化的http下载图片的download模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-这里主要是优化的http下载图片的download模块"}},[s._v("#")]),s._v(" (一)：这里主要是优化的HTTP下载图片的download模块")]),s._v(" "),a("ul",[a("li",[s._v("修改"),a("code",[s._v("Process_Thread_Coroutine_Project/multi_coroutine/modules/__init__.py")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from ..const import CalcType\n\nclass BaseModule:\n\n    # 初始化线程运行模式，CalcType.SingleThread获取的值是CalcType.SingleThread\n    def __init__(self, *args, **kwargs):\n        calc_type = kwargs.get('calc_type')\n        self.calc_type = calc_type\n\n    # 设置线程运行模式\n    def set_calc_type(self, type):\n        self.calc_type = type\n\n    # 如果子类未重写父类方法，抛出异常\n    def _process(self, url):\n        raise NotImplementedError\n\n    def _process_multi_thread(self, list_):\n        raise NotImplementedError\n\n    # 协程处理函数\n    def _process_coroutine(self, list_):\n        raise NotImplementedError\n\n    def process(self, list_):\n        if self.calc_type == CalcType.MultiThread:\n            return self._process_multi_thread(list_)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("ul",[a("li",[s._v("修改downloader.py")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import requests\nfrom PIL import ImageFile\nimport numpy as np\nfrom . import BaseModule\nfrom .executor import pycoroutine_executor\nimport aiohttp\n\nclass Downloader(BaseModule):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    # 基于协程改造http的网络耗时\n    def _process_coroutine(self, list_):\n        response_list = []\n        aiohttp_session = aiohttp.ClientSession()\n\n        async def main():\n            for url in list_:\n                async with aiohttp_session.get(url) as response:\n                    content = await response.read()\n                    parser = ImageFile.Parser()\n                    parser.feed(content)\n                    img = parser.close()\n                    img = np.array(img)\n                    response_list.append(img)\n\n        # 使用事件循环将协程运行起来\n        pycoroutine_executor.run_until_complete(main())\n        return response_list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("ul",[a("li",[s._v("修改executor.py")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import asyncio\nfrom concurrent.futures import ThreadPoolExecutor\n\nMULTI_NUMS = 50\nthread_pool_executor = ThreadPoolExecutor(MULTI_NUMS)\n# 获取一个协程的事件循环\npycoroutine_executor = asyncio.get_event_loop()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("修改scheduler.py")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import os\nimport prettytable\n# 单独在Linux下运行时候打开\n# import sys\n# sys.path.insert(0, '/root/Process_Thread_Coroutine_Project')\nfrom multi_coroutine.modules.downloader import Downloader\nfrom multi_coroutine.modules.hasher import Hasher\nfrom multi_coroutine.modules.storager import Storager\nfrom multi_coroutine.utils import get_url_list, Timer\nfrom multi_coroutine.const import CalcType\n\n\n# 调用器\nclass Scheduler:\n\n    # 初始化模块的运行方式\n    def __init__(self):\n        # 让下载模块以协程方式运行\n        self.download = Downloader(calc_type=CalcType.PyCoroutine)\n        self.hasher = Hasher(calc_type=CalcType.MultiThread)\n        self.storager = Storager(calc_type=CalcType.MultiThread)\n\n    # 基于md5字符串，返回一个图片路径\n    def _get_path(self, md5):\n        file_name = '{}.jpg'.format(md5)\n        file_path = os.path.join('/Users/yinhuanyi/Yinhuanyi_Project/Process_Thread_Coroutine_Project/single_thread/images', file_name)\n        return file_path\n\n    # 调度三个模块运行的入口\n    def process(self):\n        timer = Timer()\n        time_statistics = {}\n        time_statistics['cpu'] = []\n        time_statistics['network'] = []\n        time_statistics['disk'] = []\n\n        # 1：加载图片的url\n        url_list = get_url_list()\n\n        # 2：返回图片内容的numpy数组列表\n        timer.begine()\n        # 这里改为调用封装了协程的方法\n        content_list  = self.download._process_coroutine(url_list)\n        time_statistics['network'] = timer.end()\n\n        # 3：返回md5列表\n        timer.begine()\n        md5_list = self.hasher.process(content_list)\n        time_statistics['cpu'] = timer.end()\n\n        # 4：将内容和md5路径组合，交给存储模块，存储图片\n        timer.begine()\n        item_list = [(content, self._get_path(md5)) for content, md5 in zip(content_list, md5_list)]\n        self.storager.process(item_list)\n        time_statistics['disk'] = timer.end()\n        return time_statistics\n\n    # 统计\n    def statistics(self, log: dict):\n        # 设置表头\n        table = prettytable.PrettyTable(['类型', '协程耗时'])\n        # 第一行数据\n        network_row = ['network']\n        # 第二行数据\n        cpu_row = ['cpu']\n        # 第三行数据\n        disk_row = ['disk']\n        network_row.append(log['network'])\n        cpu_row.append(log['cpu'])\n        disk_row.append(log['disk'])\n        # 将每一行数据加入到表格中\n        table.add_row(cpu_row)\n        table.add_row(disk_row)\n        table.add_row(network_row)\n        print(table)\n\nif __name__ == '__main__':\n    scheduler = Scheduler()\n    time_statistics = scheduler.process()\n    scheduler.statistics(time_statistics)\n    \"\"\"\n    +---------+-----------+\n    |   类型  |  协程耗时  |\n    +---------+-----------+\n    |   cpu   | 54.180284 |\n    |   disk  |  2.677593 |\n    | network |  2.073107 |\n    +---------+-----------+\n    \"\"\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br")])]),a("ul",[a("li",[s._v("运行过程中有报错(session和connector都未关闭)")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Unclosed client session\nclient_session: <aiohttp.client.ClientSession object at 0x7f5894497518>\nUnclosed connector\nconnections: ['[(<aiohttp.client_proto.ResponseHandler object at 0x7f5894493180>, 94022.327303724)]']\nconnector: <aiohttp.connector.TCPConnector object at 0x7f5894497358>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports},953:function(s,n,e){s.exports=e.p+"assets/img/2021-02-182.08.04.c6c3872b.png"},954:function(s,n,e){s.exports=e.p+"assets/img/2021-02-182.08.58.30daaf3d.png"},955:function(s,n,e){s.exports=e.p+"assets/img/2021-02-182.10.35.545ed8e7.png"},956:function(s,n,e){s.exports=e.p+"assets/img/2021-02-182.18.09.568447da.png"},957:function(s,n,e){s.exports=e.p+"assets/img/2021-02-182.19.50.c123947b.png"},958:function(s,n,e){s.exports=e.p+"assets/img/2021-02-182.21.13.d76bd400.png"},959:function(s,n,e){s.exports=e.p+"assets/img/2021-02-183.25.22.31f46ddc.png"},960:function(s,n,e){s.exports=e.p+"assets/img/2021-02-183.30.51.454b4cab.png"},961:function(s,n,e){s.exports=e.p+"assets/img/2021-03-0511.25.36.24938c6f.png"},962:function(s,n,e){s.exports=e.p+"assets/img/2021-03-061.33.59.a5084700.png"},963:function(s,n,e){s.exports=e.p+"assets/img/2021-03-0710.21.27.05bb6847.png"}}]);