(window.webpackJsonp=window.webpackJsonp||[]).push([[352],{2193:function(t,e,n){"use strict";n.r(e);var s=n(9),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"一-基本数据类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-基本数据类型"}},[t._v("#")]),t._v(" 一：基本数据类型")]),t._v(" "),n("h3",{attrs:{id:"一-整型分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-整型分类"}},[t._v("#")]),t._v(" (一)：整型分类")]),t._v(" "),n("ul",[n("li",[t._v("整型分为以下两个大类： 按长度分为："),n("code",[t._v("int8、int16、int32、int64")]),t._v(" 对应的无符号整型："),n("code",[t._v("uint8、uint16、uint32、uint64")]),t._v("，其中，"),n("code",[t._v("uint8")]),t._v("就是我们熟知的byte型，"),n("code",[t._v("int16")]),t._v("对应C语言中的short型，"),n("code",[t._v("int64")]),t._v("对应C语言中的long型")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("uint8")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 8位整型 (0 到 255)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("uint16")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 16位整型 (0 到 65535)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("uint32")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 32位整型 (0 到 4294967295)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("uint64")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("无符号 64位整型 (0 到 18446744073709551615)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 8位整型 (-128 到 127)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("int16")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 16位整型 (-32768 到 32767)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 32位整型 (-2147483648 到 2147483647)")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("有符号 64位整型 (-9223372036854775808 到 9223372036854775807)")])])])]),t._v(" "),n("h3",{attrs:{id:"二-数字字面量语法-number-literals-syntax"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-数字字面量语法-number-literals-syntax"}},[t._v("#")]),t._v(" (二)：数字字面量语法（Number literals syntax）")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("Go1.13版本之后引入了数字字面量语法，这样便于开发者以二进制、八进制或十六进制浮点数的格式定义数字，例如：\n\nv := 0b00101101， 代表二进制的 101101，相当于十进制的 45。 v := 0o377，代表八进制的 377，相当于十进制的 255。 v := 0x1p-2，代表十六进制的 1 除以 2²，也就是 0.25。\n\n而且还允许我们用 _ 来分隔数字，比如说： v := 123_456 表示 v 的值等于 123456。\n\n我们可以借助fmt函数来将一个整数以不同进制形式展示。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h3",{attrs:{id:"三-浮点型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-浮点型"}},[t._v("#")]),t._v(" (三)：浮点型")]),t._v(" "),n("ul",[n("li",[t._v("Go语言支持两种浮点型数：float32和float64。这两种浮点型数据格式遵循IEEE 754标准： float32 的浮点数的最大范围约为 3.4e38，可以使用常量定义：math.MaxFloat32。 float64 的浮点数的最大范围约为 1.8e308，可以使用一个常量定义：math.MaxFloat64， 打印浮点数时，可以使用fmt包配合动词%f，代码如下")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('package main\nimport (\n        "fmt"\n        "math"\n)\nfunc main() {\n        fmt.Printf("%f\\n", math.Pi)\n        fmt.Printf("%.2f\\n", math.Pi)\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("h3",{attrs:{id:"四-复数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四-复数"}},[t._v("#")]),t._v(" (四)：复数")]),t._v(" "),n("ul",[n("li",[t._v("complex64和complex128")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("var c1 complex64\nc1 = 1 + 2i\nvar c2 complex128\nc2 = 2 + 3i\nfmt.Println(c1)\nfmt.Println(c2)\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h3",{attrs:{id:"五-布尔值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五-布尔值"}},[t._v("#")]),t._v(" (五)：布尔值")]),t._v(" "),n("ul",[n("li",[t._v("Go语言中以bool类型进行声明布尔型数据，布尔型数据只有true（真）和false（假）两个值。")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1：布尔类型变量的默认值为false\n2：Go 语言中不允许将整型强制转换为布尔型\n3：布尔型无法参与数值运算，也无法与其他类型进行转换\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("h3",{attrs:{id:"六-字符串转义符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六-字符串转义符"}},[t._v("#")]),t._v(" (六)：字符串转义符")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("转义符")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("\\r")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("回车符（返回行首）")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("\\n")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("换行符（直接跳到下一行的同列位置）")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("\\t")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("制表符")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("'")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("单引号")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v('"')]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("双引号")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("\\")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("反斜杠")])])])]),t._v(" "),n("h3",{attrs:{id:"七-多行字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七-多行字符串"}},[t._v("#")]),t._v(" (七)：多行字符串")]),t._v(" "),n("ul",[n("li",[t._v("Go语言中要定义一个多行字符串时，就必须使用反引号字符,反引号间换行将被作为字符串中的换行，但是所有的转义字符均无效，文本将会原样输出。")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("s1 := `第一行\n第二行\n第三行\n`\nfmt.Println(s1)\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h3",{attrs:{id:"八-字符串常用操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#八-字符串常用操作"}},[t._v("#")]),t._v(" (八)：字符串常用操作")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("介绍")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("len(str)")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("求长度")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("+或fmt.Sprintf")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("拼接字符串")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("strings.Split")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("分割")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("strings.contains")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否包含")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("strings.HasPrefix, strings.HasSuffix")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("前缀/后缀判断")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("strings.Contains")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("字符串子串包含判断")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("strings.Index(), strings.LastIndex()")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("子串出现的位置")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("strings.Join(a[]string, sep string)")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("join操作")])])])]),t._v(" "),n("h2",{attrs:{id:"二-byte和rune类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-byte和rune类型"}},[t._v("#")]),t._v(" 二：byte和rune类型")]),t._v(" "),n("h3",{attrs:{id:"一-go-语言的字符有以下两种"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-go-语言的字符有以下两种"}},[t._v("#")]),t._v(" (一)：Go 语言的字符有以下两种")]),t._v(" "),n("ul",[n("li",[t._v("分类")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("uint8类型，或者叫 byte 型，代表了ASCII码的一个字符。\nrune类型，代表一个 UTF-8字符。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("ul",[n("li",[n("code",[t._v("字符串底层是byte类型，也就是每个字符是一个byte，一个字符串是[]byte，字符串与[]byte可以相互转换")]),t._v("。rune类型实际是一个int32，rune类型是用来处理Unicode字符集的，一个rune可以是3~4个byte。因此 "),n("code",[t._v("字符串、[]byte、[]rune三者可以相互转换")])])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func newTraversalString() {\n\t// 初始化字符串\n\ts := "hello沙河"\n\t// 因为字符串中有中文，所以直接强制转换为[]rune类型\n\tnewS := []rune(s)\n\n\n\t// len(newS)得到的是rune字符的个数，len(s)得到的是字节个数\n\tfor i := 0; i < len(newS); i++ {\n\t\tfmt.Printf("%v(%c) ", newS[i], newS[i])\n\t}\n\n\tfmt.Println("\\n================================")\n\n\t// 这里for range遍历的是rune类型的字符\n\tfor _, r := range s {\n\t\tfmt.Printf("%v(%c) ", r, r)\n\t}\n\tfmt.Println()\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("h3",{attrs:{id:"二-修改字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-修改字符串"}},[t._v("#")]),t._v(" (二)：修改字符串")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("要修改字符串，需要先将其转换成[]rune或[]byte，完成后再转换为string。无论哪种转换，都会重新分配内存，并复制字节数组。\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("ul",[n("li",[t._v("字符串修改示例(必须将字符串强制转换为[]byte或[]rune，才能够修改字符串)")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("func changeString() {\n\ts1 := \"big\"\n\t// 强制类型转换\n\tbyteS1 := []byte(s1)\n\tbyteS1[0] = 'p'\n\tfmt.Println(string(byteS1))\n\n\ts2 := \"白萝卜\"\n\truneS2 := []rune(s2)\n\truneS2[0] = '红'\n\tfmt.Println(string(runeS2))\n}\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("h2",{attrs:{id:"三-类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三-类型转换"}},[t._v("#")]),t._v(" 三：类型转换")]),t._v(" "),n("h3",{attrs:{id:"一-go语言中只有强制类型转换-没有隐式类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一-go语言中只有强制类型转换-没有隐式类型转换"}},[t._v("#")]),t._v(" (一)：Go语言中只有强制类型转换，没有隐式类型转换")]),t._v(" "),n("ul",[n("li",[t._v("注意：只能两个类型之间可以相互转换的时候使用")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("T(表达式)\n\n\n\n例如：float64(1)\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h3",{attrs:{id:"二-将字符串类型转换为其他类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二-将字符串类型转换为其他类型"}},[t._v("#")]),t._v(" (二)：将字符串类型转换为其他类型")]),t._v(" "),n("ul",[n("li",[t._v("下面是一个类型转换函数，可以将string类型，转换为需要的类型，函数返回的是"),n("code",[t._v("reflect.Value")]),t._v("类型，"),n("code",[t._v("reflect.Value")]),t._v("类型可以调用String()、Int()、Float()方法获取到基本数据类型")])]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('func TypeConversion(value string, ntype string) (reflect.Value, error) {\n\tif ntype == "string" {\n\t\treturn reflect.ValueOf(value), nil\n\t} else if ntype == "time.Time" {\n\t\tt, err := time.ParseInLocation("2006-01-02 15:04:05", value, time.Local)\n\t\treturn reflect.ValueOf(t), err\n\t} else if ntype == "Time" {\n\t\tt, err := time.ParseInLocation("2006-01-02 15:04:05", value, time.Local)\n\t\treturn reflect.ValueOf(t), err\n\t} else if ntype == "int" {\n\t\ti, err := strconv.Atoi(value)\n\t\treturn reflect.ValueOf(i), err\n\t} else if ntype == "int8" {\n\t\ti, err := strconv.ParseInt(value, 10, 64)\n\t\treturn reflect.ValueOf(int8(i)), err\n\t} else if ntype == "int32" {\n\t\ti, err := strconv.ParseInt(value, 10, 64)\n\t\treturn reflect.ValueOf(int64(i)), err\n\t} else if ntype == "int64" {\n\t\ti, err := strconv.ParseInt(value, 10, 64)\n\t\treturn reflect.ValueOf(i), err\n\t} else if ntype == "float32" {\n\t\ti, err := strconv.ParseFloat(value, 64)\n\t\treturn reflect.ValueOf(float32(i)), err\n\t} else if ntype == "float64" {\n\t\ti, err := strconv.ParseFloat(value, 64)\n\t\treturn reflect.ValueOf(i), err\n\t}\n\n\t//else if .......增加其他一些类型的转换\n\n\treturn reflect.ValueOf(value), errors.New("未知的类型：" + ntype)\n}\n\n\n// 调用方法\nfunc main() {\n\t// 将字符串转换为int64类型\n\tvalueType, err := TypeConversion("1", "int64")\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t}\n\trawType, ok := valueType.Interface().(int64)\n\n\tif ok {\n\t\t// 输出：int64\n\t\tfmt.Println(reflect.TypeOf(rawType))\n\t}\n}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br"),n("span",{staticClass:"line-number"},[t._v("35")]),n("br"),n("span",{staticClass:"line-number"},[t._v("36")]),n("br"),n("span",{staticClass:"line-number"},[t._v("37")]),n("br"),n("span",{staticClass:"line-number"},[t._v("38")]),n("br"),n("span",{staticClass:"line-number"},[t._v("39")]),n("br"),n("span",{staticClass:"line-number"},[t._v("40")]),n("br"),n("span",{staticClass:"line-number"},[t._v("41")]),n("br"),n("span",{staticClass:"line-number"},[t._v("42")]),n("br"),n("span",{staticClass:"line-number"},[t._v("43")]),n("br"),n("span",{staticClass:"line-number"},[t._v("44")]),n("br"),n("span",{staticClass:"line-number"},[t._v("45")]),n("br"),n("span",{staticClass:"line-number"},[t._v("46")]),n("br"),n("span",{staticClass:"line-number"},[t._v("47")]),n("br"),n("span",{staticClass:"line-number"},[t._v("48")]),n("br"),n("span",{staticClass:"line-number"},[t._v("49")]),n("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);