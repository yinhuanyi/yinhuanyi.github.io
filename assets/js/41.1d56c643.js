(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{1531:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.08.46.dc33eab3.png"},1532:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.16.37.5aaf41e4.png"},1533:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.18.35.34c26a4c.png"},1534:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.21.24.df54faa8.png"},1535:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.22.42.1b878de2.png"},1536:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.26.12.ed42dad4.png"},1537:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.26.44.f498fd28.png"},1538:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2710.29.24.0d12ab5f.png"},1539:function(s,a,n){s.exports=n.p+"assets/img/2020-08-2711.37.23.37930de8.png"},1540:function(s,a,n){s.exports=n.p+"assets/img/2020-08-308.18.17.5b03da57.png"},1541:function(s,a,n){s.exports=n.p+"assets/img/2020-08-308.23.21.c9268ea4.png"},2570:function(s,a,n){"use strict";n.r(a);var e=n(9),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h3",{attrs:{id:"一-python-api架构及开发环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-python-api架构及开发环境搭建"}},[s._v("#")]),s._v(" 一：Python API架构及开发环境搭建")]),s._v(" "),e("h3",{attrs:{id:"一-python-table-api架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-python-table-api架构"}},[s._v("#")]),s._v(" (一)：Python Table API架构")]),s._v(" "),e("p",[e("img",{attrs:{src:n(1531),alt:"Alt text"}})]),s._v(" "),e("ul",[e("li",[s._v("基本概念")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("新的 Python API 架构分为用户 API 部分，PythonVM 和 Java VM 的通讯部分，和最终将作业提交到 Flink 集群进行运行的部分。那么 PythonVM 和 JavaVM 是怎样通讯的呢？我们在Python 端会会有一个 Python 的 Gateway 用于保持和 Java 通讯的链接，在 Java 部分有一个 GateWayServer 用于接收 Python 部分的调用请求。\n\n在 1.9 之前，Flink 的 DataSet 和 DataStream 已经有了对 Python API 的支持，但是拥有 DataSet API 和 DataStream API 两套不同的 API。对于 Flink 这样一个流批统一的流式计算引擎来讲，统一的架构至关重要, 并且对于已有的 Python DataSet API 和 DataStream API 而言，采用了JPython 的技术体系架构，而 JPython 本身对目前 Python 的 3.X 系列无法很好的支持，所以 Flink 1.9 发布后，决定将原有的 Python API 体系架构废弃，以全新的技术架构出现。这套全新的 Python API 基于 Table API 之上。\n\nTable API 和 Python API 之间的通讯采用了一种简单的办法，利用 Python VM 和 Java VM 进行通信。在 Python API 的书写或者调用过程中，以某种方式来与 Java API 进行通讯。操作 Python API 就像操作 Java 的 Table API一样。新架构中可以确保以下内容：\n\t1: 不需要另外创建一套新的算子，可以轻松与 Java 的 Table API 的功能保持一致。\n\t2:得益于现有的 Java Table API 优化模型，Python 写出来的API，可以利用 Java API 优化模型进行优化，可以确保 Python 的 API 写出来的 Job 也能够具备极致性能。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("ul",[e("li",[s._v("Python API与Java API进行通信")])]),s._v(" "),e("p",[e("img",{attrs:{src:n(1532),alt:"Alt text"}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("在新的架构和通讯模型下，Python API 调用 Java API 只需要在持有 Java 对象的 ID，将调用方法的名字和参数传递给 Java VM，就能完成对 Java Table API 的调用，所以在这样的架构中开发 Python Table API 与开发 Java Table API 的方式完全一致，接下来我为大家详细介绍如何开发一个简单的 Python API 作业。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"二-python-table-api架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-python-table-api架构"}},[s._v("#")]),s._v(" (二)：Python Table API架构")]),s._v(" "),e("p",[e("img",{attrs:{src:n(1533),alt:"Alt text"}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("通常来讲一个 Python Table Job 一般会分成四个部分，首先要根据目前的现状，要决定这个Job 是以批的方式运行，还是流的方式运行。当然后续版本用户可以不考虑，但当前 1.9 版本还是需要考虑。\n\n在决定第一步以怎样的方式执行 Job 后，我们需要了解数据从哪里来，如何定义 Source、结构数据类型等信息。然后需要写计算逻辑，然后就是对数据进行计算操作，但最终计算的结果需要持久化到某个系统。最后定义 Sink，与 Source 类似，我们需要定义 Sink Schema，以及每一个字段类型。\n\n下面将详细分享如何用 Python API 写每一步？首先，我们创建一个执行环境，对于执行环境本身来讲，首先需要一个 ExecutionEnvironment，根本上我们需要一个 TableEnvironment。那么在 TableEnvironment 中，有一个参数 Table Config，Table Config 中会有一些在执行过程中的配置参数，可以传递到 RunTime 层。除此之外，还提供了一些个性化的配置项，可以在实际业务开发中进行使用\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("img",{attrs:{src:n(1534),alt:"Alt text"}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('在拿到 Environment 后，需要对数据源表进行定义，以 CSV 格式文件为例，用"逗号"分隔，用 Field 来表明这个文件中有哪些字段。那么会看到，目前里面用逗号分隔，并且只有一个字段叫 word，类型是 String。\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:n(1535),alt:"Alt text"}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("在定义并描述完数据源数据结构转换成 Table 数据结构后，也就是说转换到 Table API 层面之后是怎样的数据结构和数据类型？下面将通过 with_schema 添加字段及字段类型。这里只有一个字段，数据类型也是 String，最终注册成一个表，注册到 catlog 中，就可以供后面的查询计算使用了。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:n(1536),alt:"Alt text"}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("创建结果表，当计算完成后需要将这些结果存储到持久化系统中，以 WordCount 为例，首先存储表会有一个 word 以及它的计数两个字段，一个是 String 类型的 word，另一个是 Bigint 的计数，然后把它注册成 Sink。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:n(1537),alt:"Alt text"}})]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("编写注册完 Table Sink 后，再来看如何编写逻辑。其实用 Python API 写 WordCount 和 Table API 一样非常简单。因为相对于 DataSream 而言 Python API 写一个 WordCount 只需要一行。比如 group by，先扫描Source表，然后 group by 一个 Word，再进行 Select word 并加上聚合统计Count ，最终将最数据结果插入到结果表里面中。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("img",{attrs:{src:n(1538),alt:"Alt text"}})]),s._v(" "),e("h3",{attrs:{id:"三-python-table-api-cluster环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-python-table-api-cluster环境搭建"}},[s._v("#")]),s._v(" (三)：Python Table API – Cluster环境搭建")]),s._v(" "),e("ul",[e("li",[s._v("在官方下载安装包")])]),s._v(" "),e("p",[e("img",{attrs:{src:n(1539),alt:"Alt text"}})]),s._v(" "),e("ul",[e("li",[s._v("直接在服务器上解压")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("cd /usr/local\ntar xf flink-1.11.1-bin-scala_2.11.tgz\ncd flink/conf\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("修改配置文件 "),e("code",[s._v("vi flink-conf.yaml")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# 指定master节点\njobmanager.rpc.address: yw1-2\n# jobmanager处理内存大小\njobmanager.memory.process.size: 1600m\n# taskmanager处理内存大小\ntaskmanager.memory.process.size: 1728m\n# 每一个taskmanager的slots大小，也就是一个worker可以有几个子任务\ntaskmanager.numberOfTaskSlots: 2\n# 默认并行度\nparallelism.default: 4\n# 使用Python3环境\npython.client.executable: /usr/bin/python3\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("ul",[e("li",[s._v("修改master配置文件"),e("code",[s._v("vi masters")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yw1-2:8081\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("修改worker配置文件"),e("code",[s._v("vi workers")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("yw1-2\nyw4-1\nyw4-2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("将yw1-2的flink拷贝到yw4-1和yw4-2")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("scp -rp flink yw4-1:/usr/local/\nscp -rp flink yw4-2:/usr/local/\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("配置JAVA_HOME")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("vi /etc/profile.d/java.sh\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\n\n. /etc/profile.d/java.sh\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("在yw1-2主节点启动集群")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("root@yw1-2:/usr/local/flink/bin# ./start-cluster.sh\nStarting cluster.\nStarting standalonesession daemon on host yw1-2.\nStarting taskexecutor daemon on host yw1-2.\nStarting taskexecutor daemon on host ye4-1.\nStarting taskexecutor daemon on host yw4-2.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("jps查看")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("# yw1-2主节点\nroot@yw1-2:/usr/local/flink/bin# jps\n42497 Jps\n17433 OffsetGetterWeb\n37867 ProdServerStart\n40686 StandaloneSessionClusterEntrypoint\n\n# ye4-1worker节点\nroot@ye4-1:/usr/local/flink/conf# jps\n36691 TaskManagerRunner\n8374 QuorumPeerMain\n8950 Kafka\n39610 Jps\n\n# yw4-2worker节点\nroot@yw4-2:/usr/local/flink/conf# jps\n15665 cerebro.cerebro-0.9.1-launcher.jar\n5368 TaskManagerRunner\n47000 jenkins.war\n15800 Jps\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("ul",[e("li",[s._v("访问Flink UI页面, http://10.102.0.11:8081/, 此时的slots有6个，manager有3个")])]),s._v(" "),e("p",[e("img",{attrs:{src:n(1540),alt:"Alt text"}})]),s._v(" "),e("h3",{attrs:{id:"四-python-table-api-本地开发环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-python-table-api-本地开发环境搭建"}},[s._v("#")]),s._v(" (四)：Python Table API 本地开发环境搭建")]),s._v(" "),e("ul",[e("li",[s._v("在本地的开发环境中，创建一个"),e("code",[s._v("fil-stream-manager.3.6.3")]),s._v("虚拟环境，且安装依赖")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("pip install apache-flink\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"五-编写一个flink-python-table-api程序-在本地开发已经运行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-编写一个flink-python-table-api程序-在本地开发已经运行"}},[s._v("#")]),s._v(" (五)：编写一个Flink Python Table API程序，在本地开发已经运行")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("编写Flink Python Table API程序的第一步是创建BatchTableEnvironment (或者StreamTableEnvironment，如果你要创建一个流式作业)。这是Python Table API作业的入口类。")])]),s._v(" "),e("li",[e("p",[s._v("完整的wordcount示例")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("from pyflink.dataset import ExecutionEnvironment\nfrom pyflink.table import TableConfig, DataTypes, BatchTableEnvironment\nfrom pyflink.table.descriptors import Schema, OldCsv, FileSystem\n\nimport os\n\n# 数据源文件\nsource_file = './source.csv'\n#计算结果文件\nsink_file = '/tmp/sink.csv'\n\n# 创建执行环境\n# ExecutionEnvironment (或者StreamExecutionEnvironment，如果你要创建一个流式作业) 可以用来设置执行参数，比如重启策略，缺省并发值等。\nexec_env = ExecutionEnvironment.get_execution_environment()\n# 设置并发为1 方便调试\nexec_env.set_parallelism(1)\n# 配置文件\n# TableConfig可以用来设置缺省的catalog名字，自动生成代码时方法大小的阈值等\nt_config = TableConfig()\n# 创建一个Batch作业入口\nt_env = BatchTableEnvironment.create(exec_env, t_config)\n\n\n# 如果结果文件已经存在, 就先删除\nif os.path.exists(sink_file):\n    os.remove(sink_file)\n\n# 从csv文件创建表\nt_env.connect(FileSystem().path(source_file)) \\\n    .with_format(OldCsv()\n                 .line_delimiter(',') # 以逗号为分隔符\n                 .field('word', DataTypes.STRING())) \\\n    .with_schema(Schema()\n                 .field('word', DataTypes.STRING())) \\\n    .create_temporary_table('mySource')\n\n# 写入csv文件\nt_env.connect(FileSystem().path(sink_file)) \\\n    .with_format(OldCsv()\n                 .field_delimiter(',') # 以逗号为分隔符，写入到文件\n                 .field('word', DataTypes.STRING())\n                 .field('count', DataTypes.BIGINT())) \\\n    .with_schema(Schema()\n                 .field('word', DataTypes.STRING())\n                 .field('count', DataTypes.BIGINT())) \\\n    .create_temporary_table('mySink')\n\n# 对数据表进行计算, \n# 等价SQL：select word, count(1) from mySource group by word;\nt_env.from_path('mySource') \\\n    .group_by('word') \\\n    .select('word, count(1)') \\\n    .insert_into('mySink')\n\nt_env.execute(\"python_job\")\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br")])]),e("ul",[e("li",[s._v("这里的"),e("code",[s._v("source.csv")]),s._v("文件格式内容为")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("enjoyment,Apache Flink,cool,Apache Flink\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("最终基于算子函数计算的结果"),e("code",[s._v("sink.csv")]),s._v("为")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Apache Flink,2\ncool,1\nenjoyment,1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"六-提交作业到生产环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-提交作业到生产环境"}},[s._v("#")]),s._v(" (六)：提交作业到生产环境")]),s._v(" "),e("ul",[e("li",[s._v("提交作业")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\ncd /usr/local/flink/bin\n\n./flink run -py /usr/local/flink/flin-job/word_count.py -d\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("查看任务")])]),s._v(" "),e("p",[e("img",{attrs:{src:n(1541),alt:"Alt text"}})]),s._v(" "),e("ul",[e("li",[e("code",[s._v("flink run")]),s._v(" 参数解释")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("-py,--python ：指定Python job文件\n-pyfs,--pyFiles：指定Python依赖的资源文件\n-pym,--pyModule：指定Python依赖的module\n-j: 指定依赖的jar包\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("因此，如果存在多个py文件，可以直接打一个zip包")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("zip -r flinkdemo.zip ./*\nflink run -pyfs  /usr/local/flink/flin-job/flinkdemo.zip -pym main\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"七-pyflink-shell-sh交互式编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-pyflink-shell-sh交互式编程"}},[s._v("#")]),s._v(" (七)：pyflink-shell.sh交互式编程")]),s._v(" "),e("ul",[e("li",[s._v("local：以local的方式debug调试")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("./pyflink-shell.sh local \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("remote：以remote的方式debug调试")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("./pyflink-shell.sh remote localhost 8081\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);