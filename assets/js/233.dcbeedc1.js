(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{2186:function(n,s,t){"use strict";t.r(s);var a=t(9),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"一-函数基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-函数基础"}},[n._v("#")]),n._v(" 一：函数基础")]),n._v(" "),a("h3",{attrs:{id:"一-基本定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-基本定义"}},[n._v("#")]),n._v(" (一)：基本定义")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("Go语言中支持函数、匿名函数和闭包，并且函数在Go语言中属于“一等公民”")])]),n._v(" "),a("li",[a("p",[n._v("函数定义语法")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func 函数名(参数)(返回值){\n    函数体\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("ul",[a("li",[n._v("函数示例")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func intSum(x, y int) int {\n\treturn x + y\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h3",{attrs:{id:"二-可变参数的函数-可变参数是通过切片来实现的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-可变参数的函数-可变参数是通过切片来实现的"}},[n._v("#")]),n._v(" (二)：可变参数的函数(可变参数是通过切片来实现的)")]),n._v(" "),a("ul",[a("li",[n._v("可变参数是指函数的参数数量不固定，Go语言中的可变参数通过在参数名后加...来标识")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 可变参数的函数\nfunc intSum2(x ...int) int {\n\tfmt.Println(x) //x是一个切片\n\tsum := 0\n\tfor _, v := range x {\n\t\tsum = sum + v\n\t}\n\treturn sum\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("ul",[a("li",[n._v("调用可变参数函数")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("ret1 := intSum2() // 可以不传递参数\nret2 := intSum2(10)\nret3 := intSum2(10, 20)\nret4 := intSum2(10, 20, 30)\nfmt.Println(ret1, ret2, ret3, ret4) //0 10 30 60\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("ul",[a("li",[a("strong",[n._v("固定参数搭配可变参数使用时")]),n._v("，可变参数要放在固定参数的后面，示例代码如下")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func intSum3(x int, y ...int) int {\n\tfmt.Println(x, y)\n\tsum := x\n\tfor _, v := range y {\n\t\tsum = sum + v\n\t}\n\treturn sum\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br")])]),a("ul",[a("li",[n._v("调用")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("ret5 := intSum3(100)\nret6 := intSum3(100, 10)\nret7 := intSum3(100, 10, 20)\nret8 := intSum3(100, 10, 20, 30)\nfmt.Println(ret5, ret6, ret7, ret8) //100 110 130 160\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("h3",{attrs:{id:"三-返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-返回值"}},[n._v("#")]),n._v(" (三)：返回值")]),n._v(" "),a("ul",[a("li",[n._v("多返回值")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func calc(x, y int) (int, int) {\n\tsum := x + y\n\tsub := x - y\n\treturn sum, sub\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("ul",[a("li",[n._v("返回值命名")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func calc(x, y int) (sum, sub int) {\n\tsum = x + y\n\tsub = x - y\n\treturn\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("ul",[a("li",[n._v("返回值补充(当我们的一个函数返回值类型为slice时，nil可以看做是一个有效的slice，没必要显示返回一个长度为0的切片)")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func someFunc(x string) []int {\n\tif x == "" {\n\t\treturn nil // 没必要返回[]int{}\n\t}\n\t...\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h2",{attrs:{id:"二-函数进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-函数进阶"}},[n._v("#")]),n._v(" 二：函数进阶")]),n._v(" "),a("h3",{attrs:{id:"一-变量作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-变量作用域"}},[n._v("#")]),n._v(" (一)：变量作用域")]),n._v(" "),a("ul",[a("li",[n._v("全局变量是定义在函数外部的变量，它在程序整个运行周期内都有效。 在函数中可以访问到全局变量")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package main\n\nimport "fmt"\n\n//定义全局变量num\nvar num int64 = 10\n\nfunc testGlobalVar() {\n\tfmt.Printf("num=%d\\n", num) //函数中可以访问全局变量num\n}\nfunc main() {\n\ttestGlobalVar() //num=10\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("h3",{attrs:{id:"二-局部变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-局部变量"}},[n._v("#")]),n._v(" (二)：局部变量")]),n._v(" "),a("ul",[a("li",[n._v("局部变量又分为两种： 函数内定义的变量无法在该函数外使用，例如下面的示例代码main函数中无法使用testLocalVar函数中定义的变量x：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func testLocalVar() {\n\t//定义一个函数局部变量x,仅在该函数内生效\n\tvar x int64 = 100\n\tfmt.Printf("x=%d\\n", x)\n}\n\nfunc main() {\n\ttestLocalVar()\n\tfmt.Println(x) // 此时无法使用变量x\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("ul",[a("li",[n._v("如果局部变量和全局变量重名，优先访问局部变量。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('package main\n\nimport "fmt"\n\n//定义全局变量num\nvar num int64 = 10\n\nfunc testNum() {\n\tnum := 100\n\tfmt.Printf("num=%d\\n", num) // 函数中优先使用局部变量\n}\nfunc main() {\n\ttestNum() // num=100\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("ul",[a("li",[n._v("接下来我们来看一下语句块定义的变量，通常我们会在if条件判断、for循环、switch语句上使用这种定义变量的方式(if、for、switch语句都有作用域)")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// z变量只在if语句中生效\nfunc testLocalVar2(x, y int) {\n\tfmt.Println(x, y) //函数的参数也是只在本函数中生效\n\tif x > 0 {\n\t\tz := 100 //变量z只在if语句块生效\n\t\tfmt.Println(z)\n\t}\n\t//fmt.Println(z)//此处无法使用变量z\n}\n\n// i变量只在for语句中生效\nfunc testLocalVar3() {\n\tfor i := 0; i < 10; i++ {\n\t\tfmt.Println(i) //变量i只在当前for语句块中生效\n\t}\n\t//fmt.Println(i) //此处无法使用变量i\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("h2",{attrs:{id:"三-函数类型与函数变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-函数类型与函数变量"}},[n._v("#")]),n._v(" 三：函数类型与函数变量")]),n._v(" "),a("h3",{attrs:{id:"一-定义函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-定义函数类型"}},[n._v("#")]),n._v(" (一)：定义函数类型")]),n._v(" "),a("ul",[a("li",[a("p",[n._v("我们可以使用type关键字来定义一个函数类型，具体格式如下：")])]),n._v(" "),a("li",[a("p",[n._v("下面语句定义了一个calculation类型，它是一种函数类型，这种函数接收两个int类型的参数并且返回一个int类型的返回值。")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// type关键字定义函数类型\ntype calculation func(int, int) int\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("ul",[a("li",[n._v("简单来说，凡是满足这个条件的函数都是calculation类型的函数，例如下面的add和sub是calculation类型。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func add(x, y int) int {\n\treturn x + y\n}\n\nfunc sub(x, y int) int {\n\treturn x - y\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br")])]),a("ul",[a("li",[n._v("add和sub都能赋值给calculation类型的变量。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var c calculation\nc = add\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h3",{attrs:{id:"二-函数类型变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-函数类型变量"}},[n._v("#")]),n._v(" (二)：函数类型变量")]),n._v(" "),a("ul",[a("li",[n._v("我们可以声明函数类型的变量并且为该变量赋值：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func main() {\n\tvar c calculation               // 声明一个calculation类型的变量c\n\tc = add                         // 把add赋值给c\n\tfmt.Printf("type of c:%T\\n", c) // type of c:main.calculation\n\tfmt.Println(c(1, 2))            // 像调用add一样调用c\n\n\tf := add                        // 将函数add赋值给变量f1\n\tfmt.Printf("type of f:%T\\n", f) // type of f:func(int, int) int\n\tfmt.Println(f(10, 20))          // 像调用add一样调用f\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br")])]),a("h2",{attrs:{id:"四-高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-高阶函数"}},[n._v("#")]),n._v(" 四：高阶函数")]),n._v(" "),a("ul",[a("li",[a("strong",[a("code",[n._v("函数作为参数和函数作为返回值就是高阶函数的体现")])])])]),n._v(" "),a("h3",{attrs:{id:"一-函数作为参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-函数作为参数"}},[n._v("#")]),n._v(" (一)：函数作为参数")]),n._v(" "),a("ul",[a("li",[n._v("函数可以作为参数：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func add(x, y int) int {\n\treturn x + y\n}\n\nfunc calc(x, y int, op func(int, int) int) int {\n\treturn op(x, y)\n}\n\nfunc main() {\n\tret2 := calc(10, 20, add)\n\tfmt.Println(ret2) //30\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("h3",{attrs:{id:"二-函数作为返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-函数作为返回值"}},[n._v("#")]),n._v(" (二)：函数作为返回值")]),n._v(" "),a("ul",[a("li",[n._v("函数也可以作为返回值")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func do(s string) (func(int, int) int, error) {\n\tswitch s {\n\tcase "+":\n\t\treturn add, nil\n\tcase "-":\n\t\treturn sub, nil\n\tdefault:\n\t\terr := errors.New("无法识别的操作符")\n\t\treturn nil, err\n\t}\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("h2",{attrs:{id:"五-匿名函数和闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-匿名函数和闭包"}},[n._v("#")]),n._v(" 五：匿名函数和闭包")]),n._v(" "),a("h3",{attrs:{id:"一-匿名函数-匿名函数多用于实现回调函数和闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-匿名函数-匿名函数多用于实现回调函数和闭包"}},[n._v("#")]),n._v(" (一)：匿名函数(匿名函数多用于实现回调函数和闭包)")]),n._v(" "),a("ul",[a("li",[n._v("函数当然还可以作为返回值，但是在Go语言中函数内部不能再像之前那样定义函数了，只能定义匿名函数。匿名函数就是没有函数名的函数，匿名函数的定义格式如下：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func(参数)(返回值){\n    函数体\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("ul",[a("li",[n._v("匿名函数因为没有函数名，所以没办法像普通函数那样调用，所以匿名函数需要保存到某个变量或者作为立即执行函数:")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func main() {\n\n\t// 将匿名函数保存到变量\n\tadd := func(x, y int) {\n\t\tfmt.Println(x + y)\n\t}\n\t\n\tadd(10, 20) // 通过变量调用匿名函数\n\n\t// 自执行函数：匿名函数定义完加()直接执行\n\tfunc(x, y int) {\n\t\tfmt.Println(x + y)\n\t}(10, 20)\n\t\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("h3",{attrs:{id:"二-闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-闭包"}},[n._v("#")]),n._v(" (二)：闭包")]),n._v(" "),a("ul",[a("li",[n._v("闭包指的是一个函数和与其相关的引用环境组合而成的实体。简单来说，闭包=函数+引用环境。 首先我们来看一个例子：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func adder() func(int) int {\n\tvar x int\n\treturn func(y int) int {\n\t\tx += y\n\t\treturn x\n\t}\n}\n\nfunc main() {\n\tvar f = adder()\n\tfmt.Println(f(10)) //10  调用匿名函数，此时x=0\n\tfmt.Println(f(20)) //30  此时x=10\n\tfmt.Println(f(30)) //60  此时x=30\n\t\n\tf1 := adder()\n\tfmt.Println(f1(40)) //40 此时x=0\n\tfmt.Println(f1(50)) //90 此时x=40\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("ul",[a("li",[n._v("变量f是一个函数并且它引用了其外部作用域中的x变量，此时f就是一个闭包。 在f的生命周期内，变量x也一直有效。 闭包进阶示例1：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func adder2(x int) func(int) int {\n\treturn func(y int) int {\n\t\tx += y\n\t\treturn x\n\t}\n}\n\nfunc main() {\n\tvar f = adder2(10)\n\tfmt.Println(f(10)) //20\n\tfmt.Println(f(20)) //40\n\tfmt.Println(f(30)) //70\n\n\tf1 := adder2(20)\n\tfmt.Println(f1(40)) //60\n\tfmt.Println(f1(50)) //110\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br")])]),a("ul",[a("li",[n._v("闭包进阶示例2：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func makeSuffixFunc(suffix string) func(string) string {\n\treturn func(name string) string {\n\t\tif !strings.HasSuffix(name, suffix) {\n\t\t\treturn name + suffix\n\t\t}\n\t\treturn name\n\t}\n}\n\nfunc main() {\n\tjpgFunc := makeSuffixFunc(".jpg")\n\ttxtFunc := makeSuffixFunc(".txt")\n\tfmt.Println(jpgFunc("test")) //test.jpg\n\tfmt.Println(txtFunc("test")) //test.txt\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br")])]),a("ul",[a("li",[n._v("闭包进阶示例3")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("func calc(base int) (func(int) int, func(int) int) {\n\tadd := func(i int) int {\n\t\tbase += i\n\t\treturn base\n\t}\n\n\tsub := func(i int) int {\n\t\tbase -= i\n\t\treturn base\n\t}\n\treturn add, sub\n}\n\nfunc main() {\n\tf1, f2 := calc(10)\n\tfmt.Println(f1(1), f2(2)) //11 9\n\tfmt.Println(f1(3), f2(4)) //12 8\n\tfmt.Println(f1(5), f2(6)) //13 7\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("h2",{attrs:{id:"六-defer语句-永远在函数返回之前-返回值赋值之后执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-defer语句-永远在函数返回之前-返回值赋值之后执行"}},[n._v("#")]),n._v(" 六：defer语句 (永远在函数返回之前，返回值赋值之后执行)")]),n._v(" "),a("h3",{attrs:{id:"一-go语言中的defer语句会将其后面跟随的语句进行延迟处理。在defer归属的函数即将返回时-将延迟处理的语句按defer定义的逆序进行执行-也就是说-先被defer的语句最后被执行-最后被defer的语句-最先被执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-go语言中的defer语句会将其后面跟随的语句进行延迟处理。在defer归属的函数即将返回时-将延迟处理的语句按defer定义的逆序进行执行-也就是说-先被defer的语句最后被执行-最后被defer的语句-最先被执行"}},[n._v("#")]),n._v(" (一)：Go语言中的defer语句会将其后面跟随的语句进行延迟处理。在defer归属的函数即将返回时，将延迟处理的语句按defer定义的逆序进行执行，也就是说，先被defer的语句最后被执行，最后被defer的语句，最先被执行")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func add() (a int, err error) {\n\tfmt.Println("start")\n\tdefer fmt.Println(1)\n\tdefer fmt.Println(2)\n\tdefer fmt.Println(3)\n\tfmt.Println("end")\n\treturn 10000, nil\n}\n\nfunc main() {\n\ta, err := add()\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n\tfmt.Println(a)\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("ul",[a("li",[n._v("输出结果")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("start\nend\n3\n2\n1\n10000\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("h3",{attrs:{id:"二-defer执行时机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-defer执行时机"}},[n._v("#")]),n._v(" (二)：defer执行时机")]),n._v(" "),a("ul",[a("li",[n._v("在Go语言的函数中return语句在底层"),a("code",[n._v("不是原子操作")]),n._v("，它分为"),a("code",[n._v("给返回值赋值")]),n._v("和"),a("code",[n._v("RET指令两步")]),n._v("。而"),a("code",[n._v("defer语句执行的时机就在返回值赋值操作后，RET指令执行前")]),n._v("。具体如下图所示：")])]),n._v(" "),a("p",[a("img",{attrs:{src:t(698),alt:"Alt text"}})]),n._v(" "),a("h3",{attrs:{id:"三-defer经典案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-defer经典案例"}},[n._v("#")]),n._v(" (三)：defer经典案例")]),n._v(" "),a("ul",[a("li",[n._v("示例")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 输出5，因为没有声明返回值变量\nfunc f1() int {\n\tx := 5\n\tdefer func() {\n\t\tx++\n\t}()\n\treturn x\n}\n\n// 输出6，因为声明返回值变量\nfunc f2() (x int) {\n\tdefer func() {\n\t\tx++\n\t}()\n\treturn 5\n}\n\n// 输出5，因为没有声明返回值变量\nfunc f3() (y int) {\n\tx := 5\n\tdefer func() {\n\t\tx++\n\t}()\n\treturn x\n}\n\n// 输出5，因为这里是直接return 5，不是return x\nfunc f4() (x int) {\n\tdefer func(x int) {\n\t\tx++\n\t}(x)\n\treturn 5\n}\n\nfunc main() {\n\tfmt.Println(f1())\n\tfmt.Println(f2())\n\tfmt.Println(f3())\n\tfmt.Println(f4())\n}\n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br")])]),a("h2",{attrs:{id:"七-内置函数介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-内置函数介绍"}},[n._v("#")]),n._v(" 七：内置函数介绍")]),n._v(" "),a("h3",{attrs:{id:"一-内置函数列表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-内置函数列表"}},[n._v("#")]),n._v(" (一)：内置函数列表")]),n._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[n._v("内置函数")]),n._v(" "),a("th",{staticStyle:{"text-align":"center"}},[n._v("介绍")])])]),n._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("close")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}},[n._v("主要用来关闭channel")])]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("len")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}},[n._v("用来求长度，比如string、array、slice、map、channel")])]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("new")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}},[n._v("用来分配内存，主要用来分配值类型，比如int、struct。返回的是指针")])]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("make")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}},[n._v("用来分配内存，主要用来分配引用类型，比如chan、map、slice")])]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("append")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}},[n._v("用来追加元素到数组、slice中")])]),n._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[n._v("panic和recover")]),n._v(" "),a("td",{staticStyle:{"text-align":"center"}},[n._v("用来做错误处理")])])])]),n._v(" "),a("h3",{attrs:{id:"二-panic-recover"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-panic-recover"}},[n._v("#")]),n._v(" (二)：panic/recover")]),n._v(" "),a("ul",[a("li",[n._v("Go语言中目前（Go1.12）是没有异常机制，但是使用panic/recover模式来处理错误。 panic可以在任何地方引发，但"),a("code",[n._v("recover只有在defer调用的函数中有效")]),n._v("。 首先来看一个例子：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('func funcA() {\n\tfmt.Println("func A")\n}\n\nfunc funcB() {\n\tdefer func() {\n\t\terr := recover()\n\t\t//如果程序出出现了panic错误,可以通过recover恢复过来\n\t\tif err != nil {\n\t\t\tfmt.Println("recover in B")\n\t\t}\n\t}()\n\tpanic("panic in B")\n}\n\nfunc funcC() {\n\tfmt.Println("func C")\n}\nfunc main() {\n\tfuncA()\n\tfuncB()\n\tfuncC()\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br")])]),a("ul",[a("li",[n._v("对于golang中的异常捕获，牢记两点")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1：recover()必须搭配defer使用，一般是defer一个自执行的匿名函数，在函数中掉用recover() 捕获panic的异常\n\n2：defer一定要在可能引发panic的语句之前定义\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("h2",{attrs:{id:"八-函数也可以实现接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八-函数也可以实现接口"}},[n._v("#")]),n._v(" 八：函数也可以实现接口")]),n._v(" "),a("h3",{attrs:{id:"一-函数是一种类型-可以实现接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-函数是一种类型-可以实现接口"}},[n._v("#")]),n._v(" (一)：函数是一种类型，可以实现接口")]),n._v(" "),a("ul",[a("li",[n._v("不仅仅是结构体类型可以实现接口，任何类型都可以实现接口。下面的intGen函数类型，实现了Read方法")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// IReader 接口\ntype IReader interface {\n\tRead(p []byte) (n int, err error)\n}\n\n// 函数类型\ntype stringGen func() int\n\n// NewStringGen 构造器\nfunc NewStringGen() IReader {\n\treturn new(stringGen)\n}\n\n// Read 实现接口的方法\nfunc (g *stringGen) Read(p []byte) (n int, err error) {\n\n\ts := fmt.Sprintf("%s", "Hello Robby")\n\n\t// 创建一个读取字符串s的reader\n\treader := strings.NewReader(s)\n\n\t// 将读取的字符串写入到[]byte中\n\treturn reader.Read(p)\n}\n\nfunc main() {\n\t// 创建类型实例\n\tg := NewStringGen()\n\n\tb := make([]byte, 5)\n\n\treadLen, err := g.Read(b)\n\n\tif err != nil {\n\t\tfmt.Errorf("err")\n\t}\n\n\t// 读取到的长度\n\tfmt.Println(readLen)\n\n\t// 从字符串中，读取到的字节列表\n\tfmt.Printf("%s", b)\n\n}\n\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports},698:function(n,s,t){n.exports=t.p+"assets/img/2021-05-2710.46.46.22675c61.png"}}]);