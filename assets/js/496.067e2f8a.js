(window.webpackJsonp=window.webpackJsonp||[]).push([[496],{2469:function(s,n,a){"use strict";a.r(n);var e=a(9),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一-tornado实现高并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-tornado实现高并发"}},[s._v("#")]),s._v(" 一：Tornado实现高并发")]),s._v(" "),a("h3",{attrs:{id:"一-协程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-协程"}},[s._v("#")]),s._v(" (一)协程")]),s._v(" "),a("ul",[a("li",[s._v("1：协程的本质介绍")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t协程本质上就是一个线程，以前线程任务的切换是由操作系统控制的，遇到I/O自动切换，现在我们用协程的目的就是较少操作系统切换的开销（开关线程，创建寄存器、堆栈等，在他们之间进行切换等），在我们自己的程序里面来控制任务的切换。\n\t协程就是告诉Cpython解释器，你不是nb吗，不是搞了个GIL锁吗，那好，我就自己搞成一个线程让你去执行，省去你切换线程的时间，我自己切换比你切换要快很多，避免了很多的开销。\n\t对于单线程下，我们不可避免程序中出现io操作，但如果我们能在自己的程序中（即用户程序级别，而非操作系统级别）控制单线程下的多个任务能在一个任务遇到io阻塞时就切换到另外一个任务去计算，这样就保证了该线程能够最大限度地处于就绪态，即随时都可以被cpu执行的状态，相当于我们在用户程序级别将自己的io操作最大限度地隐藏起来，从而可以迷惑操作系统，让其看到：该线程好像是一直在计算，io比较少，从而更多的将cpu的执行权限分配给我们的线程。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("2：协程介绍")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\t协程：是单线程下的并发，又称微线程，纤程。英文名Coroutine。一句话说明什么是协程：协程是一种用户态的轻量级线程，即协程是由用户程序自己控制调度的。\n\n需要强调的是：\n\t1：python的线程属于内核级别的，即由操作系统控制调度（如单线程遇到io或执行时间过长就会被迫交出cpu执行权限，切换其他线程运行）\n\t2：单线程内开启协程，一旦遇到io，就会从应用程序级别（而非操作系统）控制切换，以此来提升效率（！！！非io操作的切换与效率无关）\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("3：对比"),a("code",[s._v("操作空间控制的线程的切换 与 用户空间控制的单线程中协程切换")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("①：优点\n1. 协程的切换开销更小，属于程序级别的切换，操作系统完全感知不到，因而更加轻量级\n2. 单线程内就可以实现并发的效果，最大限度地利用cpu\n\n②：缺点\n1. 协程的本质是单线程下，无法利用多核，可以是一个程序开启多个进程，每个进程内开启多个线程，每个线程内开启协程\n2. 协程指的是单个线程，因而一旦协程出现阻塞，将会阻塞整个线程\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("4：协程的主要特点")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：可以在单线程中实现并发\n2：修改共享数据不需加锁\n3：用户程序里自己保存多个控制流的上下文栈\n4：一个协程遇到IO操作自动切换到其它协程（如何实现检测IO，yield、greenlet是无法实现的，就用到了gevent模块（select机制））\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"二-tornado实现高并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-tornado实现高并发"}},[s._v("#")]),s._v(" 二：Tornado实现高并发")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：异步非阻塞IO\n\n2：基于epoll的事件循环\n\n3：携程提高了代码的可读性\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"三-同步请求和异步请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-同步请求和异步请求"}},[s._v("#")]),s._v(" 三：同步请求和异步请求")]),s._v(" "),a("h3",{attrs:{id:"一-基于同步socket-tcp实现http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-基于同步socket-tcp实现http协议"}},[s._v("#")]),s._v(" (一)：基于同步Socket TCP实现HTTP协议")]),s._v(" "),a("ul",[a("li",[s._v("下面的代码解释了，基于TCP实现HTTP协议的请求。如果服务器端不是HTTP协议，那么就需要按照对应的格式发起请求")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import socket\n# 开启一个TCP连接\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = "bbs.yhyblog.cn"\nclient.connect((host, 80))\n# 这里是发送http协议，如果服务器是自实现的tcp协议，那么这里直接替换为自实现的协议格式即可\nclient.send("GET / HTTP/1.1\\n"  # 请求行\n            "Host:{}\\n"         # 请求头 \n            "Connection:close\\n"\n            "Accept-Language: zh-CN,zh;q=0.8,en;q=0.6\\n"\n            "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\\n\\n".format(host).encode(\'utf8\'))\n\ndata = b\'\'\nwhile True:\n    receive_data = client.recv(1024)\n    if receive_data:\n        data += receive_data\n    else:\n        break\n\ndata = data.decode(\'utf8\')\nprint(data)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h3",{attrs:{id:"二-基于异步socket-tcp实现http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-基于异步socket-tcp实现http协议"}},[s._v("#")]),s._v(" (二)：基于异步Socket TCP实现HTTP协议")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('import socket\n# 开启一个TCP连接\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nhost = "bbs.yhyblog.cn"\n# 设置socket为非阻塞的socket\nclient.setblocking(False)\n\n# 异步建立连接\ntry:\n    client.connect((host, 80))\nexcept BlockingIOError as e:\n    pass\n\n# 异步发送请求\nwhile True:\n    try:\n        client.send("GET / HTTP/1.1\\n"  # 请求行\n                    "Host:{}\\n"         # 请求头 \n                    "Connection:close\\n"\n                    "Accept-Language: zh-CN,zh;q=0.8,en;q=0.6\\n"\n                    "User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36\\n\\n".format(host).encode(\'utf8\'))\n        break\n    except OSError as e:\n        pass\n\ndata = b\'\'\nwhile True:\n    try:\n        receive_data = client.recv(1024)\n    except BlockingIOError as e:\n        continue\n    if receive_data:\n        data += receive_data\n    else:\n        break\n\ndata = data.decode(\'utf8\')\nprint(data)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h2",{attrs:{id:"四-io多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-io多路复用"}},[s._v("#")]),s._v(" 四：IO多路复用")]),s._v(" "),a("h3",{attrs:{id:"一-select、poll、epoll、kqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-select、poll、epoll、kqueue"}},[s._v("#")]),s._v(" (一)：select、poll、epoll、kqueue")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tSelect, Poll, Epoll，kqueue都是IO多路复用的机制，I/O多路复用就是通过一种机制使得一个进程可以监视多个文件描述符，一旦某个描述符就绪，能够通知程序进行相应的读写操作。但是select、poll、epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说读写过程是阻塞的，而异步I/O则无需自己负责读写，异步I/O的实现会负责数据从内核拷贝到用户空间。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"二-基于selectors模块实现事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-基于selectors模块实现事件循环机制"}},[s._v("#")]),s._v(" (二)：基于selectors模块实现事件循环机制")]),s._v(" "),a("ul",[a("li",[s._v("事件循环的核心是"),a("code",[s._v("基于selectors模块，给对应的方法注册事件，当满足事件的时候，借助主线程的事件循环功能，获取到回调函数，执行回调函数")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import socket\nfrom selectors import DefaultSelector, EVENT_WRITE, EVENT_READ\n\nselector = DefaultSelector()\n\n\nclass Fetcher:\n\n    def get_url(self, url):\n        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.client.setblocking(False)\n        self.host = url\n        self.data = b''\n\n        try:\n            self.client.connect((self.host, 80))\n        except BlockingIOError as e:\n            # 做一些其他事情\n            pass\n\n        # 向文件描述符注册一个可写的事件, 将connected方法绑定到这个事件上\n        selector.register(self.client.fileno(), EVENT_WRITE, self.connected)\n\n    def connected(self, key):\n        # 取消写事件文件描述的注册\n        selector.unregister(key.fd)\n        # 发送http请求\n        self.client.send(\"GET / HTTP/1.1\\n\"  # 请求行\n                         \"Host:{}\\n\"         # 请求头 \n                         \"Connection:close\\n\\n\".format(self.host).encode('utf8'))\n\n        # 注册一个读事件, 并且将readable方法绑定到这个事件上\n        selector.register(self.client.fileno(), EVENT_READ, self.readable)\n\n    def readable(self, key):\n        recv_data = self.client.recv(1024)\n        if recv_data:\n            self.data += recv_data\n        else:\n            # 取消对读事件文件描述符的注册\n            selector.unregister(key.fd)\n            print(self.data.decode('utf8'))\n\n# 这个方法是主线程，用于驱动任务的执行\ndef loop_forever():\n    # 事件循环，调用事件绑定的方法\n    while True:\n        # 如果此时有一个事件准备就绪\n        ready = selector.select()\n        for key, mask in ready:\n            # 这里就是获取回调方法，例如call_back == self.connected\n            call_back = key.data\n            call_back(key)\n\nif __name__ == '__main__':\n    fetcher = Fetcher()\n    fetcher.get_url('bbs.yhyblog.cn')\n    loop_forever()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br")])]),a("h2",{attrs:{id:"五-tornado中的协程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-tornado中的协程"}},[s._v("#")]),s._v(" 五：Tornado中的协程")]),s._v(" "),a("h3",{attrs:{id:"一-协程概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-协程概念"}},[s._v("#")]),s._v(" (一)：协程概念")]),s._v(" "),a("ul",[a("li",[s._v("什么是协程")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("可以被暂停且切换到其他协程运行的函数\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"二-tornado中的asynchttpclient"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-tornado中的asynchttpclient"}},[s._v("#")]),s._v(" (二)：tornado中的AsyncHTTPClient")]),s._v(" "),a("ul",[a("li",[s._v("基于tornado的事件循环机制")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from tornado import httpclient, ioloop\n\n\nasync def f():\n    http_client = httpclient.AsyncHTTPClient()\n    try:\n        # 由于fetch操作是一个耗时的操作，那么当这个耗时操作在执行的时候，\n        # 会等待且让出CPU，当有结果返回的时候，ioloop就会将返回的结果赋值给response，让这个协程往下走\n        response = await http_client.fetch(\"http://www.baidu.com\")\n    except Exception as e:\n        print(\"Error: %s\" % e)\n    else:\n        print(response.body.decode('utf8'))\n\n\nif __name__ == '__main__':\n    # 获取全局的事件循环对象，一个进程中，只能有一个全局事件循环，这个io_loop对象是一个单例\n    io_loop = ioloop.IOLoop.current()\n    # run_sync方法可以在运行完某个协程后，停止事件循环\n    io_loop.run_sync(f)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("ul",[a("li",[s._v("基于asyncio的事件循环机制")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("from tornado import httpclient\nimport asyncio\n\n\nasync def f():\n    http_client = httpclient.AsyncHTTPClient()\n    try:\n        # 由于fetch操作是一个耗时的操作，那么当这个耗时操作在执行的时候，\n        # 会等待且让出CPU，当有结果返回的时候，ioloop就会将返回的结果赋值给response，让这个协程往下走\n        response = await http_client.fetch(\"http://www.baidu.com\")\n    except Exception as e:\n        print(\"Error: %s\" % e)\n    else:\n        print(response.body.decode('utf8'))\n\n\nif __name__ == '__main__':\n\t# 启动一个事件循环\n    asyncio.get_event_loop().run_until_complete(f())\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);