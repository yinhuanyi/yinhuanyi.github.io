(window.webpackJsonp=window.webpackJsonp||[]).push([[467],{2398:function(s,n,a){"use strict";a.r(n);var e=a(9),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"一-阻塞io和非阻塞io基础概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-阻塞io和非阻塞io基础概念"}},[s._v("#")]),s._v(" 一：阻塞IO和非阻塞IO基础概念")]),s._v(" "),a("h3",{attrs:{id:"一-异步与同步、阻塞和非阻塞"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-异步与同步、阻塞和非阻塞"}},[s._v("#")]),s._v(" (一)：异步与同步、阻塞和非阻塞")]),s._v(" "),a("ul",[a("li",[s._v("异步与同步")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：同步：代码调用IO操作时，必须等待IO操作返回\n\n2：异步：代码调用IO操作时，不必等待IO操作返回\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("阻塞和非阻塞")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("1：阻塞：调用函数的时候，当前线程被挂起，也不让出CPU\n\n2：非阻塞：调用函数的时候，当前线程不会被挂起，而是立即返回\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"二-epoll-回调函数-事件循环实现非阻塞io"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-epoll-回调函数-事件循环实现非阻塞io"}},[s._v("#")]),s._v(" (二)：epoll + 回调函数 + 事件循环实现非阻塞IO")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("epoll + 回调函数 + 事件循环")]),s._v("实现非阻塞IO的编程模型是`Python、Nodejs等单线程编程语言处理异步非阻塞IO的实现方案。虽然可以这样实现，但是编码过程非常容易出错，代码难以维护。具体的编码逻辑如下")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('1：基于socket创建一个非阻塞T的CP连接\n\n2：将socket的文件描述符(fd)注册到select(epoll)中，同时也需要组成一个connect回调函数，以至于当有连接事件的时候，select能够调用connect回调函数\n\n3：在connect回调函数中，send数据到服务器端，并且注册一个"读事件"和read回调函数到select中，以至于当有读事件时，select会调用read回调函数\n\n4：在read回调函数中，获取服务器响应的数据，然后关闭TCP连接\n\n5：最重要的是，select不会自动去监听“连接事件”、“读事件”、“写事件”，需要写一个无限循环函数，不断的获取socket状态，并且调用回调函数\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"二-协程基础概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-协程基础概念"}},[s._v("#")]),s._v(" 二：协程基础概念")]),s._v(" "),a("h3",{attrs:{id:"一-生成器的send、close、throw方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-生成器的send、close、throw方法"}},[s._v("#")]),s._v(" (一)：生成器的send、close、throw方法")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("send()方法")]),s._v("："),a("code",[s._v("生成器的send方法可以将数据传递到生成器内部，并且激活生成器，让生成器执行到下一个yield")]),s._v('。例如下面的代码中，next(gen)让生成器向下运行，生成器会将"https://www.yhyblog.cn"返回，赋值给url。gen.send(html)将html变量的内容传递给生成器，上一个yield会返回这个内容，并赋值给html')])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('def gen_func():\n    # send将数据赋值给html，html为yes\n    html = yield "https://www.yhyblog.cn"\n    print(html)\n    yield 2\n    yield 3\n    return "yes"\n\n\nif __name__ == \'__main__\':\n    gen = gen_func()\n    url = next(gen) # 获取到https://www.yhyblog.cn\n    html = "yes"\n    res = gen.send(html)\n    print(res)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("ul",[a("li",[a("strong",[s._v("close()方法")]),s._v("：gen.close()会终止协程，但是如果协程中依然还有yield需要运行，那么close方法会报错。如果协程被close了，那么next(gen)也会报错。GeneratorExit异常类型是继承自BaseException中的，因此使用Exception类型无法捕获到。如下面代码中由于gen.close()了，那么再调用next就会抛出异常")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('def gen_func():\n    yield "https://www.yhyblog.cn"\n    yield 2\n    yield 3\n    return "yes"\n\n\nif __name__ == \'__main__\':\n    gen = gen_func()\n    print(next(gen))\n    gen.close()\n    next(gen) // 报错：StopIteration异常，因为生成器已经终止了\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ul",[a("li",[s._v("如果注释了"),a("code",[s._v("yield 2和yield 3")]),s._v("两行代码，可以捕获了第一行yield的异常，说明gen.close()的时候，yield会抛出GeneratorExit异常")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("def gen_func():\n    try:\n        yield \"https://www.yhyblog.cn\"\n    except GeneratorExit:\n        print('GeneratorExit')\n    # yield 2\n    # yield 3\n    return \"yes\"\n\nif __name__ == '__main__':\n    gen = gen_func()\n    print(next(gen))\n    gen.close()\n    next(gen)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ul",[a("li",[a("strong",[s._v("throw()方法")]),s._v("：throw方法可以让生成器yield异常。下面代码中：会在第一行的yield中抛出来。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('def gen_func():\n\t// try except可以捕获到\n    try:\n        yield "https://www.yhyblog.cn"\n    except Exception(\'a\') as e:\n        pass\n    yield 2\n    yield 3\n    return "yes"\n\n\nif __name__ == \'__main__\':\n    gen = gen_func()\n    print(next(gen))\n    gen.throw(Exception, "request error") # 这里抛出的异常，会在第一行的yield中抛出来\n    next(gen)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"二-yield-from使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-yield-from使用场景"}},[s._v("#")]),s._v(" (二)：yield from使用场景")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("yield from")]),s._v(" 表达式是一个语法糖，后面接一个iterable可迭代对象。例如下面的代码中"),a("code",[s._v("yield from")]),s._v("相当于for循环然后return")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("def add1():\n    for i in range(10):\n        yield i\n\n# 使用yield from改写\ndef add2():\n    yield from range(10)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("ul",[a("li",[s._v("那么打开文件，统计文件里面的数据的时候，可以使用"),a("code",[s._v("yield from")]),s._v("，节约内存大小")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("def read_file_gen():\n    with open('/Users/Robby/Yinhuanyi_Project/Pycharm/coroutine-project/yield_from_python/test',) as f:\n\t    // 将每一行文本yield出去\n        yield from f.readlines()\n\n\nif __name__ == '__main__':\n\t// 获取生成器，可以一行一行的读取\n    file_gen = read_file_gen()\n    for line in file_gen:\n        print(line.strip('\\n'))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"三-yield-from-与-子生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-yield-from-与-子生成器"}},[s._v("#")]),s._v(" (三)：yield from 与 子生成器")]),s._v(" "),a("ul",[a("li",[s._v("当"),a("code",[s._v("yield from")]),s._v("表达式处理一个子生成器的时候，"),a("code",[s._v("那么就可以将调用者与子生成器之间创建一个双向通道")]),s._v("，下面代码中(调试的时候，可以全部打上断点)：当main函数运行到m.send(None)，会激活委托生成器(middle)，代码会执行到"),a("code",[s._v("yield from sales_sum(key)")]),s._v("，并且执行子生成器(sales_sum)的逻辑。当代码执行到"),a("code",[s._v("x = yield")]),s._v("，子生成器会返回，此时代码直接返回到main函数的"),a("code",[s._v("for value in data_set")]),s._v("，通过遍历data_set列表，将执行m.send(value)操作，那么value值会传递到middle的"),a("code",[s._v("yield from sales_sum(key)")]),s._v("，由于"),a("code",[s._v("yield from sales_sum(key)")]),s._v("内部的return，那么会将value传递到子生成器(sales_sum)中，并且赋值给x变量，那么在sales_sum统计x的和，当value为空的时候break循环，将total, nums统计结果赋值给final_result[key]存储。那么直到data_sets的数据遍历完毕")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('# 存放最终统计的结果\nfinal_result = {}\n\n\n# 子生成器\ndef sales_sum(pro_name):\n    total = 0\n    nums = []\n    while True:\n        x = yield\n        print(pro_name + "销量: ", x)\n        if not x:\n            break\n        total += x\n        nums.append(x)\n    return total, nums\n\n\n# 委托生成器\ndef middle(key):\n    while True:\n        final_result[key] = yield from sales_sum(key)\n        print(key + "销量统计完成")\n\n\n# 调用者\ndef main():\n    data_sets = {\n        "面膜": [1200, 1500, 3000],\n        "手机": [28, 55, 98, 108],\n        "大衣": [280, 560, 778, 70],\n    }\n\n    for key, data_set in data_sets.items():\n        print("start key:", key)\n        # 获取委托协程\n        m = middle(key)\n        m.send(None)  # 预激middle协程\n        for value in data_set:\n            m.send(value)  # 给协程传递每一组的值\n        m.send(None)\n\n    print("最终统计结果:", final_result)\n\n\nif __name__ == \'__main__\':\n    main()\n\n// 输出结果如下\nstart key: 面膜\n面膜销量:  1200\n面膜销量:  1500\n面膜销量:  3000\n面膜销量:  None\n面膜销量统计完成\nstart key: 手机\n手机销量:  28\n手机销量:  55\n手机销量:  98\n手机销量:  108\n手机销量:  None\n手机销量统计完成\nstart key: 大衣\n大衣销量:  280\n大衣销量:  560\n大衣销量:  778\n大衣销量:  70\n大衣销量:  None\n大衣销量统计完成\n最终统计结果: {\'面膜\': (5700, [1200, 1500, 3000]), \'手机\': (289, [28, 55, 98, 108]), \'大衣\': (1688, [280, 560, 778, 70])}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br")])]),a("h2",{attrs:{id:"三-await-和-async"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-await-和-async"}},[s._v("#")]),s._v(" 三：await 和 async")]),s._v(" "),a("h3",{attrs:{id:"一-协程语义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-协程语义"}},[s._v("#")]),s._v(" (一)：协程语义")]),s._v(" "),a("ul",[a("li",[s._v("Python为了加强协程语义，引入了await 和 async两个关键字，用于定义原生协程。下面代码中，解释了协程的执行过程，虽然代码执行报错(StopIteration: 200)，但是download_url可以将code状态码返回。"),a("code",[s._v("这里的await 相当于yield from，downloader(url)是一个Awaitable可等待对象对象，在awaitable对象中实现了__await__方法")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import requests\n\nasync def downloader(url):\n    raw = requests.get(url)\n    return raw.status_code\n\nasync def download_url(url):\n    # 这里的await 相当于yield from， downloader(url)是一个Awaitable可等待对象对象，在awaitable对象中实现了__await__方法\n    docs = await downloader(url)\n    return docs\n\n\nif __name__ == '__main__':\n    co = download_url('https://www.yhyblog.cn')\n    ret = co.send(None)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h3",{attrs:{id:"二-生成器是一个可以暂停的函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-生成器是一个可以暂停的函数"}},[s._v("#")]),s._v(" (二)：生成器是一个可以暂停的函数")]),s._v(" "),a("ul",[a("li",[s._v("生成器由于yield关键字的作用，在运行过程中可以暂停，让出当前CPU，从而让单线程的多个任务可以实现协作式调度，因此说生成器时候一个可以暂停的函数对象。如下面代码，可以通过inspect包查看生成器的状态")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("import inspect\n\ndef gen_func():\n    yield 1\n    return \"yes\"\n\nif __name__ == '__main__':\n    gen = gen_func()\n    print(inspect.getgeneratorstate(gen)) # GEN_CREATED\n\n    next(gen)\n    print(inspect.getgeneratorstate(gen)) # GEN_SUSPENDED\n\n    try:\n        next(gen)\n    except Exception:\n        print(inspect.getgeneratorstate(gen)) # GEN_CLOSED\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ul",[a("li",[s._v("Python的异步编程实际上是：事件循环机制(select/poll/epll) + 协程的解决方案")])])])}),[],!1,null,null,null);n.default=t.exports}}]);