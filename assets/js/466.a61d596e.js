(window.webpackJsonp=window.webpackJsonp||[]).push([[466],{2395:function(s,n,e){"use strict";e.r(n);var a=e(9),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"一-python中的4种队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-python中的4种队列"}},[s._v("#")]),s._v(" 一：Python中的4种队列")]),s._v(" "),e("h3",{attrs:{id:"一-队列分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-队列分类"}},[s._v("#")]),s._v(" (一)：队列分类")]),s._v(" "),e("ul",[e("li",[s._v("概念")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("队列是一种允许在一端做插入操作，在另外一端做删除操作的线性表，在Python语言中，有4种队列经常被使用：\n1：collections.deque\n2：queue.Queue\n3：asyncio.Queue\n4：multiprocessing.Queue\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"二-collections-deque"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-collections-deque"}},[s._v("#")]),s._v(" (二)：collections.deque")]),s._v(" "),e("ul",[e("li",[s._v("介绍")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("deque是双端队列（double-ended queue）的缩写，由于两端都能编辑，deque既可以用来实现栈（stack）也可以用来实现队列（queue）\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("deque的操作方法如下图")])]),s._v(" "),e("p",[s._v("![Alt text](./屏幕快照 2021-03-02 下午9.37.03.png)")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1：相比于list实现的队列，deque实现拥有更低的时间和空间复杂度。list实现在出队（pop）和插入（insert）时的空间复杂度大约为O(n)，deque在出队（pop）和入队（append）时的时间复杂度是O(1)\n\n2：线程安全方面，通过查看collections.deque中的append()、pop()等方法的源码可以知道，他们都是原子操作，所以是GIL保护下的线程安全方法，collections.deque是一个可以方便实现队列的数据结构，具有线程安全的特性，并且有很高的性能\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"三-queue-queue-asyncio-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-queue-queue-asyncio-queue"}},[s._v("#")]),s._v(" (三)：queue.Queue & asyncio.Queue")]),s._v(" "),e("ul",[e("li",[s._v("介绍")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("queue.Queue和asyncio.Queue都是支持多生产者、多消费者的队列，基于collections.deque，他们都提供了Queue（FIFO队列）、PriorityQueue（优先级队列）、LifoQueue（LIFO队列），接口方面也相同\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("区别")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("区别在于queue.Queue适用于多线程的场景，asyncio.Queue适用于协程场景下的通信\n由于asyncio的加成，queue.Queue下的阻塞接口在asyncio.Queue中则是以返回协程对象的方式执行\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[s._v("''")]),s._v(" "),e("th",{staticStyle:{"text-align":"center"}},[s._v("queue.Queue")]),s._v(" "),e("th",{staticStyle:{"text-align":"center"}},[s._v("asyncio.Queue")])])]),s._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("介绍")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("同步队列")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("asyncio队列")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("线程安全")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("是")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("否")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("超时机制")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("通过timeout参数实现")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("通过asyncio.wait_for()方法实现")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("qsize()")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("预估的队列长度（获取qsize到下一个操作之间，queue有可能被其它的线程修改，导致qsize大小发生变化）")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("准确的队列长度（由于是单线程，所以queue不会被其它线程修改）")])]),s._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[s._v("put() / set()")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("put(item, block=True, timeout=None)，可以通过设置block是否为True来配置put和set方法是否为阻塞，并且可以为阻塞操作设置最大时长timeout，block为False时行为和put_nowait()方法一致")]),s._v(" "),e("td",{staticStyle:{"text-align":"center"}},[s._v("put()方法会返回一个协程对象，所以没有block参数和timeout参数，如果需要非阻塞方法，可以使用put_nowait()，如果需要对阻塞方法应用超时，可以使用coroutine asyncio.wait_for()")])])])]),s._v(" "),e("h3",{attrs:{id:"四-multiprocessing-queue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-multiprocessing-queue"}},[s._v("#")]),s._v(" (四)：multiprocessing.Queue")]),s._v(" "),e("ul",[e("li",[s._v("multiprocessing提供了三种队列，分别是Queue、SimpleQueue、JoinableQueue")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1：multiprocessing.Queue既是线程安全也是进程安全的，相当于queue.Queue的多进程克隆版\n2：multiprocessing.Queue支持put和get操作，底层结构是multiprocessing.Pipe\n3：multiprocessing.Queue底层是基于Pipe构建的，但是数据传递时并不是直接写入Pipe，而是写入进程本地buffer，通过一个feeder线程写入底层Pipe，这样做是为了实现超时控制和非阻塞put/get，所以Queue提供了join_thread、cancel_join_thread、close函数来控制feeder的行为，close函数用来关闭feeder线程、join_thread用来join feeder线程，cancel_join_thread用来在控制在进程退出时，不自动join feeder线程，使用cancel_join_thread有可能导致部分数据没有被feeder写入Pipe而导致的数据丢失。和threading.Queue不同的是，multiprocessing.Queue默认不支持join()和task_done操作，这两个支持需要使用mp.JoinableQueue对象。SimpleQueue是一个简化的队列，去掉了Queue中的buffer，没有了使用Queue可能出现的问题，但是put和get方法都是阻塞的并且没有超时控制。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"五-小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-小结"}},[s._v("#")]),s._v(" (五)：小结")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("通过对比可以发现，上述四种结构都实现了队列，但是用处却各有偏重，collections.deque在数据结构层面实现了队列，但是并没有应用场景方面的支持，可以看做是一个基础的数据结构。queue模块实现了面向多生产线程、多消费线程的队列，asyncio.queue模块则实现了面向多生产协程、多消费协程的队列，而multiprocessing.queue模块实现了面向多成产进程、多消费进程的队列\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"二-进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-进程"}},[s._v("#")]),s._v(" 二：进程")]),s._v(" "),e("h3",{attrs:{id:"一-进程工作基本模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-进程工作基本模型"}},[s._v("#")]),s._v(" (一)： 进程工作基本模型")]),s._v(" "),e("ul",[e("li",[s._v("相关代码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import multiprocessing\nimport time\nimport os\n\ndef consumer(queue: multiprocessing.Queue):\n    while True:\n        count = queue.get()\n        if count <= 0:\n            continue\n        print('我是消费者，count={}, 进程ID={}'.format(count, os.getpid()))\n        time.sleep(1)\n\ndef producer(queue: multiprocessing.Queue):\n    count = 0\n    while True:\n        queue.put(count)\n        print('我是生产者，count={}, 进程ID={}'.format(count, os.getpid()))\n        time.sleep(1)\n        count += 1\n\n\nif __name__ == '__main__':\n    queue = multiprocessing.Queue()\n    p1 = multiprocessing.Process(target=producer, args=(queue, ))\n    p2 = multiprocessing.Process(target=consumer, args=(queue, ))\n    p1.start()\n    p2.start()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br")])]),e("ul",[e("li",[s._v("说明")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1：multiprocessing.Queue：底层实现是一个共享内存，类似于redis这种\n\n2：multiprocessing库，提供多线程编程接口，底层依然是fork机制的实现，创建子线程需要面向内核空间进行系统调用\n\n3：在一段代码中，多个进程如果访问了代码中的同一个变量，那么每个进程都会对这个变量重新拷贝一份，对这个变量的操作是在进程内部完成，各个进程之间是相互隔离的。如果需要对同一个变量进行操作，那么需要使用多进程队列\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"三-多进程图片下载模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-多进程图片下载模型"}},[s._v("#")]),s._v(" 三：多进程图片下载模型")]),s._v(" "),e("h3",{attrs:{id:"一-使用processpoolexecutor线程池优化模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-使用processpoolexecutor线程池优化模型"}},[s._v("#")]),s._v(" (一)： 使用ProcessPoolExecutor线程池优化模型")]),s._v(" "),e("ul",[e("li",[s._v("修改executor.py，内容如下")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("from concurrent.futures import  ThreadPoolExecutor, ProcessPoolExecutor\n\nMULTI_NUMS = 50\n\nthread_pool_executor = ThreadPoolExecutor(MULTI_NUMS)\nprocess_pool_executor = ProcessPoolExecutor(MULTI_NUMS)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("修改module_base.py")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("from ..const import CalcType\n\n\nclass BaseModule:\n\n    def __init__(self, *args, **kwargs):\n        # 这里获取的值是0\n        self.calc_type = CalcType.SingleThread\n\n    def set_calc_type(self, type):\n        self.calc_type = type\n    # 如果子类未重写父类方法，抛出异常\n    def _process(self, url):\n        raise NotImplementedError\n\n    def _process_single_thread(self, list_):\n        raise NotImplementedError\n\n    def _process_multi_thread(self, list_):\n        raise NotImplementedError\n\n    def _process_multi_process(self, list_):\n        raise NotImplementedError\n\n    def process(self, list_):\n        if self.calc_type == CalcType.SingleThread:\n            return self._process_single_thread(list_)\n\n        elif self.calc_type == CalcType.MultiThread:\n            return self._process_multi_thread(list_)\n\n        elif self.calc_type == CalcType.MultiProcess:\n            return self._process_multi_process(list_)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br")])]),e("ul",[e("li",[s._v("修改downloader.py")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import requests\nfrom PIL import ImageFile\nimport numpy as np\nfrom .module_base import BaseModule\nfrom .executor import thread_pool_executor, process_pool_executor\n\nclass Downloader(BaseModule):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    # 获取图片，将图片内容转换为\n    def _process(self, url):\n        response = requests.get(url, verify=False)\n        content = response.content\n\n        # 将图片内容转换为numpy的数组\n        parser = ImageFile.Parser() # 获取一个parser对象\n        parser.feed(content)        # 将图片内容填充到parser对象\n        img = parser.close()        # 后去图片内容对象\n        img = np.array(img)         # 返回numpy数据\n        return img\n\n    # 单线程处理\n    def _process_single_thread(self, picture_list):\n        response_list = []\n        for url in picture_list:\n            # 这里返回的是向量\n            img = self._process(url)\n            response_list.append(img)\n\n        return response_list\n\n    # 多线程处理\n    def _process_multi_thread(self, picture_list):\n        response_list = []\n        task_list = []\n        for url in picture_list:\n            # 将任务处理放在线程池中， 返回结果是一个future对象，也就是说task是future对象\n            task = thread_pool_executor.submit(self._process, (url))\n            # 先将future对象添加的任务列表中\n            task_list.append(task)\n\n        # 再从任务列表中取出future对象\n        for task in task_list:\n            img = task.result()\n            response_list.append(img)\n        return response_list\n\n    def _process_multi_process(self, picture_list):\n        response_list = []\n        task_list = []\n        for url in picture_list:\n            # 将任务处理放在线程池中， 返回结果是一个future对象，也就是说task是future对象\n            task = process_pool_executor.submit(self._process, (url))\n            # 先将future对象添加的任务列表中\n            task_list.append(task)\n\n        # 再从任务列表中取出future对象\n        for task in task_list:\n            img = task.result()\n            response_list.append(img)\n        return response_list\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br")])]),e("ul",[e("li",[s._v("修改hasher.py")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("from .module_base import BaseModule\nfrom scipy import signal\nfrom PIL import Image\nimport hashlib\nfrom .executor import thread_pool_executor, process_pool_executor\n\nclass Hasher(BaseModule):\n\n    def _process(self, item):\n        # 这里传递进来的item是每一个numpy的矩阵，对矩阵进行卷积处理, 再次转换为图片二进制内容\n        cov = [[[0.1], [0.05], [0.1]]]\n        img = signal.convolve(item, cov)\n        # 将图片从矩阵还原为二进制内容\n        img = Image.fromarray(img.astype('uint8')).convert('RGB')\n        # 计算img的md5值，十六进制，是一个32位长度的字符串\n        md5 = hashlib.md5(str(img).encode('utf-8')).hexdigest()\n        return md5\n\n    def _process_single_thread(self, list_):\n        md5_list = []\n\n        # list_是numpy数组，数组每一个元素是图片的矩阵\n        for img in list_:\n            # 计算图片的MD5\n            md5 = self._process(img)\n            md5_list.append(md5)\n        return md5_list\n\n    def _process_multi_thread(self, list_):\n        md5_list = []\n        task_list = []\n\n        for img in list_:\n            task = thread_pool_executor.submit(self._process, (img))\n            task_list.append(task)\n\n        for task in task_list:\n            md5 = task.result()\n            md5_list.append(md5)\n\n        return md5_list\n\n    def _process_multi_process(self, list_):\n        md5_list = []\n        task_list = []\n\n        for img in list_:\n            task = process_pool_executor.submit(self._process, (img))\n            task_list.append(task)\n\n        for task in task_list:\n            md5 = task.result()\n            md5_list.append(md5)\n\n        return md5_list\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br")])]),e("ul",[e("li",[s._v("修改storage.py")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("from .module_base import BaseModule\nfrom PIL import Image\nfrom .executor import thread_pool_executor, process_pool_executor\n\nclass Storager(BaseModule):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def _process(self, item):\n        content, path = item\n        # 获取图片的二进制内容\n        content = Image.fromarray(content.astype('uint8')).convert('RGB')\n        content.save(path)\n        pass\n\n    def _process_single_thread(self, list_):\n        # list_中是\n        for item in list_:\n            self._process(item)\n\n    def _process_multi_thread(self, list_):\n        task_list = []\n        for item in list_:\n            task = thread_pool_executor.submit(self._process, (item))\n            task_list.append(task)\n\n        for task in task_list:\n            task.result()\n\n    def _process_multi_process(self, list_):\n        task_list = []\n        for item in list_:\n            task = process_pool_executor.submit(self._process, (item))\n            task_list.append(task)\n\n        for task in task_list:\n            task.result()\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("ul",[e("li",[s._v("修改scheduler.py(这里有个小问题：就是多线程和多进程不能同时统计，因此这里把多进程的统计结果直接单独拿出来了)")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("import os\nimport prettytable\nfrom threading_test.download_server.modules.downloader import Downloader\nfrom threading_test.download_server.modules.hasher import Hasher\nfrom threading_test.download_server.modules.storage import Storager\nfrom threading_test.download_server.utils import get_url_list, Timer\nfrom threading_test.download_server.const import CalcType\n\n# 调用器\nclass Scheduler:\n\n    # 模块初始化\n    def __init__(self):\n        self.download = Downloader()\n        self.hasher = Hasher()\n        self.storager = Storager()\n    \n    # 将md5字符串转换为路径\n    def _get_path(self, md5):\n        file_name = '{}.jpg'.format(md5)\n        file_path = os.path.join('/Users/yinhuanyi/Yinhuanyi_Project/Coroutine_Project/threading_test/download_server/images', file_name)\n        return file_path\n\n    # 设置线程运行的方式\n    def set_calc_type(self, type):\n        self.download.set_calc_type(type)\n        self.hasher.set_calc_type(type)\n        self.storager.set_calc_type(type)\n\n    # 调用各个模块\n    def process(self):\n        timer = Timer()\n        time_statistics = {}\n        time_statistics['cpu'] = []\n        time_statistics['network'] = []\n        time_statistics['disk'] = []\n\n        # 1：加载图片的url\n        url_list = get_url_list()\n        # 2：返回图片的numpy数组列表\n        timer.begine()\n        content_list  = self.download.process(url_list)\n        time_statistics['network'] = timer.end()\n\n        # 3：返回md5列表\n        timer.begine()\n        md5_list = self.hasher.process(content_list)\n        time_statistics['cpu'] = timer.end()\n\n        # 4：将内容和md5路径组合，交给存储模块，存储图片\n        timer.begine()\n        item_list = [(content, self._get_path(md5)) for content, md5 in zip(content_list, md5_list)]\n        self.storager.process(item_list)\n        time_statistics['disk'] = timer.end()\n        return time_statistics\n\n    # 统计各个模块运行时长\n    def statistics(self, single_log: dict, multi_log: dict, multi_process_log: dict):\n        # 设置表头\n        table = prettytable.PrettyTable(['类型', '单线程耗时', '多线程耗时', '多进程耗时', '多线程提升率', '多进程提升率'])\n        # 第一行数据\n        network_row = ['network']\n        # 第二行数据\n        cpu_row = ['cpu']\n        # 第三行数据\n        disk_row = ['disk']\n\n        # 添加单线程数据\n        network_row.append(single_log['network'])\n        cpu_row.append(single_log['cpu'])\n        disk_row.append(single_log['disk'])\n\n        # 添加多线程数据\n        network_row.append(multi_log['network'])\n        cpu_row.append(multi_log['cpu'])\n        disk_row.append(multi_log['disk'])\n\n        # 添加多进程数据\n        network_row.append(multi_process_log['network'])\n        cpu_row.append(multi_process_log['cpu'])\n        disk_row.append(multi_process_log['disk'])\n\n        # 计算多线程对比单线程的效率提升\n        time_ = single_log['network'] - multi_log['network']\n        time_multi_process = single_log['network'] - multi_process_log['network']\n        rate = '{}%'.format(time_ / single_log['network'] * 100)\n        rate_multi_process = '{}%'.format(time_multi_process / single_log['network'] * 100)\n        network_row.append(rate)\n        network_row.append(rate_multi_process)\n\n        time_ = single_log['cpu'] - multi_log['cpu']\n        time_multi_process = single_log['cpu'] - multi_process_log['cpu']\n        rate = '{}%'.format(time_ / single_log['cpu'] * 100)\n        rate_multi_process = '{}%'.format(time_multi_process / single_log['cpu'] * 100)\n        cpu_row.append(rate)\n        cpu_row.append(rate_multi_process)\n\n        time_ = single_log['disk'] - multi_log['disk']\n        time_multi_process = single_log['disk'] - multi_process_log['disk']\n        rate = '{}%'.format(time_ / single_log['disk'] * 100)\n        rate_multi_process = '{}%'.format(time_multi_process / single_log['disk'] * 100)\n        disk_row.append(rate)\n        disk_row.append(rate_multi_process)\n\n        # 数据添加到表中\n        table.add_row(cpu_row)\n        table.add_row(disk_row)\n        table.add_row(network_row)\n        print(table)\n\n\nif __name__ == '__main__':\n\n    scheduler = Scheduler()\n\n    # 设置单线程运行\n    scheduler.set_calc_type(CalcType.SingleThread)\n    single_thread_statistics = scheduler.process()\n    print(single_thread_statistics)\n\n    # 设置多线程\n    scheduler.set_calc_type(CalcType.MultiThread)\n    multi_thread_statistics = scheduler.process()\n    print(multi_thread_statistics)\n\n    # 设置多进程\n    scheduler.set_calc_type(CalcType.MultiProcess)\n    # multi_process_statistics = scheduler.process()\n    multi_process_statistics = {'cpu': 14.763563, 'network': 3.850669, 'disk': 1.47649}\n\n    # 合并数据，对比单线程和多线程\n    scheduler.statistics(single_thread_statistics,\n                         multi_thread_statistics,\n                         multi_process_statistics)\n\n\n    # 对比结果\n    \"\"\"\n+---------+------------+------------+------------+---------------------+---------------------+\n|   类型  | 单线程耗时   | 多线程耗时  | 多进程耗时  |     多线程提升率      |     多进程提升率     |\n+---------+------------+------------+------------+---------------------+---------------------+\n|   cpu   | 27.061348  | 26.211388  | 14.763563  | 3.1408634928311754% | 45.444096132979034% |\n|   disk  |  2.190848  |  0.89858   |  1.47649   | 58.984831444262674% | 32.606461059827055% |\n| network | 25.209811  |  4.021458  |  3.850669  |  84.04804383499742% |  84.72551420556069% |\n+---------+------------+------------+------------+---------------------+---------------------+\n    \"\"\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br"),e("span",{staticClass:"line-number"},[s._v("110")]),e("br"),e("span",{staticClass:"line-number"},[s._v("111")]),e("br"),e("span",{staticClass:"line-number"},[s._v("112")]),e("br"),e("span",{staticClass:"line-number"},[s._v("113")]),e("br"),e("span",{staticClass:"line-number"},[s._v("114")]),e("br"),e("span",{staticClass:"line-number"},[s._v("115")]),e("br"),e("span",{staticClass:"line-number"},[s._v("116")]),e("br"),e("span",{staticClass:"line-number"},[s._v("117")]),e("br"),e("span",{staticClass:"line-number"},[s._v("118")]),e("br"),e("span",{staticClass:"line-number"},[s._v("119")]),e("br"),e("span",{staticClass:"line-number"},[s._v("120")]),e("br"),e("span",{staticClass:"line-number"},[s._v("121")]),e("br"),e("span",{staticClass:"line-number"},[s._v("122")]),e("br"),e("span",{staticClass:"line-number"},[s._v("123")]),e("br"),e("span",{staticClass:"line-number"},[s._v("124")]),e("br"),e("span",{staticClass:"line-number"},[s._v("125")]),e("br"),e("span",{staticClass:"line-number"},[s._v("126")]),e("br"),e("span",{staticClass:"line-number"},[s._v("127")]),e("br"),e("span",{staticClass:"line-number"},[s._v("128")]),e("br"),e("span",{staticClass:"line-number"},[s._v("129")]),e("br"),e("span",{staticClass:"line-number"},[s._v("130")]),e("br"),e("span",{staticClass:"line-number"},[s._v("131")]),e("br"),e("span",{staticClass:"line-number"},[s._v("132")]),e("br"),e("span",{staticClass:"line-number"},[s._v("133")]),e("br"),e("span",{staticClass:"line-number"},[s._v("134")]),e("br"),e("span",{staticClass:"line-number"},[s._v("135")]),e("br"),e("span",{staticClass:"line-number"},[s._v("136")]),e("br"),e("span",{staticClass:"line-number"},[s._v("137")]),e("br"),e("span",{staticClass:"line-number"},[s._v("138")]),e("br"),e("span",{staticClass:"line-number"},[s._v("139")]),e("br"),e("span",{staticClass:"line-number"},[s._v("140")]),e("br"),e("span",{staticClass:"line-number"},[s._v("141")]),e("br"),e("span",{staticClass:"line-number"},[s._v("142")]),e("br"),e("span",{staticClass:"line-number"},[s._v("143")]),e("br"),e("span",{staticClass:"line-number"},[s._v("144")]),e("br"),e("span",{staticClass:"line-number"},[s._v("145")]),e("br"),e("span",{staticClass:"line-number"},[s._v("146")]),e("br")])]),e("h3",{attrs:{id:"二-多进程的局限性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-多进程的局限性"}},[s._v("#")]),s._v(" (二)： 多进程的局限性")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("1：多进程和多线程都会提高CPU上下文切换的开销\n\n2：进程切换的成本是远远大于线程切换的成本\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);