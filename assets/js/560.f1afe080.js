(window.webpackJsonp=window.webpackJsonp||[]).push([[560],{2571:function(t,e,i){"use strict";i.r(e);var a=i(9),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h3",{attrs:{id:"一-data-types-数据类型"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一-data-types-数据类型"}},[t._v("#")]),t._v(" 一：Data Types 数据类型")]),t._v(" "),i("h3",{attrs:{id:"一-data-type"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一-data-type"}},[t._v("#")]),t._v(" (一)：Data Type")]),t._v(" "),i("ul",[i("li",[t._v("在Table生态系统中，数据类型用于描述值的逻辑类型。它可以用来声明Python用户自定义函数的输入／输出类型。 Python Table API的用户可以在Python Table API中，或者定义Python用户自定义函数时，使用pyflink.table.types.DataType实例")])]),t._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("DataType实例声明了数据的逻辑类型，这并不能用于推断数据在进行传输或存储时的具体物理表示形式。 所有预定义的数据类型都位于pyflink.table.types中，并且可以通过类pyflink.table.types.DataTypes中所定义的方法创建。\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br")])]),i("h3",{attrs:{id:"二-数据类型-data-type-和python类型的映射关系"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二-数据类型-data-type-和python类型的映射关系"}},[t._v("#")]),t._v(" (二)：数据类型（Data Type）和Python类型的映射关系")]),t._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("数据类型可用于声明Python用户自定义函数的输入/输出类型。输入数据将被转换为与所定义的数据类型相对应的Python对象，用户自定义函数的执行结果的类型也必须与所定义的数据类型匹配。\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br")])]),i("ul",[i("li",[t._v("数据类型对应关系")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Data Type")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("Python Type")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("Pandas Type")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("bool")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.bool_")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("TINYINT")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.int8")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("SMALLINT")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.int16")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("INT")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.int32")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BIGINT")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("int")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.int64")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FLOAT")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.float32")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("DOUBLE")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("float")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.float64")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("VARCHAR")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("str")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("str")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("VARBINARY")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("bytes")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("bytes")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("DECIMAL")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("decimal.Decimal")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("decimal.Decimal")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("DATE")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.date")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.date")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("TIME")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.time")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.time")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("TimestampType")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.datetime")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.datetime")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("LocalZonedTimestampType")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.datetime")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("datetime.datetime")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("INTERVAL")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("YEAR")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("TO")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("INTERVAL")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("DAY")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("TO")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ARRAY")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("list")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("numpy.ndarray")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("MULTISET")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("list")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("Not")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("MAP")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("dict")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("Not")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ROW")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("Row")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("dict")])])])]),t._v(" "),i("h3",{attrs:{id:"二-内置函数"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二-内置函数"}},[t._v("#")]),t._v(" 二：内置函数")]),t._v(" "),i("h3",{attrs:{id:"一-概念"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#一-概念"}},[t._v("#")]),t._v(" (一)：概念")]),t._v(" "),i("ul",[i("li",[t._v("Flink Table API 和 SQL 提供了一系列的内置函数，用户可以使用这些内置函数进行对数据转换，用户还可以自己实现自己的内置函数")])]),t._v(" "),i("h3",{attrs:{id:"二-标量函数"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#二-标量函数"}},[t._v("#")]),t._v(" (二)：标量函数")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Comparison functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1 === ANY2")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is equal to ANY2; returns UNKNOWN if ANY1 or ANY2 is NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1 !== ANY2")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is not equal to ANY2; returns UNKNOWN if ANY1 or ANY2 is NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1 > ANY2")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is greater than ANY2; returns UNKNOWN if ANY1 or ANY2 is NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1 >= ANY2")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is greater than or equal to ANY2; returns UNKNOWN if ANY1 or ANY2 is NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1 < ANY2")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is less than ANY2; returns UNKNOWN if ANY1 or ANY2 is NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1 <= ANY2")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is less than or equal to ANY2; returns UNKNOWN if ANY1 or ANY2 is NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY.isNull")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY is NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY.isNotNull")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY is not NULL")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING1.like(STRING2)")]),t._v(" "),i("td",[t._v('Returns TRUE if STRING1 matches pattern STRING2; returns UNKNOWN if STRING1 or STRING2 is NULL.  E.g., "JoKn".like("Jo_n%") returns TRUE')])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING1.similar(STRING2)")]),t._v(" "),i("td",[t._v('Returns TRUE if STRING1 matches SQL regular expression STRING2; returns UNKNOWN if STRING1 or STRING2 is NULL. E.g., "A".similar("A+") returns TRUE')])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1.in(ANY2, ANY3, ...)")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 exists in a given list (ANY2, ANY3, ...). When (ANY2, ANY3, ...). contains NULL, returns TRUE if the element can be found and UNKNOWN otherwise. Always returns UNKNOWN if ANY1 is NULL. E.g., 4.in(1, 2, 3) returns FALSE")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY.in(TABLE)")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY is equal to a row returned by sub-query TABLE. Note: For streaming queries the operation is rewritten in a join and group operation. The required state to compute the query result might grow infinitely depending on the number of distinct input rows. Please provide a query configuration with valid retention interval to prevent excessive state size. See Query Configuration for details")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1.between(ANY2, ANY3)")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is greater than or equal to ANY2 and less than or equal to ANY3. When either ANY2 or ANY3 is NULL, returns FALSE or UNKNOWN. E.g., 12.between(15, 12) returns FALSE; 12.between(10, Null(INT)) returns UNKNOWN; 12.between(Null(INT), 10) returns FALSE")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY1.notBetween(ANY2, ANY3)")]),t._v(" "),i("td",[t._v("Returns TRUE if ANY1 is less than ANY2 or greater than ANY3. When either ANY2 or ANY3 is NULL, returns TRUE or UNKNOWN. E.g., 12.notBetween(15, 12) returns TRUE; 12.notBetween(Null(INT), 15) returns UNKNOWN; 12.notBetween(15, Null(INT)) returns TRUE")])])])]),t._v(" "),i("ul",[i("li",[t._v("逻辑函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Logical functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN1 || BOOLEAN2")]),t._v(" "),i("td",[t._v("Returns TRUE if BOOLEAN1 is TRUE or BOOLEAN2 is TRUE. Supports three-valued logic. E.g., true")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN1 && BOOLEAN2")]),t._v(" "),i("td",[t._v("Returns TRUE if BOOLEAN1 and BOOLEAN2 are both TRUE. Supports three-valued logic. E.g., true && Null(BOOLEAN) returns UNKNOWN.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("!BOOLEAN")]),t._v(" "),i("td",[t._v("Returns TRUE if BOOLEAN is FALSE; returns FALSE if BOOLEAN is TRUE; returns UNKNOWN if BOOLEAN is UNKNOWN.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN.isTrue")]),t._v(" "),i("td",[t._v("Returns TRUE if BOOLEAN is TRUE; returns FALSE if BOOLEAN is FALSE or UNKNOWN.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN.isFalse")]),t._v(" "),i("td",[t._v("Returns TRUE if BOOLEAN is FALSE; returns FALSE if BOOLEAN is TRUE or UNKNOWN.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN.isNotTrue")]),t._v(" "),i("td",[t._v("Returns TRUE if BOOLEAN is FALSE or UNKNOWN; returns FALSE if BOOLEAN is TRUE.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN.isNotFalse")]),t._v(" "),i("td",[t._v("Returns TRUE if BOOLEAN is TRUE or UNKNOWN; returns FALSE if BOOLEAN is FALSE.")])])])]),t._v(" "),i("ul",[i("li",[t._v("算术函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Logical functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("+ NUMERIC")]),t._v(" "),i("td",[t._v("Returns NUMERIC.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("- NUMERIC")]),t._v(" "),i("td",[t._v("Returns negative NUMERIC.")])])])]),t._v(" "),i("ul",[i("li",[t._v("字符串函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("String functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING1 + STRING2")]),t._v(" "),i("td",[t._v("Returns the concatenation of STRING1 and STRING2.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.charLength()")]),t._v(" "),i("td",[t._v("Returns the number of characters in STRING.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.upperCase()")]),t._v(" "),i("td",[t._v("Returns STRING in uppercase.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.lowerCase()")]),t._v(" "),i("td",[t._v("Returns STRING in lowercase.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING1.position(STRING2)")]),t._v(" "),i("td",[t._v("Returns the position (start from 1) of the first occurrence of STRING1 in STRING2; returns 0 if STRING1 cannot be found in STRING2.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING1.trim(LEADING, STRING2) STRING1.trim(TRAILING, STRING2) STRING1.trim(BOTH, STRING2) STRING1.trim(BOTH) STRING1.trim()")]),t._v(" "),i("td",[t._v("Returns a string that removes leading and/or trailing characters STRING2 from STRING1. By default, whitespaces at both sides are removed..")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.ltrim()")]),t._v(" "),i("td",[t._v("Returns a string that removes the left whitespaces from STRING.E.g., ' This is a test String.'.ltrim() returns \"This is a test String.\".")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.rtrim()")]),t._v(" "),i("td",[t._v("Returns a string that removes the right whitespaces from STRING.E.g., 'This is a test String. '.rtrim() returns \"This is a test String.\".")])])])]),t._v(" "),i("ul",[i("li",[t._v("时间转换函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Temporal functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.toDate( )")]),t._v(" "),i("td",[t._v('Returns a SQL date parsed from STRING in form of "yyyy-MM-dd".')])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.toTime( )")]),t._v(" "),i("td",[t._v('Returns a SQL time parsed from STRING in form of "HH:mm:ss".')])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("STRING.toTimestamp()")]),t._v(" "),i("td",[t._v('Returns a SQL timestamp parsed from STRING in form of "yyyy-MM-dd HH:mm:ss[.SSS]".')])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("NUMERIC.year NUMERIC.years")]),t._v(" "),i("td",[t._v("Creates an interval of months for NUMERIC years.")])])])]),t._v(" "),i("ul",[i("li",[t._v("条件函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Temporal functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("BOOLEAN.?(VALUE1, VALUE2)")]),t._v(" "),i("td",[t._v("Returns VALUE1 if BOOLEAN evaluates to TRUE; returns VALUE2 otherwise.E.g., (42 > 5).?('A', 'B') returns \"A\".")])])])]),t._v(" "),i("ul",[i("li",[t._v("类型函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Type conversion functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY.cast(TYPE)")]),t._v(" "),i("td",[t._v("Returns a new ANY being cast to type TYPE. See the supported types here.E.g., '42'.cast(INT) returns 42; Null(STRING) returns NULL of type STRING.")])])])]),t._v(" "),i("ul",[i("li",[t._v("集合函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Collection functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ARRAY.cardinality()")]),t._v(" "),i("td",[t._v("Returns the number of elements in ARRAY.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ARRAY.at(INT)")]),t._v(" "),i("td",[t._v("Returns the element at position INT in ARRAY. The index starts from 1.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ARRAY.element()")]),t._v(" "),i("td",[t._v("Returns the sole element of ARRAY (whose cardinality should be one); returns NULL if ARRAY is empty. Throws an exception if ARRAY has more than one element.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("MAP.cardinality()")]),t._v(" "),i("td",[t._v("Returns the number of entries in MAP.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("MAP.at(ANY)")]),t._v(" "),i("td",[t._v("Returns the value specified by key ANY in MAP.")])])])]),t._v(" "),i("ul",[i("li",[t._v("数据构建函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Value constructor functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("row(ANY1, ANY2, ...)")]),t._v(" "),i("td",[t._v("Returns a row created from a list of object values (ANY1, ANY2, ...). Row is composite type that can be access via value access functions.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("array(ANY1, ANY2, ...)")]),t._v(" "),i("td",[t._v("Returns an array created from a list of object values (ANY1, ANY2, ...).")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("map(ANY1, ANY2, ANY3, ANY4, ...)")]),t._v(" "),i("td",[t._v("Returns a map created from a list of key-value pairs ((ANY1, ANY2), (ANY3, ANY4), ...).")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("NUMERIC.rows")]),t._v(" "),i("td",[t._v("Creates a NUMERIC interval of rows (commonly used in window creation).")])])])]),t._v(" "),i("ul",[i("li",[t._v("数据访问函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Value Access Functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("COMPOSITE.get(STRING) COMPOSITE.get(INT)")]),t._v(" "),i("td",[t._v("Returns the value of a field from a Flink composite type (e.g., Tuple, POJO) by name or index.E.g., pojo.get('myField') or tuple.get(0).")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY.flatten()")]),t._v(" "),i("td",[t._v("Returns a flat representation of a Flink composite type (e.g., Tuple, POJO) that converts each of its direct subtype into a separate field. In most cases the fields of the flat representation are named similarly to the original fields but with a dollar separator (e.g., mypojo$mytuple$f0).")])])])]),t._v(" "),i("ul",[i("li",[t._v("辅助函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Auxiliary functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("ANY.as(NAME1, NAME2, ...)")]),t._v(" "),i("td",[t._v("Specifies a name for ANY (a field). Additional names can be specified if the expression expands to multiple fields.")])])])]),t._v(" "),i("ul",[i("li",[t._v("聚合函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Aggregate functions")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.count")]),t._v(" "),i("td",[t._v("Returns the number of input rows for which FIELD is not NULL.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.avg")]),t._v(" "),i("td",[t._v("Returns the average (arithmetic mean) of FIELD across all input rows.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.sum")]),t._v(" "),i("td",[t._v("Returns the sum of numeric field FIELD across all input rows. If all values are NULL, returns NULL.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.sum0")]),t._v(" "),i("td",[t._v("Returns the sum of numeric field FIELD across all input rows. If all values are NULL, returns 0.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.max")]),t._v(" "),i("td",[t._v("Returns the maximum value of numeric field FIELD across all input rows")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.min")]),t._v(" "),i("td",[t._v("Returns the minimum value of numeric field FIELD across all input rows")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.stddevPop")]),t._v(" "),i("td",[t._v("Returns the population standard deviation of numeric field FIELD across all input rows")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.stddevSamp")]),t._v(" "),i("td",[t._v("Returns the sample standard deviation of numeric field FIELD across all input rows.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.varPop")]),t._v(" "),i("td",[t._v("Returns the population variance (square of the population standard deviation) of numeric field FIELD across all input rows.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.varSamp")]),t._v(" "),i("td",[t._v("Returns the sample variance (square of the sample standard deviation) of numeric field FIELD across all input rows.")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("FIELD.collect")]),t._v(" "),i("td",[t._v("Returns a multiset of FIELD across all input rows")])])])]),t._v(" "),i("ul",[i("li",[t._v("时间格式化")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Specifier")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("%a")]),t._v(" "),i("td",[t._v("Abbreviated weekday name (Sun .. Sat)")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("%b")]),t._v(" "),i("td",[t._v("Abbreviated month name (Jan .. Dec)")])])])]),t._v(" "),i("ul",[i("li",[t._v("列函数")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("Specifier")]),t._v(" "),i("th",[t._v("Description")]),t._v(" "),i("th",[t._v("Description")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("withColumns(m to n)")]),t._v(" "),i("td",[t._v('select("withColumns(2 to 4)") = select("b, c, d")')]),t._v(" "),i("td",[t._v("columns from m to n")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);