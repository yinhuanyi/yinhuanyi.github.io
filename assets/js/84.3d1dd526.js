(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{2168:function(t,e,a){"use strict";a.r(e);var s=a(9),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"一-功能模块设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-功能模块设计"}},[t._v("#")]),t._v(" 一：功能模块设计")]),t._v(" "),s("h3",{attrs:{id:"一-理解业务商业背后的本质"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-理解业务商业背后的本质"}},[t._v("#")]),t._v(" (一) 理解业务商业背后的本质")]),t._v(" "),s("ul",[s("li",[t._v("1：架构设计最重要的就是理解整个产品体系在系统中的定位")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t必须先搞清楚系统背后的背景，才能做出最佳的设计和抽象，不要做需求的翻译机，先理解业务背后的本质，是做事情的初衷\n\t\n\t对于评论系统而言，往小方向做是视频的评论系统，往大方向是评论平台\n\n\t任何的言论、视频、商品，都是一个载体，那么可以基于这个载体做一个统一的、多维度的评论系统\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[t._v("2：评论系统需要考虑的问题")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t①：发布评论：支持回复楼层、楼中楼\n\t②：读取评论：按照时间、热度排序\n\t③：删除评论：用户删除、作者删除\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("④：过来了评论：作者置顶、后台运营")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("搜索、删除、审核"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"二-架构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-架构设计"}},[t._v("#")]),t._v(" 二：架构设计")]),t._v(" "),s("h3",{attrs:{id:"一-评论架构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-评论架构设计"}},[t._v("#")]),t._v(" (一) 评论架构设计")]),t._v(" "),s("p",[s("img",{attrs:{src:a(642),alt:"Alt text"}})]),t._v(" "),s("ul",[s("li",[t._v("1：BFF层：comment")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t主要注重与复杂的评论业务编排，比如访问account service获取用户账户信息，同时也需要面向移动端"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("web端不同的场景来设计"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("API")]),t._v("，将评论内容进行抽象处理，包括分页、排序、列表、数据组装等，专注与业务平台化\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("-2 ：Service层：comment-service")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t服务层业务，主要是去平台业务的逻辑，专注在评论功能的"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("API")]),t._v("基础之上实现，比如评论发布、读取、删除评论等，关注在稳定性、可用性上，这样让上游可以灵活的组织逻辑，把基础能力与业务能力剥离开来\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("3：Job层：comment job")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t基于通用任务系统设计，主要是对大量的流量进行消峰处理\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("4：Admin层：comment admin")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t运营管理，按照安全等级进行划分服务，尤其划分运营平台，对于运营平台数据大量都是做检索操作，基于canal同步MySQL日志将数据完整写入到"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ES")]),t._v("中，再通过业务组件更新业务数据层，那么大量的查询压力就流向"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ES")]),t._v("中进行fulltext search\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("5：依赖其他的服务：account service、filter service")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t统一的业务逻辑会专注在"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("BFF")]),t._v("层的comment中进行收敛，这里的account service主要是对账户服务，filter service是对敏感的词语进行过滤\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("小结")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t架构设计等于数据流设计，数量清楚数据的走向和逻辑。避免环形依赖、数据双向请求等\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"三-comment-service-专注数据处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-comment-service-专注数据处理"}},[t._v("#")]),t._v(" (三) comment service 专注数据处理")]),t._v(" "),s("ul",[s("li",[t._v("专注数据处理")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t将comment service和comment 合在一起是单体应用的设计思想，业务功能和数据功能耦合在一起，不利于迭代\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("读取数据(读多写少业务逻辑)：所有读多写少业务，都是Cache Aside 模式，先读取缓存，再读取存储")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t最初期cache rebuild是做在服务里面的，也就是说每次出现cache miss请求，请求都会打到MySQL，然后再将数据写入到Redis中。这样造成的问题是，当Redis集群抖动的情况下，很容易造成"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("负载过大，且service层服务"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OOM")]),t._v("，因为做大量的cache rebuild操作，数据先是在内存中，写入到Redis写不进去的情况下，服务的local cache就会增大，导致"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OOM")]),t._v("\n\t\n\t因此解决问题的方法是：cache miss的数据，从"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("获取，然后再投递一个消息发送到kafka，告诉kafka【有一个消息需要从MySQL读取后，再写入到Redis中】，让cache rebuild操作在进程外部完成。comment job服务收到消息后，会从"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("查询数据，写入到Redis中，这个操作就是【回源操作】\n\n\t预读处理：读取数据的时候，一般会使用read ahead的思路，即预读思想，在读取第一页数据时候，很可能会访问第二页，因此读取第一页的同时也将第二页的数据加载，写入到Redis\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[t._v("写入数据")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t写入数据的逻辑也是一样的，当数据要写入到Redis和"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v("之前，会先将数据发送到Kafka进行消峰，由于在kafka中，同一个partition内，数据是串行的，那么写入到kafka的时候，指定指定写入到哪个topic的partition中，让一类评论数据，串行写入\n\n\t当comment job读取到kafka数据后，写入到Redis和MySQL\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("Kafka的partition概念")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\tpartition从物理上认为是一个小队列，一个topic是由一组partition组成的，所以kafka的吞吐模型为：全局并行，单一partition是串行的。\n\n\t对于每个主题下的评论数据，我们希望写入到MySQL或Redis的时候，按照 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"subject"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"今天星期几"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"comments"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你牛逼呀"')]),t._v("，"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"你真牛逼"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("的数据格式写入，那么就可以对subject做哈希计算，再对partition取模，即 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comment_subject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("N")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("partition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("的方式进行分发， 这个算法也可以改为一致性hash算法。让评论某个subject主题的数据都放在一个partition中，这样方便comment job串行消费\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h3",{attrs:{id:"四-comment-admin-设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-comment-admin-设计"}},[t._v("#")]),t._v(" (四) comment admin 设计")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1：MySQL Binlog中，数据被canal中间件流式消费，获取到业务的原始CRUD操作，需要回放录入到ES中，但是ES的数据最终是面向运营体系提供服务能力，需要检索的数据维度比较多，在数据写入ES之前需要做一个异构的joiner，把单表变宽，预处理好join逻辑，然后倒入到ES中")])]),t._v(" "),s("li",[s("p",[t._v("2： 一般来说，运营后台的检索条件都是组合的，使用ES的好处是避免依赖MySQL来做多条件组合检索。同时MySQL逼近是OLTP面向线上联机事务处理的。这里是基于通过冗余数据的方式，让ES的搜索引擎来实现")])]),t._v(" "),s("li",[s("p",[t._v("3：ES一般会存储检索、展示、primary key等数据，当我们操作编辑的时候，找到记录的primary key，最后交给comment admin完成运营的CRUD操作(运营系统一般是基于ES完成)")])])]),t._v(" "),s("h2",{attrs:{id:"三-存储设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-存储设计"}},[t._v("#")]),t._v(" 三：存储设计")]),t._v(" "),s("h3",{attrs:{id:"一-评论表设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-评论表设计"}},[t._v("#")]),t._v(" (一) 评论表设计")]),t._v(" "),s("ul",[s("li",[t._v("comment_subject、comment_index、comment_content三种表的字段内容如下")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(643),alt:"Alt text"}})]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("1：comment_subject_[0-49]")]),t._v(" 主题表，比如说是一个视频、或者一个图片等")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("字段")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("id")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("主键")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("obj_id")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对象id")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("obj_type")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对象类型")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("member_id")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("作者用户ID")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("count")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("评论总数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("root_count")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("根评论总数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("all_count")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("评论+回复总数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("state")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("(状态)0-正常 1-隐藏")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("attrs")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("属性(0-运营置顶，1-up置顶，2-大数据过滤)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("create_time")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("创建时间")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("update_time")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("修改时间")])])])]),t._v(" "),s("ul",[s("li",[t._v("下面对表字段进行说明。其中count统计，目的是避免每次查询结果的时候，使用"),s("code",[t._v("select count(*)来做行数统计，那么还不如每次写入数据的时候，直接修改统计字段，下次查询的时候，直接返回字段值即可")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("：id是自增的主键，让id是连续的\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("：obj_id和obj_type作为联合唯一索引字段，比如obj_id是漫画id，obj_type是漫画类型，这样就不会重复\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("：member_id：作者的id\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("：count： 记录评论的楼层号，一共有多少楼层，也就是有多少评论\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("：all_count：记录评论数和回复的总数\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("：root_count：一级楼层\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("：state：主题状态\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("：attrs：主题状态\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("：create_time：创建时间\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("：update_time：更新时间 \n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("2：comment_index_[0-199]")]),t._v(" 表，用户对主题的评论")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("字段")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("id")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("主键")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("obj_id")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对象id")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("obj_type")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对象类型")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("member_id")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("发表者用户id")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("root")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("根评论ID, 不为0是回复评论")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("parent")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("父评论ID, 为0是root评论")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("floor")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("评论楼层")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("count")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("评论总数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("root_count")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("根评论总数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("like")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("点赞数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("hate")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("点踩数")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("state")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("(状态)0-正常")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("attrs")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int32")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("属性(0-运营置顶，1-up置顶，2-大数据过滤)")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("create_time")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("创建时间")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("updatetime")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("修改时间")])])])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("3：comment_content_[0-199]")]),t._v(" 表：这里是评论的具体内容，考虑到具体内容特别大，所以将表拆分出来了")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"center"}},[t._v("字段")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),s("th",{staticStyle:{"text-align":"center"}},[t._v("含义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("comment_id")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("主键")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("at_member_ids")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("对象id")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("ip")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int64")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用户的公网IP")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("platform")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("int8")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用户设备系统平台")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("device")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("用户设备")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("message")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("评论内容")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("meta")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("评论元数据：背景、字体")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("create_time")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("创建时间")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"center"}},[t._v("update_time")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("timestamp")]),t._v(" "),s("td",{staticStyle:{"text-align":"center"}},[t._v("修改时间")])])])]),t._v(" "),s("h3",{attrs:{id:"二-评论表读写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-评论表读写"}},[t._v("#")]),t._v(" (二) 评论表读写")]),t._v(" "),s("ul",[s("li",[t._v("写入")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("数据写入：\n\t事务更新comment_subject、comment_index、comment_content三张表，其中comment_content每一条记录是"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("V")]),t._v("结构，非强一致性考虑，可以先写入comment_content表，之后事务更新其他表，如果comment_content表更新成功，comment_subject、comment_index事务更新失败，仅仅就是存在一条Ghost评论数据而已\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[t._v("读取")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("读取评论数据：\n\t基于obj_id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj_type在comment_index表中找到楼层评论列表，即【select id where obj_id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" and obj_type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'视频'")]),t._v(" and root"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" order by floor】，就可以获取根评论数据，再基于id字段从comment_content表中获取到评论内容。\n\t再查询评论的回复信息，【 select id where parent"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("root "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 】\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("由于bili的评论系统，是二级评论列表，因此只需要查询两次即可把所有的评论信息获取到。如果是嵌套类型，例如微博评论系统，那么可以通过点击的方式支持")])]),t._v(" "),s("h3",{attrs:{id:"三-comment-index与comment-content分离的目的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-comment-index与comment-content分离的目的"}},[t._v("#")]),t._v(" (三) comment_index与comment_content分离的目的")]),t._v(" "),s("ul",[s("li",[t._v("comment_index：评论楼层的索引组织表，不包含评论的内容。其中comment_index的id字段和comment_content是1对1的关系，这里面包含的思想如下")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("：表必须设置主键，即聚簇索引，是物理组织形式存储的，comment_content表没有id主键，直接使用了comment_index的主键，目的是为了减少一次 二级索引查找，直接基于主键检索，同时comment_id在写入要尽可能的顺序自增\n\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("：索引和内容分离，方便MySQL的datapage缓存更多的行，并且content信息可以直接使用kv存储\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h3",{attrs:{id:"四-缓存设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-缓存设计"}},[t._v("#")]),t._v(" (四) 缓存设计")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("思想：增量加载 + lazy加载")])]),t._v(" "),s("li",[s("p",[t._v("comment_subject_cache：对应主题的缓存，value使用protobuf序列化的方式存储，我们早期使用memcache来进行缓存，因为Redis早期单线程模型，吞吐能力不高")])]),t._v(" "),s("li",[s("p",[t._v("comment_index_cache：使用 redis sortedset 进行索引的缓存，索引即数据的组织顺序，而非数据内容。参考过百度的贴吧，他们使用自己研发的拉链存储来组织索引，我认为 mysql 作为主力存储，利用 redis 来做加速完全足够，因为 cache miss 的构建，我们前面讲过使用 kafka 的消费者中处理，预加载少量数据，通过增量加载的方式逐渐预热填充缓存，而 redis sortedset skiplist 的实现，可以做到 O(logN) + O(M) 的时间复杂度，效率很高。sorted set 是要增量追加的，因此必须判定 key 存在，才能 zadd。")])]),t._v(" "),s("li",[s("p",[t._v("comment_content_cache: 对应评论内容数据，使用 protobuf 序列化的方式存入。类似的我们早期使用 memcache 进行缓存。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:a(644),alt:"Alt text"}})]),t._v(" "),s("h2",{attrs:{id:"四-可用性设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-可用性设计"}},[t._v("#")]),t._v(" 四：可用性设计")]),t._v(" "),s("h3",{attrs:{id:"一-什么是缓存穿透、击穿、雪崩-如何解决-【传统解决方法】"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是缓存穿透、击穿、雪崩-如何解决-【传统解决方法】"}},[t._v("#")]),t._v(" (一) 什么是缓存穿透、击穿、雪崩，如何解决？【传统解决方法】")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("1：什么是缓存穿透")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t在查询数据的时候，如果缓存层没有找到数据，那么请求会回源到数据库层，如果数据库返回空，那么也就不会将数据写入到Redis中，使得空数据直接返回\n\t那么下一个请求同样会查询Redis，没有数据，再次查询到MySQL，使得Redis就像被穿透一样，这就是缓存穿透\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[t._v("缓存穿透如下图所示")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(645),alt:"Alt text"}})]),t._v(" "),s("ul",[s("li",[t._v("如何解决缓存穿透")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("第一种解决方法：\n\t将空数据存储到Redis中，设置一个过期时间即可\n\n第二种解决方法：\n\t使用布隆过滤器\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("2：什么是缓存击穿")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t如果Redis缓存中的数据，在某个时刻批量过期，导致大部分请求直接落在数据库上，这种现象叫做缓存击穿\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("缓存击穿如下图所示")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(646),alt:"Alt text"}})]),t._v(" "),s("ul",[s("li",[t._v("如何解决缓存击穿问题")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("第一种方法：\n\t对于比较热点的数据，在访问的时候，更新数据的过期时间，让这些数据短时间内都不过期，如果是批量入库的缓存项，设置不同的时间的过期时间\n\n第二种方法：\n\t使用分布式锁，保证对于每个key同时只有一个线程去查询后端的服务，某个线程在查询数据库，其他的线程没有获得分布式锁的权限，需要进行等待\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[s("strong",[t._v("3：什么是缓存雪崩")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t如果在某一时刻缓存集中失效，或者缓存系统出现故障，所有的并发流量就会直接到达数据库。数据存储层的调用量就会暴增，用不了多长时间，数据库就会被大流量压垮，这种级联式的服务故障，就叫作缓存雪崩\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("ul",[s("li",[t._v("缓存雪崩如下图所示")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(647),alt:"Alt text"}})]),t._v(" "),s("ul",[s("li",[t._v("如何解决缓存雪崩问题")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t为了缓解大并发流量，可以使用限流降级的方式防止缓存雪崩\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"二-在golang中单进程内-问题解决缓存穿透"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二-在golang中单进程内-问题解决缓存穿透"}},[t._v("#")]),t._v(" (二) 在golang中单进程内，问题解决缓存穿透")]),t._v(" "),s("ul",[s("li",[t._v("使用singleflight库，"),s("strong",[t._v("解决进程内部的归并问题")]),t._v("，在一个进程内部，只有一个goroutine去获取数据，其他的goroutine都等待结果的返回。"),s("strong",[t._v("虽然这种情况下，无法解决多进程，多节点的并发缓存穿透，但是解决了进程内部的多线程并发穿透问题")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在singleflight中，有一个Do方法，使得一个线程获取数据，其他线程等待数据返回的结果")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("g "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("Group"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Do")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key string"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shared bool"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"三-多进程中-解决缓存穿透"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三-多进程中-解决缓存穿透"}},[t._v("#")]),t._v(" (三) 多进程中，解决缓存穿透")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("1：comment job服务收到Kafka的cache rebuild指令后，会先查询一下Redis你，看看key是否已经存在了，如果存在，那么直接将这个请求丢弃掉，如果不存在，才从MySQL查询数据，再将数据缓存到Redis中")])]),t._v(" "),s("li",[s("p",[t._v("2：如果在cache rebuild过程中，有很多kafka的cache rebuild消息，此时对应的缓存key在kafka还没有生成，那岂不是这些请求都会查询一下数据库吗？如何解决？")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t那么这样可以在进程内部，设置一个map，short"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("lived"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("flag，例如，在"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("秒内，如果有相同的key要查询数据库，那么直接丢弃掉\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("h3",{attrs:{id:"四-超高热点问题解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四-超高热点问题解决"}},[t._v("#")]),t._v(" (四) 超高热点问题解决")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("当一个主题，特别的热门，"),s("strong",[t._v("那么基于主题的一致性hash会打到一个Redis节点")]),t._v("，那么这一个Redis节点负载会非常的高，单Redis节点就会出现瓶颈问题")])]),t._v(" "),s("li",[s("p",[t._v("这个使用可以在进程级别，设置一个local cache，我们会根据算法，自适应的去发现热点，"),s("strong",[t._v("将热点数据存储到local cache中，并且设置一个ttl超时时间，ttl超时时间是保证数据的一致性的")]),t._v("。那么先判断请求是否是热点数据，如果是热点数据，那么直接从local cache中查找，如果找不到再去Redis中查找")])]),t._v(" "),s("li",[s("p",[t._v("那如何判断哪个数据是热点数据呢？这就要使用滑动窗口去统计了")])])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("\t在内存中使用hashmap统计每个key的访问频率，这里使用滑动窗口统计，每个窗口是一个hashmap，hashmap是环形列表的一个元素，每个"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("秒清理其中一个hashmap的数据，"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("秒统计一次TopK，给"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("K")]),t._v("设置一个阈值，如果key的频率大于阈值，那么就认为是一个热点数据，这样就可以每一秒都可以获取热点数据，写入到local cache中，并且设置热点数据的ttl过期时间\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])])])}),[],!1,null,null,null);e.default=n.exports},642:function(t,e,a){t.exports=a.p+"assets/img/2021-08-311.39.37.df9d9795.png"},643:function(t,e,a){t.exports=a.p+"assets/img/2021-09-0110.06.29.41c9a9ba.png"},644:function(t,e,a){t.exports=a.p+"assets/img/2021-09-011.48.19.0a9cd83b.png"},645:function(t,e,a){t.exports=a.p+"assets/img/2021-09-012.22.02.a70a5853.png"},646:function(t,e,a){t.exports=a.p+"assets/img/2021-09-012.30.41.6a92db99.png"},647:function(t,e,a){t.exports=a.p+"assets/img/2021-09-012.54.01.33663d35.png"}}]);