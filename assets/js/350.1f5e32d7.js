(window.webpackJsonp=window.webpackJsonp||[]).push([[350],{2191:function(n,s,a){"use strict";a.r(s);var t=a(9),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h2",{attrs:{id:"一-相同之处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-相同之处"}},[n._v("#")]),n._v(" 一：相同之处")]),n._v(" "),a("h3",{attrs:{id:"一-都是引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-都是引用类型"}},[n._v("#")]),n._v(" (一)：都是引用类型")]),n._v(" "),a("ul",[a("li",[n._v("栈、堆、队列的说明")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("1：栈：先进后出结构，在程序调用的时候从栈空间去分配\n2：堆：完全二叉树结构，在程序调用的时候从系统的内存区分配\n3：队列：先进先出结构，\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("ul",[a("li",[a("strong",[n._v("指针、interface、slice、map、chan 都是引用类型")]),n._v("，所以必须要注意这5种类型的变量作为参数传递时候，默认是引用传递")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("变量存储的是一个地址，这个地址指向最终的值，值通常在堆上分配，通过GC回收\n\nref var -----\x3e 内存地址 -----\x3e 值\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("ul",[a("li",[a("strong",[n._v("int、float、bool、string、array、struct 都是值类型")]),n._v("，所以这6种类型，作为参数传递的时候都是值传递")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("变量直接存储值，内容通常在栈中分配\nvar -----\x3e 5\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br")])]),a("h3",{attrs:{id:"二-声明后-默认值都是nil"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-声明后-默认值都是nil"}},[n._v("#")]),n._v(" (二)：声明后，默认值都是nil")]),n._v(" "),a("ul",[a("li",[n._v("指针、slice、map、chan、interface，默认值为nil")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('/*\n1. %v    只输出所有的值\n\n2. %+v 先输出字段类型，再输出该字段的值\n\n3. %#v 先输出结构体名字值，再输出结构体（字段类型+字段的值）\n*/\n\n\n// 声明指针\nvar a *int\nfmt.Printf("%#v", a) // (*int)(nil), 类型是*int，值是nil\n\n\n// 声明slice\nvar a []int\nfmt.Printf("%#v", a) // []int(nil)\n\n\n// 申明map\nvar a map[string]string\nfmt.Printf("%#v", a) // map[string]string(nil)\n\n\n// 申明chan\nvar a chan int\nfmt.Printf("%#v", a) // (chan int)(nil)\n\n\n// 申明interface\ntype IWriter interface {}  // 定义接口类型\nvar a IWriter // 申明接口变量\nfmt.Printf("%#v", a) // <nil>\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br")])]),a("ul",[a("li",[n._v("int、float、bool、string、array 都有对应的非nil默认值")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('int的默认值为：0\n\nfloat默认值为：0\n\nbool默认值为：false\n\nstring默认值为：""\n\nvar a [4]int：数组默认值为数组元素类型的默认值，[0 0 0 0]\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("h3",{attrs:{id:"三-必须是使用make函数初始化后才能被使用-错误和正确的使用方法对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-必须是使用make函数初始化后才能被使用-错误和正确的使用方法对比"}},[n._v("#")]),n._v(" (三)：必须是使用make函数初始化后才能被使用(错误和正确的使用方法对比)")]),n._v(" "),a("ul",[a("li",[n._v("slice (切片有个特别的地方，就是append操作，可以在声明后，直接进行append操作)")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// slice错误操作方法\nvar a []int // 申明切片\na[0] = 1    // 这样是错误的，会panic，因为切片没有初始化\n\n// slice正确操作方法\nvar a []int // 申明切片\na = make([]int, 3) // 初始化\na[0] = 1\n\n// 也可以直接使用make函数初始化，不需要声明\na := make([]int, 3)\nfmt.Println(a)\n\n// 但是初始化切片的时候，必须指定len，如果len是0，那么赋值的时候也会出错【panic: runtime error: index out of range [0] with length 0】\na := make([]int, 0)\na[0] = 1\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br")])]),a("ul",[a("li",[n._v("map")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// map错误操作方法\nvar m map[string]int\nm["age"] = 0\n\n// map正确操作方法\nvar m map[string]int\nm = make(map[string]int)\nm["age"] = 0\n\n// 或者直接make初始化\nm := make(map[string]int)\nm["age"] = 0\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("ul",[a("li",[n._v("chan")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 声明后初始化\nfunc recv(ch chan int)  {\n\tret := <- ch\n\tfmt.Printf("接收成功 %d\\n", ret)\n}\n\nfunc main() {\n\tvar ch chan int // 声明chan\n\tch = make(chan int) // 初始化\n\tgo recv(ch) // 必须是初始化后的chan才能调用goroutine取值\n\tch <- 10   // 发送值\n\tclose(ch)\n}\n\n// 直接初始化\nfunc recv(ch chan int)  {\n\tret := <- ch\n\tfmt.Printf("接收成功 %d\\n", ret)\n}\n\nfunc main() {\n\tch := make(chan int)\n\tgo recv(ch)\n\tch <- 10\n\tclose(ch)\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br")])]),a("h3",{attrs:{id:"四-都是线程不安全的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-都是线程不安全的"}},[n._v("#")]),n._v(" (四)：都是线程不安全的")]),n._v(" "),a("ul",[a("li",[a("p",[a("strong",[n._v("默认情况下，如果在并发环境下操作slice、map，都必须使用sync.Mutex加锁")])])]),n._v(" "),a("li",[a("p",[n._v("slice加锁写法")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("type Slice struct {\n\tarray []int\n\tlen int\n\tcap int\n\tlock sync.Mutex // 并发下，保证线程安全\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br")])]),a("ul",[a("li",[n._v("map加锁写法")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('type AccessControl struct {\n\t// 这是缓存用户相关信息\n\tsourceArray map[int]time.Time  // 这个map存储的是{"uid": 当前时间}\n\tsync.RWMutex // 并发下，保证线程安全\n}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br")])]),a("h2",{attrs:{id:"二-不同之处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-不同之处"}},[n._v("#")]),n._v(" 二：不同之处")]),n._v(" "),a("h3",{attrs:{id:"一-slice切片删除元素和插入元素会造成len变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-slice切片删除元素和插入元素会造成len变化"}},[n._v("#")]),n._v(" (一)：slice切片删除元素和插入元素会造成len变化")]),n._v(" "),a("ul",[a("li",[n._v("插入元素和删除元素的时候，切片的len会改变，cap不会改变，例如下面的例子中，使用切片的语法删除元素后，"),a("code",[n._v("原有切片的len减1了")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('s := make([]int, 9, 9)\ns = []int{1,2,3,4,5,6,7,8,9}\n// 输出结果：len=9, cap=9\nfmt.Printf("len=%d, cap=%d\\n", len(s), cap(s))\n// 删除index=4的元素\nindex := 4\nfront := s[:index]\ntail := s[index+1:]\ns = append(front, tail...)\n// 输出结果：len=8, cap=9\nfmt.Printf("len=%d, cap=%d\\n", len(s), cap(s))\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("ul",[a("li",[n._v("那么如何只让元素删除，但是len不变呢，因为len如果改变，"),a("code",[n._v("那么赋值的时候可能出现【index out of range [4] with length 4】的错误")]),n._v("，那么在tail切片的基础上重新拷贝一份，如下面的代码")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('s := make([]int, 9, 9)\ns = []int{1,2,3,4,5,6,7,8,9}\n// 输出结果：len=9, cap=9\nfmt.Printf("len=%d, cap=%d\\n", len(s), cap(s))\n// 删除index=4的元素\nindex := 4\nfront := s[:index]\ntail := s[index:]\nnewTail := make([]int, len(tail), len(tail))\ncopy(newTail, tail[1:])\ns = append(front, newTail...)\n// 输出结果：len=9, cap=9\nfmt.Printf("len=%d, cap=%d\\n", len(s), cap(s))\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);