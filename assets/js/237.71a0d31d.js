(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{2202:function(s,n,a){"use strict";a.r(n);var t=a(9),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"一-概要"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-概要"}},[s._v("#")]),s._v(" 一：概要")]),s._v(" "),t("h3",{attrs:{id:"一-基本定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-基本定义"}},[s._v("#")]),s._v(" (一)：基本定义")]),s._v(" "),t("ul",[t("li",[s._v("什么是切片，"),t("code",[s._v("切片是引用类型")])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\t切片（Slice）是一个拥有相同类型元素的可变长度的序列。它是基于数组类型做的一层封装。它非常灵活，支持自动扩容\n\t切片是一个引用类型，它的内部结构包含地址、长度和容量。切片一般用于快速地操作一块数据集合\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("切片初始化")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\t// 声明切片类型\n\tvar a []string              //声明一个字符串切片\n\tvar b = []int{}             //声明一个整型切片并初始化\n\tvar c = []bool{false, true} //声明一个布尔切片并初始化\n\tvar d = []bool{false, true} //声明一个布尔切片并初始化\n\tfmt.Println(a)              //[]\n\tfmt.Println(b)              //[]\n\tfmt.Println(c)              //[false true]\n\tfmt.Println(a == nil)       //true\n\tfmt.Println(b == nil)       //false\n\tfmt.Println(c == nil)       //false\n\t// fmt.Println(c == d)   //切片是引用类型，不支持直接比较，只能和nil比较\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("ul",[t("li",[s._v("切片的长度和容量")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("切片拥有自己的长度和容量，我们可以通过使用内置的len()函数求长度，使用内置的cap()函数求切片的容量。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("完整切片表达式")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('func main() {\n\ta := [5]int{1, 2, 3, 4, 5}\n\tt := a[1:3:5]\n\tfmt.Printf("t:%v len(t):%v cap(t):%v\\n", t, len(t), cap(t))\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"二-使用make-函数构造切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-使用make-函数构造切片"}},[s._v("#")]),s._v(" (二)：使用make()函数构造切片")]),s._v(" "),t("ul",[t("li",[s._v("我们上面都是基于数组来创建的切片，如果需要动态的创建一个切片，我们就需要使用内置的make()函数，格式如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 创建一个int类型的切片\na := make([]int, 2, 10)\nfmt.Println(a)      //[0 0]\nfmt.Println(len(a)) //2\nfmt.Println(cap(a)) //10\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("上面代码中a的内部存储空间已经分配了10个，但实际上只用了2个。 容量并不会影响当前元素的个数，所以len(a)返回2，cap(a)则返回该切片的容量。")])]),s._v(" "),t("h3",{attrs:{id:"三-切片的本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-切片的本质"}},[s._v("#")]),s._v(" (三)：切片的本质")]),s._v(" "),t("ul",[t("li",[s._v("切片的本质就是对底层数组的封装，它包含了三个信息：底层数组的指针、切片的长度（len）和切片的容量（cap）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("举个例子，现在有一个数组a := [8]int{0, 1, 2, 3, 4, 5, 6, 7}，切片s1 := a[:5]，相应示意图如下。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:a(726),alt:"Alt text"}})]),s._v(" "),t("ul",[t("li",[s._v("判断切片是否为空")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("要检查切片是否为空，请始终使用len(s) == 0来判断，而不应该使用s == nil来判断。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"二-切片的操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-切片的操作"}},[s._v("#")]),s._v(" 二：切片的操作")]),s._v(" "),t("h3",{attrs:{id:"一-切片不能直接比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-切片不能直接比较"}},[s._v("#")]),s._v(" (一)：切片不能直接比较")]),s._v(" "),t("ul",[t("li",[s._v("切片之间是不能比较的，我们不能使用==操作符来判断两个切片是否含有全部相等元素。 切片唯一合法的比较操作是和nil比较。 一个nil值的切片并没有底层数组，一个nil值的切片的长度和容量都是0。但是我们不能说一个长度和容量都是0的切片一定是nil，例如下面的示例：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("var s1 []int          //len(s1)=0;cap(s1)=0;s1==nil\n\n\ns2 := []int{}         //len(s2)=0;cap(s2)=0;s2!=nil\ns3 := make([]int, 0)  //len(s3)=0;cap(s3)=0;s3!=nil\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("所以要判断一个切片是否是空的，要是用len(s) == 0来判断，不应该使用s == nil来判断，因为不是nil的切片，可能也是空切片")])]),s._v(" "),t("h3",{attrs:{id:"二-切片的赋值拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-切片的赋值拷贝"}},[s._v("#")]),s._v(" (二)：切片的赋值拷贝")]),s._v(" "),t("ul",[t("li",[s._v("下面的代码中演示了拷贝前后两个切片共享同一个底层数组，对一个切片的修改会影响另一个切片的内容，这点需要特别注意")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 这里解释了切片是引用传递\nfunc main() {\n\ts1 := make([]int, 3) //[0 0 0]\n\ts2 := s1             //将s1直接赋值给s2，s1和s2共用一个底层数组\n\ts2[0] = 100\n\tfmt.Println(s1) //[100 0 0]\n\tfmt.Println(s2) //[100 0 0]\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"三-切片遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-切片遍历"}},[s._v("#")]),s._v(" (三)：切片遍历")]),s._v(" "),t("ul",[t("li",[s._v("切片的遍历方式和数组是一致的，支持索引遍历和for range遍历")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\ts := []int{1, 3, 5}\n\n\tfor i := 0; i < len(s); i++ {\n\t\tfmt.Println(i, s[i])\n\t}\n\n\tfor index, value := range s {\n\t\tfmt.Println(index, value)\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h3",{attrs:{id:"四-append-方法为切片添加元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-append-方法为切片添加元素"}},[s._v("#")]),s._v(" (四)：append()方法为切片添加元素")]),s._v(" "),t("ul",[t("li",[s._v("Go语言的内建函数append( )可以为切片动态添加元素。 可以一次添加一个元素，可以添加多个元素，也可以添加另一个切片中的元素（后面加…）")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main(){\n\tvar s []int\n\ts = append(s, 1)        // [1]\n\ts = append(s, 2, 3, 4)  // [1 2 3 4]\n\ts2 := []int{5, 6, 7}  \n\ts = append(s, s2...)    // [1 2 3 4 5 6 7]\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("有个注意点：通过var声明的零值切片可以在append( )函数直接使用，无需初始化")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 虽然这里没有初始化，但是可以直接添加元素\nvar s []int\ns = append(s, 1, 2, 3)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[s._v("没有必要像下面的代码一样初始化一个切片再传入append()函数使用")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("s := []int{}  // 没有必要初始化\ns = append(s, 1, 2, 3)\n\nvar s = make([]int)  // 没有必要初始化\ns = append(s, 1, 2, 3)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("每个切片会指向一个底层数组，这个数组的容量够用就添加新增元素。当底层数组不能容纳新增的元素时，切片就会自动按照一定的策略进行“扩容”，此时该切片指向的底层数组就会更换。“扩容”操作往往发生在append()函数调用时，所以我们通常都需要用原变量接收append函数的返回值")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('func main() {\n\t//append()添加元素和切片扩容\n\tvar numSlice []int\n\tfor i := 0; i < 10; i++ {\n\t\tnumSlice = append(numSlice, i)\n\t\tfmt.Printf("%v  len:%d  cap:%d  ptr:%p\\n", numSlice, len(numSlice), cap(numSlice), numSlice)\n\t}\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("输出")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("[0]  len:1  cap:1  ptr:0xc0000a8000\n[0 1]  len:2  cap:2  ptr:0xc0000a8040\n[0 1 2]  len:3  cap:4  ptr:0xc0000b2020\n[0 1 2 3]  len:4  cap:4  ptr:0xc0000b2020\n[0 1 2 3 4]  len:5  cap:8  ptr:0xc0000b6000\n[0 1 2 3 4 5]  len:6  cap:8  ptr:0xc0000b6000\n[0 1 2 3 4 5 6]  len:7  cap:8  ptr:0xc0000b6000\n[0 1 2 3 4 5 6 7]  len:8  cap:8  ptr:0xc0000b6000\n[0 1 2 3 4 5 6 7 8]  len:9  cap:16  ptr:0xc0000b8000\n[0 1 2 3 4 5 6 7 8 9]  len:10  cap:16  ptr:0xc0000b8000\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("ul",[t("li",[s._v("从上述的结果可以看出")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("1：append()函数将元素追加到切片的最后并返回该切片。\n\n2：切片numSlice的容量按照1，2，4，8，16这样的规则自动进行扩容，每次扩容后都是扩容前的2倍。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h3",{attrs:{id:"五-切片的扩容策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-切片的扩容策略"}},[s._v("#")]),s._v(" (五)：切片的扩容策略")]),s._v(" "),t("ul",[t("li",[s._v("可以通过查看$GOROOT/src/runtime/slice.go源码，其中扩容相关代码如下")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("newcap := old.cap\ndoublecap := newcap + newcap\nif cap > doublecap {\n\tnewcap = cap\n} else {\n\tif old.len < 1024 {\n\t\tnewcap = doublecap\n\t} else {\n\t\t// Check 0 < newcap to detect overflow\n\t\t// and prevent an infinite loop.\n\t\tfor 0 < newcap && newcap < cap {\n\t\t\tnewcap += newcap / 4\n\t\t}\n\t\t// Set newcap to the requested cap when\n\t\t// the newcap calculation overflowed.\n\t\tif newcap <= 0 {\n\t\t\tnewcap = cap\n\t\t}\n\t}\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("ul",[t("li",[s._v("对上述代码进行解释")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("从上面的代码可以看出以下内容：\n\n1：首先判断，如果新申请容量（cap）大于2倍的旧容量（old.cap），最终容量（newcap）就是新申请的容量（cap）\n\n2：否则判断，如果旧切片的长度小于1024，则最终容量(newcap)就是旧容量(old.cap)的两倍，即（newcap=doublecap）\n\n3：否则判断，如果旧切片长度大于等于1024，则最终容量（newcap）从旧容量（old.cap）开始循环增加原来的1/4，即（newcap=old.cap,for {newcap += newcap/4}）直到最终容量（newcap）大于等于新申请的容量(cap)，即（newcap >= cap）\n\n4：如果最终容量（cap）计算值溢出，则最终容量（cap）就是新申请容量（cap）\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"六-使用copy-函数复制切片"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六-使用copy-函数复制切片"}},[s._v("#")]),s._v(" (六)：使用copy()函数复制切片")]),s._v(" "),t("ul",[t("li",[s._v("Go语言内建的copy()函数可以迅速地将一个切片的数据复制到另外一个切片空间中，copy()函数的使用格式如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("copy(destSlice, srcSlice []T)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("举例")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("a := []int{1, 2, 3, 4, 5}\nc := make([]int, len(a))\ncopy(c, a)     //使用copy()函数将切片a中的元素复制到切片c\n\nfmt.Println(a) //[1 2 3 4 5]\nfmt.Println(c) //[1 2 3 4 5]\nc[0] = 1000\nfmt.Println(a) //[1 2 3 4 5]\nfmt.Println(c) //[1000 2 3 4 5]\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("copy函数的易错点1：被赋值的切片 dst ，需要先初始化长度")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("不是你定义好类型，就能将 src 完全 copy 到 dst 的，你需要初始化长度。\n\n1：如果 dst 长度小于 src 的长度，则 copy 部分；\n2：如果大于，则全部拷贝过来，只是没占满 dst 的坑位而已；\n3：相等时刚好不多不少 copy 过来\n\n因此最好拷贝的时候，让dst与src具有一样的长度\na := []int{1, 2, 3, 4, 5}\nc := make([]int, len(a))\ncopy(c, a)     //使用copy()函数将切片a中的元素复制到切片c\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("ul",[t("li",[s._v("copy函数的易错点2：源切片中元素类型为引用类型时，拷贝的是引用，不是值。因此只有切片元素是值类型，copy拷贝函数才具有意义")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("由于 copy 切片中的元素，所以如果切片元素的类型是引用类型，那么 copy 的也将是个引用。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"七-从切片中删除元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七-从切片中删除元素"}},[s._v("#")]),s._v(" (七)：从切片中删除元素")]),s._v(" "),t("ul",[t("li",[s._v("Go语言中并没有删除切片元素的专用方法，我们可以使用切片本身的特性来删除元素。 代码如下：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\t// 从切片中删除元素\n\ta := []int{30, 31, 32, 33, 34, 35, 36, 37}\n\t// 要删除索引为2的元素\n\ta = append(a[:2], a[3:]...)\n\tfmt.Println(a) //[30 31 33 34 35 36 37]\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"三-切片是引用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-切片是引用类型"}},[s._v("#")]),s._v(" 三：切片是引用类型")]),s._v(" "),t("h3",{attrs:{id:"一-切片是引用类型-作为参数传递的时候-需要特别小心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-切片是引用类型-作为参数传递的时候-需要特别小心"}},[s._v("#")]),s._v(" (一)：切片是引用类型，作为参数传递的时候，需要特别小心")]),s._v(" "),t("ul",[t("li",[s._v("下面这段代码中，虽然切片作为值传递，但是切片本身是引用类型，拷贝一份后依然执行底层的数组")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('type Person struct {\n\tname   string\n\tage    int8\n\tdreams []string\n}\n\nfunc (p *Person) SetDreams(dreams []string) {\n\tp.dreams = dreams\n}\n\nfunc main() {\n\tp1 := Person{name: "小王子", age: 18}\n\tdata := []string{"吃饭", "睡觉", "打豆豆"}\n\tp1.SetDreams(data)\n\n\n\tdata[1] = "不睡觉"\n\n\t// 输出 [吃饭 不睡觉 打豆豆]\n\tfmt.Println(p1.dreams)\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("ul",[t("li",[s._v("如果改变外部的切片元素，不影响内部的切片元素，应该使用copy( )函数进行拷贝")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('type Person struct {\n\tname   string\n\tage    int8\n\tdreams []string\n}\n\n// SetDreams 使用copy函数将dreams重新拷贝一份\nfunc (p *Person) SetDreams(dreams []string) {\n\tnewDreams := make([]string, len(dreams))\n\tcopy(newDreams, dreams)\n\tp.dreams = newDreams\n}\n\nfunc main() {\n\tp1 := Person{name: "小王子", age: 18}\n\tdata := []string{"吃饭", "睡觉", "打豆豆"}\n\tp1.SetDreams(data)\n\n\n\tdata[1] = "不睡觉"\n\n\t// 输出 [吃饭 睡觉 打豆豆]\n\tfmt.Println(p1.dreams)\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h2",{attrs:{id:"四-切片的一些常用操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-切片的一些常用操作"}},[s._v("#")]),s._v(" 四：切片的一些常用操作")]),s._v(" "),t("h3",{attrs:{id:"一-切片中的-的使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-切片中的-的使用场景"}},[s._v("#")]),s._v(" (一)：切片中的"),t("code",[s._v("...")]),s._v("的使用场景")]),s._v(" "),t("ul",[t("li",[s._v("1：放在函数参数类型前面，代表不定数量的参数，类似于Python中的位置参数封装")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func add(nums ...int) int{\n\tsum := 0\n\tfor _, v := range nums {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\n\nfunc main() {\n\n\tret := add(1,2,3,4)\n\tfmt.Println(ret)\n\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("ul",[t("li",[s._v("2：放在切片后面，将slice打散进行传递，类似于Python中位置参数解构")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("subarray = append([]int{ele}, subarray...) \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"二-切片中添加元素的几种情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-切片中添加元素的几种情况"}},[s._v("#")]),s._v(" (二)：切片中添加元素的几种情况")]),s._v(" "),t("ul",[t("li",[s._v("1：向切片头部添加元素：需要先将头部元素封装为切片")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\n\tsubarray := []int{1, 2, 3, 4, 5, 6, 7}\n\tele := 100\n\ts := append([]int{ele}, subarray...)\n\tfmt.Println(s)\n\t\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("2：切片指定索引位置插入元素：需要从索引位置切断切片，在尾断子切片添加元素，再与首断切片合并")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\t\n\tsubarray := []int{1, 2, 3, 4, 5, 6, 7}\n\t\n\t// 插入元素\n\tindex := 4\n\tvalue := 100\n\t\n\t// 以索引为界限，获取后面的切片 \n\ttailSlice := subarray[index:] // [5,6,7]\n\t\n\t// 在后面的切片前添加一个元素\n\tret := append([]int{value}, tailSlice...) // [100,5,6,7]\n\t\n\t// 将前面的前面和后面的切片组合起来\n\tresult := append(subarray[:index], ret...) // [1 2 3 4 100 5 6 7]\n\t\n\tfmt.Println(result)\n\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("h3",{attrs:{id:"三-切片中删除元素的几种情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-切片中删除元素的几种情况"}},[s._v("#")]),s._v(" (三)：切片中删除元素的几种情况")]),s._v(" "),t("ul",[t("li",[s._v("1：删除头部元素：其实是使用切片的性质，获取一个丢掉头部元素的新切片")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\n\tsubarray := []int{1, 2, 3, 4, 5, 6, 7}\n\tret := subarray[1:]\n\tfmt.Println(ret)\n\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("2：删除指定索引的元素：其实是使用切片的性质，获取一个丢掉索引处元素的新切片")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\n\tsubarray := []int{1, 2, 3, 4, 5, 6, 7}\n\n\t// 设置元素的索引\n\tindex := 4\n\n\t// 这里是将两个slice连接起来\n\tnewSubArray := append(subarray[:index], subarray[index+1:]...)\n\n\tfmt.Println(newSubArray)\n\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("ul",[t("li",[s._v("3：删除最后一个元素：其实是使用切片的性质，获取一个丢掉尾部一个元素的新切片")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("func main() {\n\t\n\tsubarray := []int{1, 2, 3, 4, 5, 6, 7}\n\tret := subarray[:len(subarray)-1]\n\tfmt.Println(ret)\n\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("ul",[t("li",[s._v("小结：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\t数组是连续的内存地址空间，查询数据时间复杂度为O(1)。如果是删除元素，后面的元素都需要向前移动，时间复杂度为O(n)。因此，当业务需要大量、频繁地从一个切片中删除元素时，如果对性能要求较高，就需要反思是否需要更换其他的容器\n\t\n\t例如使用链表、双链表等线性数据结构，删除和添加头部元素或者尾部元素的时间复杂度为O(1)\n\n\t如果使用树结构存储数据，CRUD操作时间复杂度为O(n)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"四-对slice中的元素进行过滤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-对slice中的元素进行过滤"}},[s._v("#")]),s._v(" (四)：对slice中的元素进行过滤")]),s._v(" "),t("ul",[t("li",[s._v("方法一：对满足条件的slice元素，直接在slice中删除，但是这会导致slice移位，当slice数量足够多的时候，性能下降")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 在原有的slice上删除元素\nfunc filterSliceElement1(a []int) {\n    for i := 0; i < len(a); i++ {\n        // 如果满足条件，那么直接删除掉这个元素\n        if a[i] == 0 {\n            // 这里的赋值，相当于覆盖了之前的a数组的值\n            a = append(a[:i], a[i+1:]...)\n            // 删除一个元素后，后面的元素将会移动位置\n            i--\n        }\n    }\n}\n\nfunc main() {\n    a := []int{1,2,3,0,5,3,3,0,2,3,4,0,44}\n    filterSliceElement3(a)\n    fmt.Println(a)\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("ul",[t("li",[s._v("方法二：创建一个同cap容量的slice，将符合条件的元素添加到新的slice中，最后返回新的slice。这样其实在内存中开辟了一块新的空间，速度比较快，但是浪费内存空间")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 创建一个同cap容量的slice，将符合条件的元素添加到新的slice中\nfunc filterSliceElement2(a []int) []int {\n    // 初始化一个空slice\n    ret := make([]int, 0, len(a))\n    for _, val := range a {\n        if val != 0 {\n            ret = append(ret, val)\n        }\n    }\n    return ret\n}\n\n\nfunc main() {\n    a := []int{1,2,3,0,5,3,3,0,2,3,4,0,44}\n    ret := filterSliceElement2(a)\n    fmt.Println(ret)\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("ul",[t("li",[s._v("方法三：在原有的slice上将满足条件的元素，依次按照0、1、2的索引覆盖之前元素的值。这样既没有移动slice元素，也没有开辟新的内存空间，所以效果最好")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// 在原有的slice上将满足条件的元素，依次按照索引覆盖之前元素的值\nfunc filterSliceElement3(a []int) []int {\n    j := 0\n    for _, val := range a {\n        if val != 0 {\n            a[j] = val\n            j++\n        }\n    }\n    // 最后在j这个索引截取返回\n    return a[:j]\n}\n\nfunc main() {\n    a := []int{1,2,3,0,5,3,3,0,2,3,4,0,44}\n    ret := filterSliceElement3(a)\n    fmt.Println(ret)\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("ul",[t("li")])])}),[],!1,null,null,null);n.default=e.exports},726:function(s,n,a){s.exports=a.p+"assets/img/2021-05-265.51.52.58f112ba.png"}}]);