(window.webpackJsonp=window.webpackJsonp||[]).push([[363],{2214:function(n,s,t){"use strict";t.r(s);var e=t(9),a=Object(e.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"一-encoding-gob"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-encoding-gob"}},[n._v("#")]),n._v(" 一：encoding/gob")]),n._v(" "),t("h3",{attrs:{id:"一-什么是gob"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-什么是gob"}},[n._v("#")]),n._v(" (一)：什么是gob")]),n._v(" "),t("ul",[t("li",[t("code",[n._v("gob是一个数据结构序列化的编码/解码工具")]),n._v("，"),t("code",[n._v("gob和json的pack之类的方法一样，由发送端使用Encoder方法对数据结构进行编码")]),n._v("，在接收端收到消息之后，"),t("code",[n._v("接收端使用Decoder将序列化的数据变化成本地变量")]),n._v("。gob编解码的效率会比json，xml等更高，因此在两个Go 服务之间的相互通信建议不要再使用json传递，也可以使用protobuf编解码")])]),n._v(" "),t("h3",{attrs:{id:"二-gob的编码和解码规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-gob的编码和解码规则"}},[n._v("#")]),n._v(" (二)：gob的编码和解码规则")]),n._v(" "),t("ul",[t("li",[n._v("发送方的结构和接受方的结构并不需要完全一致，例如发送方的结构如下")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("struct { A, B int }\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("ul",[t("li",[n._v("那么接收方定义的结构体可以是如下")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("struct { A, B int }\t    // 相同\n*struct { A, B int }\t// 结构的额外间接\nstruct { *A, **B int }\t// 额外的字段间接\nstruct { A, B int64 }\t// 不同的具体值类型\n\nstruct { A, B int }\t    // 相同\nstruct { B, A int }\t// 位置交换无所谓\nstruct { A, B, C int }\t// 额外字段（C）被忽略\nstruct { B int }\t// 丢失的字段（A）被忽略; 数据将被删除\nstruct { B, C int }\t// 丢失的字段（A）被忽略; 额外字段（C）被忽略\n\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("ul",[t("li",[n._v("但是下面这几种会报错")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("struct { A int; B uint }\t// 改变B的类型\nstruct { A int; B float }\t// 改变B的类型\nstruct { }\t\t\t        // 没有共同的字段名称\nstruct { C, D int }\t\t    // 没有共同的字段名称\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br")])]),t("h3",{attrs:{id:"三-一个简单的encoder和decoder示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-一个简单的encoder和decoder示例"}},[n._v("#")]),n._v(" (三)：一个简单的Encoder和Decoder示例")]),n._v(" "),t("ul",[t("li",[n._v("编码器必须基于一个io.Writer类型对象，bytes.Buffer类型实现了io.Writer接口，可以作为io.Writer类型对象。解码器也是同理")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('type P struct {\n\tX, Y, Z int\n\tName    string\n}\n\ntype Q struct {\n\tX, Y *int32\n\tName string\n}\n\nfunc main() {\n\tvar network bytes.Buffer\n\n\t// 获取一个可以在io.Writer上传输的编码器\n\tenc := gob.NewEncoder(&network)\n\t// 获取一个可以在io.Writer上传输的解码器\n\tdec := gob.NewDecoder(&network)\n\n\t// 将p对象编码\n\tp := P{3, 4, 5, "Pythagoras"}\n\terr := enc.Encode(p)\n\tif err != nil {\n\t\tlog.Fatal("encode error:", err)\n\t}\n\n\t// 将编码的结果解码到q对象中\n\tvar q Q\n\terr = dec.Decode(&q)\n\tif err != nil {\n\t\tlog.Fatal("decode error:", err)\n\t}\n\n\n\tfmt.Println(q)\n\t// q.X获取的是地址，*q.X获取的是地址存储的值\n\tfmt.Printf("%q: {%d,%d}\\n", q.Name, q.X, *q.Y)\n\n}\n\n\n// 输出结果\n{0xc000014470 0xc000014474 Pythagoras}\n"Pythagoras": {824633803888,4}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br")])]),t("h3",{attrs:{id:"四-当结构体中-有一个字段是interface-的时候需要对interface-的可能产生的类型进行注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-当结构体中-有一个字段是interface-的时候需要对interface-的可能产生的类型进行注册"}},[n._v("#")]),n._v(" (四)：当结构体中，有一个字段是interface{}的时候需要对interface{}的可能产生的类型进行注册")]),n._v(" "),t("ul",[t("li",[n._v("这里的Name属性可能是Inner类型，因此对Inner类型进行了注册")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('type P struct {\n\tX, Y, Z int\n\tName    interface{}\n}\n\ntype Q struct {\n\tX, Y *int32\n\tName interface{}\n}\n\ntype Inner struct {\n\tTest int\n}\n\nfunc main() {\n\n\tvar network bytes.Buffer\n\tenc := gob.NewEncoder(&network)\n\tdec := gob.NewDecoder(&network)\n\n\t// 注册Inner类型\n\tgob.Register(Inner{})\n\n\t// 编码\n\tinner := Inner{1}\n\terr := enc.Encode(P{1,2,3, inner})\n\tif err != nil {\n\t\tlog.Fatal("encode error:", err)\n\t}\n\n\t// 解码\n\tvar q Q\n\terr = dec.Decode(&q)\n\tif err != nil {\n\t\tlog.Fatal("decode error:", err)\n\t}\n\tfmt.Println(q)\n\tfmt.Printf("%q: {%d,%d}\\n", q.Name, *q.X, *q.Y)\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br")])]),t("h3",{attrs:{id:"五-如果结构体实现了gobencoder和gobdecoder两个接口-当调用encoder-encode和decoder-decode的时候就会调用这两个接口的实现方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五-如果结构体实现了gobencoder和gobdecoder两个接口-当调用encoder-encode和decoder-decode的时候就会调用这两个接口的实现方法"}},[n._v("#")]),n._v(" (五)：如果结构体实现了GobEncoder和GobDecoder两个接口，当调用encoder.Encode和decoder.Decode的时候就会调用这两个接口的实现方法")]),n._v(" "),t("ul",[t("li",[n._v("下面的例子中，P结构体实现了GobEncode接口，那么调用Encode方法的时候，就会调用GobEncode接口的实现方法，"),t("code",[n._v("这种情况下，可以让我们自定义编码和解码规则")])])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('type P struct {\n\tX, Y, Z int\n\tName    string\n}\n\nfunc (p *P)GobEncode() ([]byte, error) {\n\tfmt.Println("调用了GobEncode方法")\n\treturn []byte{},nil\n}\n\ntype Q struct {\n\tX, Y *int32\n\tName string\n}\n\nfunc main() {\n\tvar network bytes.Buffer\n\tenc := gob.NewEncoder(&network)\n\tdec := gob.NewDecoder(&network)\n\n\t// Encode (send) the value.\n\terr := enc.Encode(P{3, 4, 5, "Pythagoras"})\n\tif err != nil {\n\t\tlog.Fatal("encode error:", err)\n\t}\n\t// Decode (receive) the value.\n\tvar q Q\n\terr = dec.Decode(&q)\n\tif err != nil {\n\t\tlog.Fatal("decode error:", err)\n\t}\n\tfmt.Println(q)\n\tfmt.Printf("%q: {%d,%d}\\n", q.Name, *q.X, *q.Y)\n\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);